{"version":3,"sources":["features/farming_minigame/Farming.module.css","app/hooks.ts","features/farming_minigame/farmingSlice.ts","features/farming_minigame/Farming.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/gameState/Types.ts","features/gameState/Items.ts","features/gameState/Quest.ts","features/thermite_bossfight/thermiteSlice.ts","features/gameState/gameStateSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppSelector","useSelector","fiveByFiveGrid","gridLength","choiceCount","coordChoices","grid","allParams","3","4","5","initialState","initializeGrid","status","score","maxScore","maxScoreCoords","enabled","achievementStats","perfectScores","streak","achievements","Array","freshAchievements","gridParams","n","randomGrid","keys","map","i","j","min","max","Math","ceil","floor","random","choose","arr","k","prefix","flatMap","v","slice","bruteForce","gridCopy1","length","deactivateGrid","JSON","parse","stringify","curr","choices","choice","gridCopy","x","activateGridCoords","calculateScore","coords1","push","coords","maxCoord","baseScores","6","base","farmingSlice","createSlice","name","reducers","activateCell","state","action","payload","console","log","filter","y","current","coord","setGridSize","emptyGrid","startGrid","bruteForceSolution","enableButtons","actions","selectGrid","farming","selectGridSize","selectStatus","selectScore","selectMaxScore","Farming","gridSize","dispatch","useDispatch","audio","Audio","addEventListener","this","currentTime","play","activateCellAudio","volume","deactivateCellAudio","perfectScoreAudio","finishRoundAudio","getButtonStyle","cellValue","enabledButtons","styles","button","optimal","greenInactive","blueInactive","redInactive","greenActive","blueActive","redActive","runLoop","paused","setTimeout","style","className","row","color","onClick","cell","disabled","getBoard","type","value","checked","onChange","App","id","options","fullScreen","enable","zIndex","background","opacity","fpsLimit","interactivity","detectsOn","modes","bubble","distance","duration","size","particles","collisions","move","direction","outMode","speed","straight","number","density","value_area","shape","rotate","animation","opacityRate","sizeRate","detectRetina","backgroundColor","xmlns","height","width","fill","viewBox","d","fetchCount","amount","Promise","resolve","data","RoomList","SpellList","incrementAsync","createAsyncThunk","a","response","counterSlice","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","pd","require","spells1","Fireball","description","cooldown","available","CommuneWithPlants","Heal","FrostRay","SpectralRope","isCostSatisfiable","cost","resources","c","removeResources","combineRedParams","b","redFn","params","total","linearP1","blueFn","normalP1","normalP2","rnorm","jungleRoomInteraction","spell","room","statuses","includes","combatLogMessages","unshift","redFnParams","caveRoomInteraction","moonDoor","desertRoomInteraction","hp","treeTopsRoomInteraction","rabbitDoor","rabbitRoomInteraction","ropeMonsterDoor","monstersRoomInteraction","boulderDodgeRoomInteraction","monstersDoorInteraction","o","EmptyFn","FakeRoom","Cave","volcanoBossFightRoom","Treasure","VolcanoBoss","title","green","red","blue","destination","cageTrapRoom","CageTrap","graniteRaftRoom","GraniteRaft","trappedInsectRoom","TrappedInsect","altarRoom","obsidianHallway","ObsidianHallway","Altar","lavaFlowRoom","LavaFlow","lost","CrumblingBridge","wastes","Wastes","Lost","templeGuardianRoom","TempleGuardian","oasisRoom","Oasis","unknownRoom","Unknown","volcanoRoom","Volcano","boulderRoom","Boulder","monstersRoom","Monsters","rabbitRoom","Rabbit","treeTopsRoom","TreeTops","templeRuinsRoom","TempleRuins","jungleRoom","Jungle","desertRoom","Sandstorm","Desert","moonRoom","Moon","fungalColonyRoom","FungalColony","caveRoom","bossHP","round","thermiteSlice","triggerThermite","winThermiteBossFight","calculateDamage","SlimeBossStatuses","boss","bossHp","gameLoopInterval","availableSpells","items","itemsTier1","costsTier1","shuffle","initializeTier1","greenFnParams","quadraticP1","twoPowerP1","blueFnParams","hpFnParams","blueDist","bluePast","greenDist","redDist","greenUpgrades","redUpgrades","blueUpgrades","initialStateCopy","Object","assign","gameStateSlice","startLoop","resetState","clearInterval","incrementRed","shift","castSpell","find","match","with","IceChamber","MagmaWaterfall","StatueRoom","exhaustive","getDoorInteractions","handleSpell","resetSpell","incrementBlue","incrementGreen","pow","greenFn","incrementHP","hpFn","attackBoss","startTempleGuardianBossFight","NaN","startThermiteBossFight","bossAttack","incrementBossHP","boulderKill","setGameLoopIntervals","clearGameLoopIntervals","addCombatLogMessages","clearCombatLogMessages","buyItem","item","currentItem","addResources","stepQuest","step","currentStep","currentChoice","upgrade","currentUpgrade","concat","combineGreenParams","combineBlueParams","persistedState","localStorage","getItem","gameState","store","configureStore","reducer","counter","counterReducer","gameStateReducer","thermite","thermiteReducer","farmingReducer","preloadedState","subscribe","setItem","getState","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0902e57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Farming_row__3F5tY\",\"value\":\"Farming_value__2vtaD\",\"button\":\"Farming_button__3edmD\",\"textbox\":\"Farming_textbox__219dn\",\"asyncButton\":\"Farming_asyncButton__pDz8e Farming_button__3edmD\",\"buttonThermite\":\"Farming_buttonThermite__1ZXsW\",\"greenInactive\":\"Farming_greenInactive__wywNz\",\"blueInactive\":\"Farming_blueInactive__1cpj0\",\"redInactive\":\"Farming_redInactive__AwjGf\",\"greenActive\":\"Farming_greenActive__-odSk\",\"blueActive\":\"Farming_blueActive__32hG-\",\"redActive\":\"Farming_redActive__2R1kz\",\"optimal\":\"Farming_optimal__1UIra\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk, createSlice, PayloadAction, current } from '@reduxjs/toolkit';\nimport { stat } from 'fs';\nimport { RootState, AppThunk } from '../../app/store';\n\ninterface GridParams {\n  gridLength: number;\n  coordChoices: Array<Array<number>>;\n  choiceCount: number;\n  grid: Array<Array<number>>\n}\n\ninterface AchievementStats {\n  perfectScores: number;\n  streak: number;\n}\n\ninterface Achievement {\n  perfectScores?: number;\n  streak?: number;\n  title: string;\n  description: string;\n}\n\nlet fiveStreak: Achievement = {streak: 5, title: \"Five Win Streak\", description: \"Unprecedented success!\"}\nlet tenStreak: Achievement = {streak: 5, title: \"Ten Win Streak\", description: \"Unprecedented success!\"}\nlet tenTotal: Achievement = {streak: 5, title: \"Ten Wins!\", description: \"Unprecedented success!\"}\nlet hundredTotal: Achievement = {streak: 5, title: \"One Hundred Wins\", description: \"Unprecedented success!\"}\n\nexport interface FarmingState {\n  grid: GridParams;\n  status: 'idle' | 'starting' | 'started' | 'finished';\n  score: number;\n  maxScore: number;\n  maxScoreCoords: Array<Array<number>>;\n  enabled: boolean;\n  achievementStats: AchievementStats;\n  achievements: Array<Achievement>;\n  freshAchievements: Array<Achievement>;\n}\n\n\n\nlet threeByThreeGrid: GridParams = {\n  gridLength: 3,\n  choiceCount: 3,\n  coordChoices: [[0,0], [0,1], [0,2], [1,0],[2,0],[1,1], [2,1],[1,2],[2,2]],\n  grid: [[0]]\n}\nlet fourByFourGrid: GridParams = {\n  gridLength: 4,\n  choiceCount: 4,\n  coordChoices: [[0,0], [0,1], [0,2], [0,3], [1,0],[2,0], [3,0], [1,1], [2,1], [3,1], [1,2],[2,2], [3,2], [1,3], [2,3], [3,3],],\n  grid: [[0]]\n}\nlet fiveByFiveGrid: GridParams = {\n  gridLength: 5,\n  choiceCount: 5,\n  coordChoices: [[0,0], [0,1], [0,2], [0,3], [0,4], [1,0],[2,0], [3,0], [4,0], [1,1], [2,1], [3,1], [4,1], [1,2],[2,2], [3,2], [4,2], [1,3], [2,3], [3,3], [1,4], [2,4], [3,4], [4,3], [4,4],],\n  grid: [[0]]\n}\n\nlet allParams = {\n  3: threeByThreeGrid,\n  4: fourByFourGrid,\n  5: fiveByFiveGrid\n}\n\nconst initialState: FarmingState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(fiveByFiveGrid),\n  status: 'idle',\n  score: 0,\n  maxScore: 20,\n  maxScoreCoords: [[0]],\n  enabled: false,\n  achievementStats: {perfectScores: 0, streak: 0},\n  achievements: new Array<Achievement>(),\n  freshAchievements: new Array<Achievement>()\n};\n\nfunction getRandomIntInclusive(min:number, max:number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nfunction emptyGrid(gridParams: GridParams): GridParams{\n  let n = gridParams.gridLength\n  let randomGrid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => 0))\n  gridParams.grid = randomGrid\n  return gridParams\n}\n\nfunction initializeGrid(gridParams: GridParams): GridParams{\n  let n = gridParams.gridLength\n  let randomGrid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => getRandomIntInclusive(1,3)))\n  gridParams.grid = randomGrid\n  return gridParams\n}\nexport interface BruteforceSolution {\n  coords: Array<Array<number>>;\n  maxScore: number;\n}\n\n\nfunction choose(arr, k, prefix: Array<number> =[]) {\n  if (k == 0) return [prefix];\n  return arr.flatMap((v, i) =>\n      choose(arr.slice(i+1), k-1, [...prefix, v])\n  );\n}\n\n\n\nfunction bruteForce(grid: GridParams): BruteforceSolution{\n  //let coordChoices = {1: [0,0], 2: [0,1], 3: [0,2], 4: [1,0], 5:[2,0], 6:[1,1], 7:[2,1],8:[1,2], 9:[2,2]}\n  let coordChoices = grid.coordChoices\n  let gridCopy1 = deactivateGrid(JSON.parse(JSON.stringify(grid.grid)))\n  let curr: Array<BruteforceSolution> = []\n  let choices = choose([...Array(grid.coordChoices.length).keys()], grid.choiceCount)\n  for (const choice of choices){\n    let gridCopy =JSON.parse(JSON.stringify(gridCopy1))\n    choice.flatMap(x => activateGridCoords(gridCopy, coordChoices[x]))\n    let score = calculateScore(gridCopy)\n    let coords1 = choice.map(x => coordChoices[x])\n    curr.push({coords:coords1, maxScore:score})\n  }\n  let maxCoord = [[0]]\n  let maxScore = 0\n  for(let x of curr){\n    if(x.maxScore > maxScore){\n      maxCoord = x.coords\n      maxScore = x.maxScore\n    }\n  }\n\n  return {coords: maxCoord, maxScore: maxScore}\n}\n\nfunction calculateScore(grid: Array<Array<number>>){\n  let score = 0;\n  let baseScores = {4: 3, 5: 2, 6: 1}\n\n\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[0].length; j++){\n      let base = baseScores[grid[i][j]] || 0\n      if(base === 0){\n        continue;\n      }\n      if((i - 1 >= 0 && grid[i - 1][j] === 5) || (i + 1 < grid.length && grid[i + 1][j] === 5)){\n        base = base + 1\n      }\n      if((i - 1 >= 0 && j - 1 >= 0 && grid[i - 1][j- 1] === 6 )  \n      || (i - 1 >= 0 && j + 1 <= grid[0].length && grid[i - 1][j + 1] === 6 )  \n      || (i + 1 < grid.length && j - 1 >= 0 && grid[i + 1][j - 1] === 6 )  \n      || (i + 1 < grid.length && j + 1 < grid[0].length && grid[i + 1][j + 1] === 6)){\n        base = base + 1\n      }\n      if((j - 1 >= 0 && grid[i][j - 1] === 4) || (j + 1 < grid[0].length && grid[i][j + 1] === 4)){\n        base = 0\n      }\n      score = score + base\n    }\n  }\n\n  return score;\n}\n\nfunction activateGridCoords(grid, coords){\n  switch(grid[coords[0]][coords[1]]) {\n    case 1: grid[coords[0]][coords[1]] = 4; break;\n    case 2: grid[coords[0]][coords[1]] = 5; break;\n    case 3: grid[coords[0]][coords[1]] = 6; break;\n    case 4: grid[coords[0]][coords[1]] = 1; break;\n    case 5: grid[coords[0]][coords[1]] = 2; break;\n    case 6: grid[coords[0]][coords[1]] = 3; break;\n  }\n  return grid\n}\n\nfunction deactivateGrid(grid){\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[0].length; j++){\n      switch(grid[i][j]) {\n        case 4: grid[i][j] = 1; break;\n        case 5: grid[i][j] = 2; break;\n        case 6: grid[i][j] = 3; break;\n        default: break;\n      }\n    }\n  }\n  \n  return grid\n}\n\nexport const farmingSlice = createSlice({\n  name: 'farming',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n    activateCell: (state, action) => {\n      let coords = action.payload;\n      console.log(coords)\n      //let coords = [0,2]\n      state.grid.grid = activateGridCoords(state.grid.grid, coords)\n      console.log('test')\n      if(state.grid.grid.flatMap(x => x).filter(x => x >= 4 && x <=6).length === state.grid.choiceCount){\n        state.status = 'finished'\n        state.score = calculateScore(state.grid.grid)\n        if(state.score === state.maxScore){\n          state.grid.grid = state.grid.grid.map(x => x.map(y => y > 3 ? y + 6 : y))\n          state.achievementStats.perfectScores += 1\n          state.achievementStats.streak += 1\n          \n        } else {\n          for(const coord of current(state.maxScoreCoords)){\n            console.log(coord)\n            console.log(current(state.grid))\n            console.log(current(state.maxScoreCoords))\n            state.grid.grid[coord[0]][coord[1]] += 6\n          }\n          state.achievementStats.streak = 0\n        }\n        \n\n      }\n      //state.value += 1;\n    },\n    setGridSize: (state, action) => {\n      state.grid = emptyGrid(JSON.parse(JSON.stringify(allParams[action.payload])))\n    },\n    startGrid: (state) => {\n      state.status = 'starting'\n      state.grid = initializeGrid(state.grid)\n      let bruteForceSolution = bruteForce(state.grid)\n      state.maxScore = bruteForceSolution.maxScore\n      state.maxScoreCoords = bruteForceSolution.coords\n    },\n    enableButtons: (state) => {\n      console.log('yes')\n      state.status = 'started'\n    },\n\n  },\n});\n\nexport const {startGrid, activateCell, enableButtons, setGridSize } = farmingSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectGrid = (state: RootState) => state.farming.grid.grid;\nexport const selectGridSize = (state: RootState) => state.farming.grid.gridLength;\nexport const selectStatus = (state: RootState) => state.farming.status;\nexport const selectScore = (state: RootState) => state.farming.score;\nexport const selectMaxScore = (state: RootState) => state.farming.maxScore;\n\n\nexport default farmingSlice.reducer;\n","import React, { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  selectGrid,\n  selectGridSize,\n  setGridSize,\n  activateCell,\n  enableButtons,\n  selectStatus,\n  startGrid,\n  selectScore,\n  selectMaxScore\n} from './farmingSlice';\nimport styles from './Farming.module.css';\n\nexport function Farming() {\n  const grid = useAppSelector(selectGrid);\n  const gridSize = useAppSelector(selectGridSize);\n  const score = useAppSelector(selectScore);\n  const maxScore = useAppSelector(selectMaxScore);\n  const status = useAppSelector(selectStatus);\n  const dispatch = useAppDispatch();\n  const audio = new Audio(\"./MushroomBluegrass.mp3\")\n  audio.addEventListener('ended', function () {\n    this.currentTime = 0;\n    this.play();\n  }, false);\n\n  const activateCellAudio = new Audio(\"./activate_cell3.wav\")\n  activateCellAudio.volume = 0.3\n\n  const deactivateCellAudio = new Audio(\"./deactivate_cell.wav\")\n  deactivateCellAudio.volume = 0.3\n\n  const perfectScoreAudio = new Audio(\"./perfect_score.wav\")\n  const finishRoundAudio = new Audio(\"./finish_round.wav\")\n\n\n\n\n\n  function getButtonStyle(cellValue, enabledButtons) {\n    if (status === 'idle') {\n      return styles.button;\n    }\n    if (cellValue > 6) {\n      cellValue -= 6;\n      switch (cellValue) {\n        case 0: return styles.button + ' ' + styles.optimal;\n        case 1: return styles.greenInactive + ' ' + styles.optimal;\n        case 2: return styles.blueInactive + ' ' + styles.optimal;\n        case 3: return styles.redInactive + ' ' + styles.optimal;\n        case 4: return styles.greenActive + ' ' + styles.optimal;\n        case 5: return styles.blueActive + ' ' + styles.optimal;\n        case 6: return styles.redActive + ' ' + styles.optimal;\n\n\n      }\n    }\n    switch (cellValue) {\n      case 0: return styles.button;\n      case 1: return styles.greenInactive;\n      case 2: return styles.blueInactive;\n      case 3: return styles.redInactive;\n      case 4: return styles.greenActive;\n      case 5: return styles.blueActive;\n      case 6: return styles.redActive;\n\n\n    }\n  }\n\n  function runLoop() {\n    console.log('loop')\n    if(audio.paused){\n      audio.volume = 0.2;\n      audio.play();\n    }\n    setTimeout(() => dispatch(startGrid()), 100);\n    setTimeout(() => dispatch(enableButtons()), 100);\n    \n  }\n\n  function clickCell(coord) {\n    if(grid[coord[0]][coord[1]] > 3){\n      deactivateCellAudio.play();\n    } else {\n      activateCellAudio.play();\n    }\n    \n    dispatch(activateCell(coord))\n  }\n\n  function getBoard() {\n    switch (status) {\n      case 'idle': return (<div>\n        <div className={styles.row}>\n          <button className={styles.button}\n            style={{ 'backgroundColor': 'goldenrod', color: 'white' }}\n            onClick={runLoop\n            }\n\n          >Start</button>\n        </div>\n        {grid && grid.map((row, i) => {\n          return (<div className={styles.row}>\n            {row.map((cell, j) =>\n            (<button disabled={true} className={getButtonStyle(cell, status)}\n\n\n            >O</button>)\n            )\n            }\n\n          </div>\n          )\n        })}\n\n\n\n      </div>);\n      case 'starting':\n      case 'started':\n      case 'finished': return (\n        <div>\n\n          {grid && grid.map((row, i) => {\n            return (<div className={styles.row}>\n              {row.map((cell, j) =>\n              (<button disabled={status === 'finished'} className={getButtonStyle(cell, status)}\n                onClick={() => clickCell([i, j])}\n\n              >O</button>)\n              )\n              }\n\n            </div>\n            )\n          })}\n\n\n\n        </div>\n      )\n\n    }\n  }\n\n  {status === 'finished' && score > 0 && score === maxScore && perfectScoreAudio.play()}\n  {status === 'finished' && score > 0 && score !== maxScore && finishRoundAudio.play()}\n  return (\n    <div>\n      <h3 style={{ 'color': 'rgb(222, 222, 222)' }}>Mushroom Minigame</h3>\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Red mushrooms give 1 point and add 1 point to active diagonal mushrooms</span><br />\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Green mushrooms give 3 point and set active mushrooms to the left and right to 0 points</span><br />\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Blue mushrooms give 2 points and add 1 point to active mushrooms above and below them</span><br />\n      <br />\n      {getBoard()}\n      {status === 'finished' && (<div><span style={{ 'color': 'rgb(255, 255, 255)' }}>Your Score:{score}</span>\n        <br />\n        <span style={{ 'color': 'rgb(255, 255, 255)' }}>Max Possible Score:{maxScore}</span>\n        \n        <div className={styles.row}>\n        <label style={{ 'color': 'rgb(255, 255, 255)',  'paddingRight':'12px' }}>\n          <input type=\"radio\" name=\"gridsize3x3\"\n            value={3}\n            checked={gridSize === 3}\n            onChange={() => dispatch(setGridSize(3))} /> 3X3</label>\n          <label style={{ 'color': 'rgb(255, 255, 255)' ,  'paddingRight':'12px'}}>\n          <input type=\"radio\" name=\"gridsize4x4\"\n            value={4}\n            checked={gridSize === 4}\n            onChange={() => dispatch(setGridSize(4))} />4X4</label>\n          \n          <label style={{ 'color': 'rgb(255, 255, 255)', 'paddingRight':'12px' }}>\n          <input type=\"radio\" name=\"gridsize5x5\"\n            value={5}\n            checked={gridSize === 5}\n            onChange={() => dispatch(setGridSize(5))} />5X5</label>\n          <button className={styles.button}\n            style={{ 'backgroundColor': 'goldenrod', color: 'white' }}\n            onClick={runLoop\n            }\n\n          >Start</button>\n        </div>\n      </div>)\n      }\n    </div>\n  );\n}\n\n//{status === 'started' && <img src='./timeout_bar.svg' className=\"App-logo\" alt=\"logo\" />}","import React from 'react';\nimport logo from './Beetle.png';\nimport { CYOA } from './features/gameState/CYOA';\nimport { Draft } from './features/gameState/Draft';\nimport { GameOver } from './features/gameState/GameOver';\nimport { TechTree } from './features/gameState/TechTree';\nimport { Maze } from './features/maze/Maze';\nimport { Thermite } from './features/thermite_bossfight/Thermite'\nimport { Farming } from './features/farming_minigame/Farming'\nimport './App.css';\nimport Particles from \"react-tsparticles\";\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Particles\n      id=\"tsparticles\"\n      options={{\n        fullScreen: {\n          enable: true,\n          zIndex: 0\n        },\n        background: {\n          color: {\n            value: \"rgb(147,70,17)\",\n          },\n          \n          opacity: 0.01\n        },\n        fpsLimit: 60,\n        interactivity: {\n          detectsOn: \"canvas\",\n          modes: {\n            bubble: {\n              distance: 400,\n              duration: 2,\n              opacity: 0.2,\n              size: 10,\n            }, \n          },\n        },\n        particles: {\n          color: {\n            value: [\n              \"#921212\",\n              \"#9e1b3e\",\n              \"#c3711a\",\n              \"#ff6b00\"\n            ]\n\n          },\n        \n          collisions: {\n            enable: false,\n          },\n          move: {\n            direction: \"none\",\n            enable: true,\n            outMode: \"out\",\n            random: true,\n            speed: 4,\n            straight: false,\n          },\n          number: {\n            density: {\n              enable: true,\n              value_area: 800,\n            },\n            value: 8,\n          },\n          opacity: {\n            value: 0.5,\n          },\n          shape: {\n            type: [\"polygon\", \"circle\"],\n          },\n          size: {\n            random: true,\n            value: 5,\n          },\n          rotate: {\n            direction: \"clockwise\",\n            animation: {\n              enable: true,\n              speed: 8\n            }\n          },\n          zIndex: {\n            opacityRate: 0.2,\n            sizeRate: 0.5\n          }\n        },\n        detectRetina: true,\n      }}\n      \n      >\n        </Particles>\n      <header className=\"App-header\" >\n      \n        \n        <div style={{zIndex: 1, backgroundColor: 'rgba(85, 85, 85, 0.3)'}}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"150px\" width=\"150px\" fill=\"#b2b2b2\" viewBox=\"0 0 64 64\" x=\"0px\" y=\"0px\"><path d=\"M19.631,36.864A1,1,0,0,0,20.369,35c-.06-.023-.117-.05-.177-.074L21.9,24.688c.363.027.721.053,1.088.083-.13,10.067-2.308,23.656-3.627,31A7,7,0,0,0,26.252,64H39.238a6.994,6.994,0,0,0,6.935-7.953c-.378-2.729-1.417-9.59-3.2-17.076,4.679-.153,17.295-1.063,20.864-6.416a1,1,0,0,0,.155-.714C63.936,31.522,58.521,0,30,0,1.376,0,.012,22.725,0,22.955a1,1,0,0,0,.26.718A57.524,57.524,0,0,0,19.631,36.864ZM16.6,24.341l-2.129,7.808c-1.055-.6-2.058-1.215-3.006-1.837L14.5,24.236C15.181,24.267,15.881,24.3,16.6,24.341Zm-6.8,4.836q-1.236-.874-2.3-1.713l2.043-3.406c.876.023,1.8.051,2.779.087ZM5.914,26.2c-1.009-.843-1.851-1.6-2.511-2.222,1,0,2.288,0,3.826.031ZM18.3,34.115c-.692-.316-1.365-.647-2.025-.987l2.363-8.668c.412.025.838.056,1.258.084ZM34.878,24.046c-3.389-.462-6.71-.824-9.872-1.1a5,5,0,1,1,9.872,1.1Zm8.135,36.237A5,5,0,0,1,39.238,62H26.252a4.994,4.994,0,0,1-4.923-5.873c1.323-7.372,3.5-20.987,3.656-31.185,3.855.343,7.945.809,12.1,1.433,4.258,10.944,6.515,25.644,7.111,29.946A4.983,4.983,0,0,1,43.013,60.283Zm-3.657-33.55c.648.107,1.3.216,1.944.331l3.278,9.83c-.737.043-1.439.072-2.1.088A102.933,102.933,0,0,0,39.356,26.733ZM56,30.545v4.529c-.644.2-1.313.373-2,.534V29.95Q55.008,30.24,56,30.545Zm-4,5.479c-.378.07-.755.135-1.136.2l-1.5-7.488q1.328.318,2.634.665ZM47.228,28.24,48.881,36.5c-.759.094-1.51.174-2.246.239l-3.089-9.266Q45.4,27.832,47.228,28.24ZM58,34.368V31.191c1.133.383,2.235.794,3.319,1.219A11.188,11.188,0,0,1,58,34.368ZM54.939,15.051a42.8,42.8,0,0,1,4.619,8.694,4.994,4.994,0,0,1-4.619-8.694ZM39.586,3.422A27.9,27.9,0,0,1,49.964,9.363,6,6,0,0,1,39.586,3.422Zm-1.945-.537A7.993,7.993,0,0,0,51.417,10.77a33.082,33.082,0,0,1,2.332,2.673,6.99,6.99,0,0,0,6.509,12.174,46.755,46.755,0,0,1,1.393,4.774,118.874,118.874,0,0,0-24.78-6.062,7,7,0,1,0-13.86-1.556c-9.971-.8-18.032-.815-20.9-.788A22.525,22.525,0,0,1,3.723,16.3,7.994,7.994,0,0,0,15,9a7.872,7.872,0,0,0-.906-3.682C18,3.331,23.163,2,30,2A32.564,32.564,0,0,1,37.641,2.885ZM12.348,6.3A5.993,5.993,0,0,1,4.6,14.5,21.6,21.6,0,0,1,12.348,6.3Z\"/><path d=\"M26.918,48.034a1.006,1.006,0,0,0-1.225.707,12.368,12.368,0,0,1-.588,1.812,1,1,0,0,0,1.79.894,12.993,12.993,0,0,0,.73-2.188A1,1,0,0,0,26.918,48.034Z\"/><path d=\"M27.758,30.03a1,1,0,0,0-.728,1.213c.009.038.942,3.887-.02,10.616q-.153,1.065-.3,1.978a1,1,0,0,0,.823,1.15,1.034,1.034,0,0,0,.164.013,1,1,0,0,0,.986-.837c.1-.623.207-1.3.31-2.021,1.016-7.113.023-11.213-.02-11.385A1,1,0,0,0,27.758,30.03Z\"/><path d=\"M33.341,46.92a1,1,0,0,0-1.28.6,11.342,11.342,0,0,1-.918,1.964,1,1,0,1,0,1.714,1.03A13.1,13.1,0,0,0,33.941,48.2,1,1,0,0,0,33.341,46.92Z\"/><path d=\"M33.876,36.008a1,1,0,0,0-.868,1.116,29.669,29.669,0,0,1,0,6.032,1,1,0,0,0,.889,1.1.955.955,0,0,0,.106.006,1,1,0,0,0,.993-.9,31.242,31.242,0,0,0,0-6.491A1,1,0,0,0,33.876,36.008Z\"/><path d=\"M37.01,44.142l1,7a1,1,0,1,0,1.98-.284l-1-7a1,1,0,0,0-1.98.284Z\"/><path d=\"M61,53c0-.964-.123-9.459-4.4-10.978-2.728-.969-6.12,1.109-10.375,6.348a1,1,0,0,0-.119,1.077c.14.278,1.055,1.838,4.146,3.056a33.757,33.757,0,0,1-.8,8.963,1.963,1.963,0,0,0,.327,1.734,2,2,0,0,0,1.605.8h4.6a1.978,1.978,0,0,0,1.434-.609,2.033,2.033,0,0,0,.565-1.478,51.524,51.524,0,0,0-1.064-8.036C57.867,53.95,58.878,54,60,54A1,1,0,0,0,61,53Zm-5.02,9-4.608.015a35.888,35.888,0,0,0,.9-8.865,23.808,23.808,0,0,0,2.557.506A50.855,50.855,0,0,1,55.98,62ZM48.289,49.01c4.389-5.216,6.662-5.449,7.64-5.1,2.171.77,2.885,5.49,3.038,8.081C51.986,51.815,49.219,49.917,48.289,49.01Z\"/></svg>\n        <Farming />\n        </div>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","\nconst pd = require('probability-distributions');\n\nexport interface CYOAOption {\n    description?: string;\n    title?: string;\n    action?: string;\n    image?: String;\n    cost: Cost;\n    destination: Room;\n    statuses: Array<StructureStatus>;\n}\n\nexport interface QuestStep {\n    options: Array<CYOAOption>;\n    active: boolean;\n}\n\nexport interface GreenFnParams {\n    linearP1: number;\n    quadraticP1: number;\n    twoPowerP1: number;\n}\n\nexport interface BlueFnParams {\n    normalP1: number;\n    normalP2: number;\n}\n\nexport interface RedFnParams  {\n    linearP1: number;\n}\n\n\nexport interface HPFnParams  {\n    linearP1: number;\n}\n\n\nexport interface Spell {\n    description: SpellList;\n    cooldown?: number;\n    available: boolean;\n}\n\n\nexport type GSResourceName = \"red\" | \"blue\" | \"green\" | \"hp\";\nexport type GameStatus = \"ready\" | \"started\" | \"victory\" | \"tgBossFight\" | \"thermiteBossFight\" | \"gameOver\" ;\nexport type StructureStatus = \"burnt\" | \"frozen\" | \"flourishing\";\n\n\nexport enum RoomList {\n    Desert = \"Desert\",\n    Volcano = \"Volcano\",\n    TempleRuins = \"Temple Ruins\",\n    TempleGuardian = \"Temple Guardian\",\n    Unknown = \"Unknown\",\n    Jungle = \"Jungle\",\n    Cave = \"Cave\",\n    Moon = \"Moon\",\n    Sandstorm = \"Sandstorm\",\n    Rabbit = \"Rabbit\",\n    Oasis = \"Oasis\",\n    Treasure = \"Treasure\",\n    Boulder = \"Boulder\",\n    TreeTops = \"Tree Tops\",\n    Monsters = \"Monsters\",\n    FungalColony = \"Fungal Colony\",\n    LavaFlow = \"Lava Flow\",\n    CrumblingBridge=\"Crumbling Bridge\",\n    TrappedInsect=\"Trapped Insect\",\n    Wastes=\"Wastes\",\n    Lost=\"Lost\",\n    IceChamber=\"Ice Chamber\",\n    MagmaWaterfall=\"Magma Waterfall\",\n    StatueRoom=\"Statue Room\",\n    GraniteRaft=\"Granite Raft\",\n    CageTrap=\"Cage Trap\",\n    VolcanoBoss=\"Volcano Boss\",\n    Altar=\"Altar\",\n    ObsidianHallway=\"Obsidian Hallway\",\n}\n\n\nexport enum SpellList {\n    Fireball = \"Fireball\",\n    FrostRay = \"Frost Ray\",\n    Heal = \"Heal\",\n    CommuneWithPlants = \"Commune with Plants\",\n    SpectralRope = \"Spectral Rope\"\n}\n\nexport type Cost = Record<GSResourceName, number>\nexport type ResourceBonus = Record<GSResourceName, number>\n\nexport const spells1 = {\n  Fireball: { description: SpellList.Fireball, cooldown: 20000, available: true, },\n  CommuneWithPlants: { description: SpellList.CommuneWithPlants, cooldown: 3000, available: true },\n  Heal:   { description: SpellList.Heal, cooldown: 5000, available: true},\n  FrostRay:   { description: SpellList.FrostRay, cooldown: 5000,  available: true, },\n  SpectralRope:  { description: SpellList.SpectralRope, cooldown: 5000, available: true, }\n}\n\nexport interface Room {\n    statuses: Array<StructureStatus>;\n    options: Array<CYOAOption>;\n    name: RoomList;\n  }\n\nexport function isCostSatisfiable(cost: Cost, resources: Record<GSResourceName, number>): boolean {\n    for (let c in cost) {\n        if (cost[c as keyof typeof cost] > resources[c as keyof typeof resources]) return false\n    }\n    return true\n}\n\nexport function removeResources(cost: Cost, resources: Record<GSResourceName, number>) {\n    for (let c in cost) {\n        resources[c as keyof typeof resources] -= cost[c as keyof typeof cost]\n    }\n    return resources\n}\n\nexport function addResources(cost: Cost, resources: Record<GSResourceName, number>) {\n    for (let c in cost) {\n        resources[c as keyof typeof resources] += cost[c as keyof typeof cost]\n    }\n    return resources\n}\n\nexport function combineGreenParams(a: GreenFnParams, b: GreenFnParams): GreenFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\nexport function combineRedParams(a: RedFnParams, b: RedFnParams): RedFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\nexport function combineBlueParams(a: BlueFnParams, b: BlueFnParams): BlueFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\n\n\nexport function greenFn(params: GreenFnParams) {\n    let total = 0.0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n    if (params.quadraticP1) {\n      total += (params.quadraticP1 * params.quadraticP1)\n    }\n    if (params.twoPowerP1) {\n      total += (Math.pow(2, params.twoPowerP1))\n    }\n    return total\n  }\n  \n  \n  export function redFn(params: RedFnParams) {\n    let total = 0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n  \n    return total\n  }\n  \n  \n  \n  \n  export function blueFn(params: BlueFnParams) {\n    let total = 0.0\n    if (params.normalP1 > 0 && params.normalP2 > 0) {\n      total += Math.max(0, pd.rnorm(1,params.normalP1, params.normalP2))\n    }\n  \n    return total\n  }\n  \n  \n  \n  export function hpFn(params: HPFnParams) {\n    let total = 0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n  \n    return total\n  }","import { Cost, ResourceBonus } from './Types'\nfunction shuffle<T>(a: Array<T>): Array<T> {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nexport let Item: [Cost, ResourceBonus]\n\nexport function initializeTier1(): Array<typeof Item> {\n    let itemsTier1: Array<ResourceBonus> = [\n        { green: 0, red: 0, blue: 1, hp: 0 },\n        { green: 0, red: 19, blue: 0, hp: 0 },\n        { green: 42, red: 0, blue: 0, hp: 0 },\n        { green: 66, red: 0, blue: 0, hp: 0 },\n        { green: 20, red: 20, blue: 0, hp: 0 },\n        { green: 7, red: 2, blue: 0, hp: 10 },\n    ]\n\n    let costsTier1: Array<Cost> = [\n        { green: 65, red: 0, blue: 0, hp: 0 },\n        { green: 87, red: 0, blue: 0, hp: 0 },\n        { green: 123, red: 0, blue: 0, hp: 0 },\n        { green: 198, red: 0, blue: 0, hp: 0 },\n        { green: 270, red: 0, blue: 0, hp: 0 },\n        { green: 1033, red: 0, blue: 0, hp: 0 },\n    ]\n\n    itemsTier1 = shuffle(itemsTier1)\n    let items: Array<typeof Item> = []\n    for (let i in costsTier1) {\n        items.push([costsTier1[i], itemsTier1[i]]);\n    }\n    return items\n}\n\nlet itemsTier2: Array<ResourceBonus> = [\n    { green: 0, red: 0, blue: 104, hp: 0 },\n    { green: 0, red: 290, blue: 0, hp: 0 },\n    { green: 4255, red: 0, blue: 0, hp: 0 },\n    { green: 660, red: 0, blue: 0, hp: 24 },\n    { green: 808, red: 935, blue: 0, hp: 0 },\n    { green: 7, red: 2, blue: 0, hp: 0 },\n]\n\n","import { QuestStep, combineRedParams, StructureStatus, Room, RoomList, SpellList } from './Types'\nimport { match, __, not, select, when } from 'ts-pattern';\nimport { GameState } from './gameStateSlice';\nimport {Draft } from '@reduxjs/toolkit';\n\n\n\n\nexport function jungleRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball && !state.room.statuses.includes('burnt')) {\n        state.room.statuses.push('burnt');\n        state.redFnParams = combineRedParams({ linearP1: 3 }, state.redFnParams)\n        state.combatLogMessages.unshift('You feed on the energy from the withering vines')\n    } else if (spell.description === SpellList.CommuneWithPlants && !state.room.statuses.includes('burnt')) {\n        state.combatLogMessages.unshift('Vines sway in sync and you hear a whisper \"Seek the golden slug\"')\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function caveRoomInteraction(state, spell) {\n    if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('Water freezes into a path to the far wall')\n    } else if (spell.description === SpellList.SpectralRope && state.room.statuses.includes('frozen')) {\n        state.combatLogMessages.unshift('You climb in to a narrow fissure, revealing a the Moon Door')\n        state.room.options.push(moonDoor);\n    } else if (spell.description === SpellList.CommuneWithPlants && !state.room.statuses.includes('burnt')) {\n        state.combatLogMessages.unshift('A phosphorescent mushroom breathes in and lets out a puff of spores in the shape of a bridge and rope')\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function desertRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball) {\n        state.combatLogMessages.unshift('Molten glass sinks in to the sand')\n    } else if (spell.description === SpellList.CommuneWithPlants ) {\n        state.combatLogMessages.unshift('Wails from the void echo in your head. You stumble and fall to your knees')\n        state.resources.hp -= 10;\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function treeTopsRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball) {\n        state.combatLogMessages.unshift('Leaves crackle and crumple but the trees stand strong')\n    } else if (spell.description === SpellList.CommuneWithPlants ) {\n        state.combatLogMessages.unshift('Trees lean slightly to the left')\n    } else if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('Branches shrink back, revealing the Rabbit Door')\n        state.room.options.push(rabbitDoor); \n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function rabbitRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball ) {\n        state.room.statuses.push('burnt');\n        state.combatLogMessages.unshift('Charred remains litter the floor. Rocks begin to fall from the ceiling')\n        state.resources.hp -= 10;\n        //Add hpFn params for faster reduction for the rest of the round\n    } else if (spell.description === SpellList.Heal ) {\n        state.combatLogMessages.unshift('The rabbit leaps around the room with great vigor. You feel energized just watching it.')\n        //TODO: More lore\n        //TODO: more, maybe better greenFnParams, \n    } else if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen') && !state.room.statuses.includes('burnt')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('You enrage the rabbit. It lunges at you, biting your index finger off, then bounces away')\n    } else if (spell.description === SpellList.SpectralRope) {\n        state.combatLogMessages.unshift('You lower a rope through a crack in the floor, giving you a better avenue to proceed')\n        state.room.options.push(ropeMonsterDoor)\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function monstersRoomInteraction(state, spell) {\n    \n}\n\nexport function boulderDodgeRoomInteraction(state, spell) {\n    state.combatLogMessages.unshift('No effect')\n}\n\n\nexport function desertDoorInteraction(state, spell) {\n    if (spell.type === 'Fireball') {\n        state.combatLogMessages.unshift('Flames dance across the sand haplessly');\n    } else {\n        state.combatLogMessages.unshift('No effect');\n    }\n}\nexport function monstersDoorInteraction(state: Draft<GameState>, spell) {\n    if (spell.description === SpellList.Fireball || spell.description === SpellList.FrostRay ) {\n        state.room.statuses.push('burnt');\n\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] / 2\n            }\n        })\n        state.combatLogMessages.unshift('You batter the monsters with your magic');\n\n    } else if ( spell.description === SpellList.FrostRay ) {\n        state.room.statuses.push('frozen');\n\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] / 2\n            }\n        })\n        state.combatLogMessages.unshift('You batter the monsters with your magic');\n\n    } else if (spell.description === 'Heal' ) {\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] * 2\n            }\n        })\n        state.combatLogMessages.unshift('Your magic empowers the monsters');\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function getRoomInteractions(room: RoomList) {\n    return match(room)\n    .with(RoomList.Jungle,() => jungleRoomInteraction)\n    .with(RoomList.Cave, () =>caveRoomInteraction)\n    .with(RoomList.Desert,() => desertRoomInteraction)\n    .with(RoomList.Boulder, () =>boulderDodgeRoomInteraction)\n    .with(RoomList.Monsters,() => monstersRoomInteraction)\n    .with(RoomList.TreeTops,() => treeTopsRoomInteraction)\n    .with(RoomList.Rabbit,() => rabbitRoomInteraction)\n    .with(RoomList.FungalColony,() => EmptyFn)\n    .with(RoomList.Treasure,() => EmptyFn)\n    .with(RoomList.Moon,() => EmptyFn)\n    .with(RoomList.Oasis,() => EmptyFn)\n    .with(RoomList.Volcano,() => EmptyFn)\n    .with(RoomList.Unknown,() => EmptyFn)\n    .with(RoomList.TempleRuins,() => EmptyFn)\n    .with(RoomList.TempleGuardian,() => EmptyFn)  \n    .with(RoomList.Sandstorm,() => EmptyFn)\n    .with(RoomList.LavaFlow ,() => EmptyFn)\n    .with(RoomList.CrumblingBridge,() => EmptyFn)\n    .with(RoomList.TrappedInsect,() => EmptyFn)\n    .with(RoomList.Wastes,() => EmptyFn)\n    .with(RoomList.Lost,() => EmptyFn)\n    .with(RoomList.IceChamber,() => EmptyFn)\n    .with(RoomList.MagmaWaterfall,() => EmptyFn)\n    .with(RoomList.StatueRoom,() => EmptyFn)\n    .with(RoomList.GraniteRaft,() => EmptyFn)\n    .with(RoomList.CageTrap,() => EmptyFn)\n    .with(RoomList.VolcanoBoss,() => EmptyFn)\n    .with(RoomList.Altar,() => EmptyFn)\n    .with(RoomList.ObsidianHallway,() => EmptyFn)\n    .exhaustive()\n}\n\nexport function getDoorInteractions(room: RoomList){\n    return match(room)\n    .with(RoomList.Jungle,() => EmptyFn)\n    .with(RoomList.Cave,() => EmptyFn)\n    .with(RoomList.Desert,() => EmptyFn)\n    .with(RoomList.Boulder,() => monstersDoorInteraction)\n    .with(RoomList.Monsters,() => EmptyFn)\n    .with(RoomList.TreeTops,() => EmptyFn)\n    .with(RoomList.Rabbit,() => EmptyFn)\n    .with(RoomList.FungalColony, () =>EmptyFn)\n    .with(RoomList.Treasure, () =>EmptyFn)\n    .with(RoomList.Moon,() => EmptyFn)\n    .with(RoomList.Oasis,() => EmptyFn)\n    .with(RoomList.Volcano,() => EmptyFn)\n    .with(RoomList.Unknown,() => EmptyFn)\n    .with(RoomList.TempleRuins,() => EmptyFn)\n    .with(RoomList.TempleGuardian,() => EmptyFn)\n    .with(RoomList.Sandstorm,() => EmptyFn)\n    .with(RoomList.LavaFlow ,() => EmptyFn)\n    .with(RoomList.CrumblingBridge,() => EmptyFn)\n    .with(RoomList.TrappedInsect,() => EmptyFn)\n    .with(RoomList.Wastes,() => EmptyFn)\n    .with(RoomList.Lost,() => EmptyFn)\n    .with(RoomList.IceChamber,() => EmptyFn)\n    .with(RoomList.MagmaWaterfall,() => EmptyFn)\n    .with(RoomList.StatueRoom,() => EmptyFn)\n    .with(RoomList.GraniteRaft,() => EmptyFn)\n    .with(RoomList.CageTrap,() => EmptyFn)\n    .with(RoomList.VolcanoBoss,() => EmptyFn)\n    .with(RoomList.Altar,() => EmptyFn)\n    .with(RoomList.ObsidianHallway,() => EmptyFn)\n    .exhaustive()\n}\n\nfunction EmptyFn(state, spell) {\n    \n}\n\nexport let FakeRoom: Room = {\n    name: RoomList.Cave,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let treasureRoom: Room = {\n    name: RoomList.Treasure,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let volcanoBossFightRoom: Room = {\n    name: RoomList.VolcanoBoss,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.VolcanoBoss, action: \"Challenge the Volcano Boss\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let cageTrapRoom: Room = {\n    name: RoomList.CageTrap,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.VolcanoBoss, action: \"Challenge the Volcano Boss\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: volcanoBossFightRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let graniteRaftRoom: Room = {\n    name: RoomList.GraniteRaft,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.CageTrap, action: \"Drift aimlessly\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: cageTrapRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let trappedInsectRoom: Room = {\n    name: RoomList.TrappedInsect,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.GraniteRaft, action: \"Ride the granite raft\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: graniteRaftRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let altarRoom: Room = {\n    name: RoomList.TrappedInsect,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TrappedInsect, action: \"Move ahead into the darkness\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: trappedInsectRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let obsidianHallway: Room = {\n    name: RoomList.ObsidianHallway,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Altar, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: altarRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let lavaFlowRoom: Room = {\n    name: RoomList.LavaFlow,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.ObsidianHallway, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: obsidianHallway, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Altar, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: altarRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let crumblingBridge: Room = {\n    name: RoomList.CrumblingBridge,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.LavaFlow, action: \"Leap from stone to stone\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lavaFlowRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let lost: Room = {\n    name: RoomList.CrumblingBridge,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Cave, action: \"Journey On\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let wastes: Room = {\n    name: RoomList.Wastes,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Lost, action: \"Navigate the wastes\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lost, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let templeGuardianRoom: Room = {\n    name: RoomList.TempleGuardian,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n        { title: RoomList.Cave, action: \"Challenge the Temple Guardian\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let oasisRoom: Room = {\n    name: RoomList.Oasis,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TempleGuardian, action: \"Challenge the Temple Guardian\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: templeGuardianRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let unknownRoom: Room = {\n    name: RoomList.Unknown,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n\n    ]\n}\n\nexport let volcanoRoom: Room = {\n    name: RoomList.Volcano,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.LavaFlow, action: \"Brave the fiery rocks\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lavaFlowRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Unknown, action: \"Plunge in to the unknown\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: unknownRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let boulderRoom: Room = {\n    name: RoomList.Boulder,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Oasis, action: \"Dive left into the web-covered pit\", cost: { green: 3200, red: 0, blue: 0, hp: 0 }, destination: oasisRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Volcano, action: \"Crawl over the wall\", cost: { green: 48000, red: 0, blue: 0, hp: 0 }, destination: volcanoRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let monstersRoom: Room = {\n    name: RoomList.Monsters,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Boulder, action: \"Tumble away from the ferocious monsters\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: boulderRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let rabbitRoom: Room = {\n    name: RoomList.Rabbit,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Monsters, action: \"Slide down tunnel\", cost: { green: 900, red: 1200, blue: 100, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nlet ropeMonsterDoor = { title: RoomList.Monsters, action: \"Rappel down behind the monster\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() }\n\nexport let treeTopsRoom: Room = {\n    name: RoomList.TreeTops,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Monsters, action: \"Leap into the musty cove\", cost: { green: 75330, red: 0, blue: 0, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\n\nexport let templeRuinsRoom: Room = {\n    name: RoomList.TempleRuins,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TempleGuardian, action: \"Face the Temple Guardian\", cost: { green: 37500, red: 1200, blue: 50, hp: 0 }, destination: templeGuardianRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let jungleRoom: Room = {\n    name: RoomList.Jungle,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TreeTops, action: \"Shimmy into the Tree Tops\", cost: { green: 2134, red: 0, blue: 0, hp: 0 }, destination: treeTopsRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.TempleRuins, action: \"Venture towards the Temple Ruins\", cost: { green: 4444, red: 0, blue: 0, hp: 0 }, destination: templeRuinsRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let sandstormRoom: Room = {\n    name: RoomList.Sandstorm,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let desertRoom: Room = {\n    name: RoomList.Desert,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Volcano, action: \"Ascend the cliff face\", cost: { green: 0, red: 10000, blue: 0, hp: 0 }, destination: volcanoRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Wastes, action: \"Shy away from the blazing mountain\", cost: { green: 0, red: 10000, blue: 0, hp: 0 }, destination: wastes, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let moonRoom: Room = {\n    name: RoomList.Moon,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let fungalColonyRoom: Room = {\n    name: RoomList.FungalColony,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Moon, action: \"Gaze deeply at the moon above\", cost: { green: 0, red: 0, blue: 100000, hp: 0 }, destination: moonRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nlet moonDoor = { title: RoomList.FungalColony, action: \"Venture behind the veil\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: fungalColonyRoom, statuses: new Array<StructureStatus>() }\nlet rabbitDoor = { title: RoomList.Rabbit, action: \"Hurdle over the frozen brambles\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: rabbitRoom, statuses: new Array<StructureStatus>() }\n\n\nexport let caveRoom: Room = {\n    name: RoomList.Cave,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Jungle, action: \"Swing from the vines\", cost: { green: 340, red: 0, blue: 0, hp: 0 }, destination: jungleRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Desert, action: \"Brave the wastes\", cost: { green: 970, red: 800, blue: 290, hp: 0 }, destination: desertRoom, statuses: new Array<StructureStatus>() }\n    ]\n}\n\n\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface ThermiteState {\n  grid: Array<Array<number>>;\n  status: 'idle' | 'starting' | 'started' | 'finished';\n  bossHP: number;\n  enabled: boolean;\n}\n\nconst initialState: ThermiteState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(),\n  status: 'idle',\n  bossHP: 100,\n  enabled: false\n};\n\nfunction initializeGrid(){\n  let n = 4\n  let randomGrid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => Math.round(Math.random())))\n  return randomGrid\n}\n\n\nexport const thermiteSlice = createSlice({\n  name: 'thermite',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n\n      //state.value += 1;\n    },\n    triggerThermite: (state, action) => {\n      let coords = action.payload;\n      console.log(coords)\n      //let coords = [0,2]\n      state.grid[coords[0]][coords[1]]  = state.grid[coords[0]][coords[1]] === 1 ? 2 : 3\n      //state.value += 1;\n    },\n    startGrid: (state) => {\n      console.log('yes')\n      state.status = 'starting'\n      state.grid = initializeGrid()\n    },\n    enableButtons: (state) => {\n      console.log('yes')\n      state.status = 'started'\n    },\n    winThermiteBossFight: (state) => {\n\n    },\n\n    calculateDamage: (state) => {\n      state.bossHP -=  ((state.grid.flatMap(i => i).filter(i => i === 2).length * 4) - (state.grid.flatMap(i => i).filter(i => i === 3).length * 2))\n\n      state.status = 'finished'\n    },\n\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      //state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment,incrementByAmount, startGrid, triggerThermite, enableButtons, calculateDamage, winThermiteBossFight } = thermiteSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectGrid = (state: RootState) => state.thermite.grid;\nexport const selectStatus = (state: RootState) => state.thermite.status;\nexport const selectBossHP = (state: RootState) => state.thermite.bossHP;\n\n\nexport default thermiteSlice.reducer;\n","import { types } from '@babel/core';\nimport { createAsyncThunk, createSlice, PayloadAction, current, Draft } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport {\n  Spell,\n  Cost,\n  GreenFnParams,\n  BlueFnParams,\n  RedFnParams,\n  redFn,\n  blueFn,\n  greenFn,\n  hpFn,\n  Room,\n  GSResourceName,\n  HPFnParams,\n  GameStatus,\n  combineRedParams,\n  combineBlueParams,\n  combineGreenParams,\n  addResources,\n  removeResources,\n  isCostSatisfiable,\n  spells1,\n  RoomList,\n  SpellList\n} from './Types'\nimport { initializeTier1, Item, } from './Items'\nimport { caveRoom, getRoomInteractions, getDoorInteractions } from './Quest'\nimport {\n  winThermiteBossFight,\n} from '../thermite_bossfight/thermiteSlice';\n\n\nlet GreenUpgrade: [Cost, boolean, boolean, GreenFnParams, Spell[]]\nlet BlueUpgrade: [Cost, boolean, number, BlueFnParams, Spell[]]\nlet RedUpgrade: [Cost, boolean, boolean, RedFnParams, Spell[]]\n\n\nexport type SlimeBossStatus = \"burnable\" | \"burnt\" | \"freezable\" | \"frozen\" | \"normal\" | \"attacking\" | \"inactive\";\nconst SlimeBossStatuses: Array<SlimeBossStatus> = [\"burnable\", \"freezable\", \"normal\", \"normal\", \"attacking\", \"inactive\", \"inactive\"]\nexport const SlimeBossStatusColors = {\n  \"burnable\": \"#ff0000\",\n  \"burnt\": \"#860f11\",\n  \"freezable\": \"#00e4ff\",\n  \"frozen\": \"#00a6b9\",\n  \"normal\": \"#d2d2d2\",\n  \"attacking\": \"#000000\",\n  \"inactive\": \"#f3b179\",\n}\n\n\nexport interface Achievement {\n  name: String;\n  requirement: number;\n  description?: String;\n}\n\nexport interface SlimeBoss {\n  bossHp: number;\n  status: SlimeBossStatus;\n}\n\n\n\nexport interface GameState {\n  resources: Record<GSResourceName, number>;\n  boss: SlimeBoss;\n\n  gameLoopInterval: number;\n  availableSpells: Array<Spell>;\n  room: Room;\n  items: Array<typeof Item>;\n  redFnParams: RedFnParams;\n  greenFnParams: GreenFnParams;\n  blueFnParams: BlueFnParams;\n  hpFnParams: HPFnParams;\n  status: GameStatus;\n  combatLogMessages: Array<String>;\n  greenUpgrades: Array<typeof GreenUpgrade>;\n  redUpgrades: Array<typeof RedUpgrade>;\n  blueUpgrades: Array<typeof BlueUpgrade>;\n  blueDist: Array<number>;\n  bluePast: Array<number>;\n  greenDist: Array<number>;\n  redDist: Array<number>;\n}\n\nconst initialState: GameState = {\n  resources: {\n    red: 1000000, // 0\n    green: 10000000, // 20\n    blue: 100000003, //3\n    hp: 100\n  },\n  boss: {\n    bossHp: 100,\n    status: 'normal'\n  },\n  room: caveRoom,\n  gameLoopInterval: 0,\n  availableSpells: [],//Object.values(spells1),\n  items: initializeTier1(),\n  redFnParams: { linearP1: 1 },\n  greenFnParams: { linearP1: 2, quadraticP1: 0, twoPowerP1: 0 },\n  blueFnParams: { normalP1: 0, normalP2: 0 },\n  hpFnParams: { linearP1: 0.1 },\n  blueDist: [0, 0, 0, 0],\n  bluePast: [...Array(40).keys()].map(i => 0),\n  greenDist: [...Array(40).keys()].map(i => 0),\n  redDist: [...Array(40).keys()].map(i => 0),\n  status: \"ready\",\n  combatLogMessages: [],\n  greenUpgrades: [\n    [{ green: 13, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 0, twoPowerP1: 0 }, []],\n    [{ green: 29, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 0, twoPowerP1: 0 }, [spells1.CommuneWithPlants]],\n    [{ green: 105, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 4, quadraticP1: 0, twoPowerP1: 0 }, []],\n    [{ green: 82, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 0 }, [spells1.SpectralRope]],\n    [{ green: 379, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0, quadraticP1: 3, twoPowerP1: 0 }, []],\n    [{ green: 1800, red: 0, blue: 7, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 10 }, []],\n    [{ green: 300000, red: 100, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 2 }, [spells1.Heal]],\n    [{ green: 1000000000, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 10 }, []],\n\n  ],\n  redUpgrades: [\n    [{ green: 13, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3 }, [spells1.Fireball]],\n    [{ green: 37, red: 0, blue: 1, hp: 0 }, false, false, { linearP1: 0.3 }, []],\n    [{ green: 105, red: 0, blue: 3, hp: 0 }, false, false, { linearP1: 4 }, []],\n    [{ green: 10, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3 }, []],\n    [{ green: 7000, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 8 }, []],\n    [{ green: 61589, red: 0, blue: 55, hp: 0 }, false, false, { linearP1: 22 }, []],\n\n  ],\n  blueUpgrades: [\n    [{ green: 9, red: 45, blue: 0, hp: 0 }, false, 0, { normalP1: 0.0002, normalP2: 0.0001 }, []],\n    [{ green: 499, red: 0, blue: 2, hp: 0 }, false, 0, { normalP1: 0, normalP2: 0.5 }, [spells1.FrostRay]],\n    [{ green: 0, red: 389, blue: 21, hp: 0 }, false, 0, { normalP1: 2, normalP2: 0 }, []],\n    [{ green: 0, red: 0, blue: 131, hp: 0 }, false, 0, { normalP1: 0, normalP2: 10 }, []],\n    [{ green: 0, red: 0, blue: 305, hp: 0 }, false, 0, { normalP1: 1, normalP2: 10 }, []],\n  ]\n\n\n};\n\n\nconst initialStateCopy = Object.assign({}, initialState)\n\nexport const gameStateSlice = createSlice({\n  name: 'gameState',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    startLoop: (state) => {\n      state.status = 'started';\n    },\n    resetState: (state) => {\n      clearInterval(state.gameLoopInterval);\n      Object.assign(state, initialStateCopy);\n    },\n    incrementRed: (state) => {\n      state.resources.red += redFn(state.redFnParams);\n      state.redDist.push(redFn(state.redFnParams));\n      state.redDist.shift();\n    },\n    castSpell: (state, payload) => {\n      if (payload) {\n        let spell = state.availableSpells.find(x => x.description === payload.payload.description)\n        if (spell) {\n          spell.available = false\n          handleSpell(state, spell)\n        }\n      }\n    },\n    resetSpell: (state, payload) => {\n      if (payload) {\n        let spell = state.availableSpells.find(x => x.description === payload.payload.description)\n        if (spell) {\n          spell.available = true\n        }\n      }\n    },\n    incrementBlue: (state) => {\n      state.resources.blue += blueFn(state.blueFnParams);\n      state.blueDist = [...Array(1000).keys()].map(i => Math.round(blueFn(state.blueFnParams)))\n      state.bluePast.push(state.resources.blue);\n      state.bluePast.shift();\n    },\n    incrementGreen: (state) => {\n      state.resources.green += greenFn(state.greenFnParams);\n      state.greenDist.push(state.resources.green);\n      state.greenDist.shift();\n    },\n    incrementHP: (state) => {\n      state.resources.hp -= hpFn(state.hpFnParams);\n      if (state.resources.hp <= 0) {\n        state.status = \"gameOver\"\n      }\n    },\n\n    attackBoss: (state, action) => {\n      if (action.payload.description === SpellList.Fireball && state.boss.status === 'burnable') {\n        state.boss.status = 'burnt'\n        state.boss.bossHp -= 30\n      } else if (action.payload.description === SpellList.Fireball && state.boss.status === 'normal') {\n        state.boss.bossHp -= 20\n      } else if (action.payload.description === SpellList.FrostRay && state.boss.status === 'freezable') {\n        state.boss.status = 'frozen'\n        state.boss.bossHp -= 30\n      } else if (action.payload.description === SpellList.FrostRay && state.boss.status === 'normal') {\n        state.boss.bossHp -= 20\n      } else if (action.payload.description === 'Gem Attack' && state.boss.status === 'normal') {\n        state.boss.status = 'inactive'\n        state.boss.bossHp -= 10\n      } else if (action.payload.description === 'Gem Attack' && state.availableSpells.find(x => x.description === SpellList.SpectralRope && !x.available) && state.boss.status === 'normal') {\n        state.boss.status = 'inactive'\n        state.boss.bossHp -= 15\n      }\n      if (state.boss.bossHp <= 0) {\n        state.status = 'victory'\n      }\n    },\n    startTempleGuardianBossFight: (state) => {\n      state.status = 'tgBossFight'\n      clearInterval(state.gameLoopInterval)\n      state.gameLoopInterval = NaN\n    },\n    startThermiteBossFight: (state) => {\n      state.status = 'thermiteBossFight'\n      clearInterval(state.gameLoopInterval)\n      state.gameLoopInterval = NaN\n    },\n    bossAttack: (state) => {\n      if (state.availableSpells.find(x => x.description === SpellList.SpectralRope && !x.available) || state.boss.status === 'frozen' || state.boss.status === 'burnt') {\n        state.resources.hp -= 3\n      } else {\n        state.resources.hp -= 5\n      }\n      state.boss.status = SlimeBossStatuses[Math.round(Math.random() * SlimeBossStatuses.length)]\n      if (state.resources.hp <= 0) {\n        state.status = 'gameOver'\n      }\n\n    },\n    incrementBossHP: (state) => {\n      state.boss.bossHp -= (4 * Math.random())\n      if (state.boss.bossHp <= 0) {\n        state.status = \"victory\"\n      }\n    },\n    boulderKill: (state) => {\n      if (state.room.name === RoomList.Boulder) {\n        state.status = \"gameOver\"\n      }\n    },\n\n    setGameLoopIntervals: (state, action) => {\n      state.gameLoopInterval = action.payload\n    },\n    clearGameLoopIntervals: (state) => {\n      clearInterval(state.gameLoopInterval);\n      state.gameLoopInterval = 0;\n    },\n    addCombatLogMessages: (state, action) => {\n      console.log('unshift');\n      state.combatLogMessages.unshift(action.payload)\n    },\n    clearCombatLogMessages: (state) => {\n      state.combatLogMessages = []\n    },\n    buyItem: (state, action) => {\n      if (action.payload.item) {\n        let item = state.items[0]\n        let currentItem = current(item)\n        if (!item || !currentItem || action.payload.item !== currentItem) {\n          return\n        }\n        if (!isCostSatisfiable(currentItem[0], state.resources)) {\n          return\n        }\n        state.resources = removeResources(currentItem[0], state.resources)\n        state.resources = addResources(currentItem[1], state.resources)\n        state.items.shift()\n      }\n    },\n    stepQuest: (state, action) => {\n      let step = state.room.options\n      let currentStep = current(step)\n      if (!step || !currentStep) {\n        return\n      }\n\n      let currentChoice = currentStep.find(x => x === action.payload.choice)\n      if (!currentChoice) {\n        return\n      }\n      if (!isCostSatisfiable(currentChoice.cost, state.resources)) {\n        return\n      }\n      state.resources = removeResources(currentChoice.cost, state.resources)\n      if (currentChoice.destination.options.length == 0) {\n        state.status = 'victory'\n      }\n\n      state.room = currentChoice.destination\n\n\n    },\n    upgrade: (state, action) => {\n      if (action.payload.green) {\n        let upgrade = state.greenUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.green !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] = true\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.greenFnParams = combineGreenParams(state.greenFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n      if (action.payload.red) {\n        let upgrade = state.redUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.red !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] = true\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.redFnParams = combineRedParams(state.redFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n      if (action.payload.blue) {\n        let upgrade = state.blueUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.blue !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] += 1\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.blueFnParams = combineBlueParams(state.blueFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n    },\n\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(winThermiteBossFight, (state) => {\n        state.status = 'victory'\n      })\n    }\n  \n\n});\n\nfunction handleSpell(state: Draft<GameState>, spell: Spell) {\n  let interaction = getRoomInteractions(state.room.name)\n  let result = interaction(state, spell)\n\n  let doorResults = state.room.options.map(x => getDoorInteractions(x.destination.name)(state, spell))\n}\n\nexport const { incrementRed, incrementBossHP, resetState, startTempleGuardianBossFight, startThermiteBossFight, startLoop, boulderKill, attackBoss, bossAttack, addCombatLogMessages, clearCombatLogMessages, incrementGreen, incrementBlue, setGameLoopIntervals, clearGameLoopIntervals, incrementHP, castSpell, resetSpell, buyItem, stepQuest, upgrade } = gameStateSlice.actions;\n\n\nexport const selectRed = (state: RootState) => state.gameState.resources.red;\nexport const selectBlue = (state: RootState) => state.gameState.resources.blue;\nexport const selectGreen = (state: RootState) => state.gameState.resources.green;\nexport const selectHP = (state: RootState) => state.gameState.resources.hp;\nexport const selectBossHP = (state: RootState) => state.gameState.boss.bossHp;\nexport const selectBossStatus = (state: RootState) => state.gameState.boss.status;\nexport const selectCombatLogMessages = (state: RootState) => state.gameState.combatLogMessages;\nexport const selectGreenFnP1 = (state: RootState) => state.gameState.greenFnParams.linearP1;\nexport const selectRoomName = (state: RootState) => state.gameState.room.name;\n\nexport const selectNextDoors = (state: RootState) => state.gameState.room.options || [];\nexport const selectGameLoopInterval = (state: RootState) => state.gameState.gameLoopInterval;\n\nexport const selectSpells = (state: RootState) => state.gameState.availableSpells;\nexport const selectGameStatus = (state: RootState) => state.gameState.status;\nexport const selectBlueDist = (state: RootState) => state.gameState.blueDist;\nexport const selectBluePast = (state: RootState) => state.gameState.bluePast;\nexport const selectGreenDist = (state: RootState) => state.gameState.greenDist;\nexport const selectRedDist = (state: RootState) => state.gameState.redDist;\nexport const selectGreenUpgradeCost = (state: RootState) => state.gameState.greenUpgrades.find(x => !x[1]);\nexport const selectRedUpgradeCost = (state: RootState) => state.gameState.redUpgrades.find(x => !x[1]);\nexport const selectBlueUpgradeCost = (state: RootState) => state.gameState.blueUpgrades.find(x => !x[1]);\nexport const selectItemCost = (state: RootState) => state.gameState.items[0];\n\n\nexport default gameStateSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux'\n\nimport counterReducer from '../features/counter/counterSlice';\nimport gameStateReducer from '../features/gameState/gameStateSlice';\nimport thermiteReducer from '../features/thermite_bossfight/thermiteSlice';\nimport farmingReducer from '../features/farming_minigame/farmingSlice';\n\n\nconst persistedState = localStorage.getItem('reduxState') \n                       ? JSON.parse(localStorage.getItem('reduxState') || '{}')\n                       : {}\nif(persistedState && persistedState.gameState && persistedState.gameState.status && persistedState.gameState.status === 'started'){\n   persistedState.gameState.status = 'ready'\n}\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    gameState: gameStateReducer,\n    thermite: thermiteReducer,\n    farming: farmingReducer\n  },\n  preloadedState: persistedState\n},);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}