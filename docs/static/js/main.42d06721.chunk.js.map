{"version":3,"sources":["features/farming_minigame/Farming.module.css","app/hooks.ts","features/farming_minigame/farmingSlice.ts","features/farming_minigame/Farming.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/gameState/Types.ts","features/gameState/Items.ts","features/gameState/Quest.ts","features/thermite_bossfight/thermiteSlice.ts","features/gameState/gameStateSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppSelector","useSelector","initialState","grid","initializeGrid","status","score","maxScore","enabled","Array","keys","map","i","j","min","max","Math","ceil","floor","random","calculateScore","baseScores","4","5","6","length","base","activateGridCoords","coords","farmingSlice","createSlice","name","reducers","increment","state","activateCell","action","payload","console","log","flatMap","x","filter","bruteForceSolution","coordChoices","1","2","3","7","8","9","gridCopy1","deactivateGrid","JSON","parse","stringify","current","curr","scores","k","gridCopy","coords1","push","maxCoord","bruteForce","y","startGrid","enableButtons","actions","selectGrid","farming","selectStatus","selectScore","selectMaxScore","Farming","dispatch","useDispatch","getButtonStyle","cellValue","enabledButtons","styles","button","optimal","greenInactive","blueInactive","redInactive","greenActive","blueActive","redActive","runLoop","setTimeout","style","className","row","color","onClick","cell","disabled","getBoard","App","id","options","fullScreen","enable","zIndex","background","value","opacity","fpsLimit","interactivity","detectsOn","modes","bubble","distance","duration","size","particles","collisions","move","direction","outMode","speed","straight","number","density","value_area","shape","type","rotate","animation","opacityRate","sizeRate","detectRetina","backgroundColor","xmlns","height","width","fill","viewBox","d","fetchCount","amount","Promise","resolve","data","RoomList","SpellList","incrementAsync","createAsyncThunk","a","response","counterSlice","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","pd","require","spells1","Fireball","description","cooldown","available","CommuneWithPlants","Heal","FrostRay","SpectralRope","isCostSatisfiable","cost","resources","c","removeResources","combineRedParams","b","redFn","params","total","linearP1","blueFn","normalP1","normalP2","rnorm","jungleRoomInteraction","spell","room","statuses","includes","combatLogMessages","unshift","redFnParams","caveRoomInteraction","moonDoor","desertRoomInteraction","hp","treeTopsRoomInteraction","rabbitDoor","rabbitRoomInteraction","ropeMonsterDoor","monstersRoomInteraction","boulderDodgeRoomInteraction","monstersDoorInteraction","o","EmptyFn","FakeRoom","Cave","volcanoBossFightRoom","Treasure","VolcanoBoss","title","green","red","blue","destination","cageTrapRoom","CageTrap","graniteRaftRoom","GraniteRaft","trappedInsectRoom","TrappedInsect","altarRoom","obsidianHallway","ObsidianHallway","Altar","lavaFlowRoom","LavaFlow","lost","CrumblingBridge","wastes","Wastes","Lost","templeGuardianRoom","TempleGuardian","oasisRoom","Oasis","unknownRoom","Unknown","volcanoRoom","Volcano","boulderRoom","Boulder","monstersRoom","Monsters","rabbitRoom","Rabbit","treeTopsRoom","TreeTops","templeRuinsRoom","TempleRuins","jungleRoom","Jungle","desertRoom","Sandstorm","Desert","moonRoom","Moon","fungalColonyRoom","FungalColony","caveRoom","bossHP","round","thermiteSlice","triggerThermite","winThermiteBossFight","calculateDamage","SlimeBossStatuses","boss","bossHp","gameLoopInterval","availableSpells","items","itemsTier1","costsTier1","shuffle","initializeTier1","greenFnParams","quadraticP1","twoPowerP1","blueFnParams","hpFnParams","blueDist","bluePast","greenDist","redDist","greenUpgrades","redUpgrades","blueUpgrades","initialStateCopy","Object","assign","gameStateSlice","startLoop","resetState","clearInterval","incrementRed","shift","castSpell","find","match","with","IceChamber","MagmaWaterfall","StatueRoom","exhaustive","getDoorInteractions","handleSpell","resetSpell","incrementBlue","incrementGreen","pow","greenFn","incrementHP","hpFn","attackBoss","startTempleGuardianBossFight","NaN","startThermiteBossFight","bossAttack","incrementBossHP","boulderKill","setGameLoopIntervals","clearGameLoopIntervals","addCombatLogMessages","clearCombatLogMessages","buyItem","item","currentItem","addResources","stepQuest","step","currentStep","currentChoice","choice","upgrade","currentUpgrade","concat","combineGreenParams","combineBlueParams","persistedState","localStorage","getItem","gameState","store","configureStore","reducer","counter","counterReducer","gameStateReducer","thermite","thermiteReducer","farmingReducer","preloadedState","subscribe","setItem","getState","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,mDAAmD,eAAiB,gCAAgC,cAAgB,+BAA+B,aAAe,8BAA8B,YAAc,6BAA6B,YAAc,6BAA6B,WAAa,4BAA4B,UAAY,2BAA2B,QAAU,2B,kaCIjgBC,EAAkDC,I,wBCOzDC,EAA6B,CAEjCC,KAAMC,IACNC,OAAQ,OACRC,MAAO,EACPC,SAAU,GACVC,SAAS,GASX,SAASJ,IAGP,OADiB,YAAIK,MADb,GACsBC,QAAQC,KAAI,SAAAC,GAAC,OAAI,YAAIH,MAD3C,GACoDC,QAAQC,KAAI,SAAAE,GAAC,OAR5CC,EAQsE,EARjEC,EAQmE,EAPrGD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,GAAKA,GAHtD,IAA+BA,EAAKC,QAiEpC,SAASK,EAAejB,GAKtB,IAJA,IAAIG,EAAQ,EACRe,EAAa,CAACC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAGzBZ,EAAI,EAAGA,EAAIT,EAAKsB,OAAQb,IAC9B,IAAI,IAAIC,EAAI,EAAGA,EAAIV,EAAK,GAAGsB,OAAQZ,IAAI,CACrC,IAAIa,EAAOL,EAAWlB,EAAKS,GAAGC,KAAO,EACzB,IAATa,KAGCd,EAAI,GAAK,GAAwB,IAAnBT,EAAKS,EAAI,GAAGC,IAAcD,EAAI,EAAIT,EAAKsB,QAA6B,IAAnBtB,EAAKS,EAAI,GAAGC,MAC7Ea,GAAc,IAEZd,EAAI,GAAK,GAAKC,EAAI,GAAK,GAA2B,IAAtBV,EAAKS,EAAI,GAAGC,EAAG,IAC3CD,EAAI,GAAK,GAAKC,EAAI,GAAKV,EAAK,GAAGsB,QAAiC,IAAvBtB,EAAKS,EAAI,GAAGC,EAAI,IACzDD,EAAI,EAAIT,EAAKsB,QAAUZ,EAAI,GAAK,GAA4B,IAAvBV,EAAKS,EAAI,GAAGC,EAAI,IACrDD,EAAI,EAAIT,EAAKsB,QAAUZ,EAAI,EAAIV,EAAK,GAAGsB,QAAiC,IAAvBtB,EAAKS,EAAI,GAAGC,EAAI,MACnEa,GAAc,IAEZb,EAAI,GAAK,GAAwB,IAAnBV,EAAKS,GAAGC,EAAI,IAAcA,EAAI,EAAIV,EAAK,GAAGsB,QAA6B,IAAnBtB,EAAKS,GAAGC,EAAI,MAChFa,EAAO,GAETpB,GAAgBoB,GAIpB,OAAOpB,EAGT,SAASqB,EAAmBxB,EAAMyB,GAChC,OAAOzB,EAAKyB,EAAO,IAAIA,EAAO,KAC5B,KAAK,EAAGzB,EAAKyB,EAAO,IAAIA,EAAO,IAAM,EAAG,MACxC,KAAK,EAAGzB,EAAKyB,EAAO,IAAIA,EAAO,IAAM,EAAG,MACxC,KAAK,EAAGzB,EAAKyB,EAAO,IAAIA,EAAO,IAAM,EAAG,MACxC,KAAK,EAAGzB,EAAKyB,EAAO,IAAIA,EAAO,IAAM,EAAG,MACxC,KAAK,EAAGzB,EAAKyB,EAAO,IAAIA,EAAO,IAAM,EAAG,MACxC,KAAK,EAAGzB,EAAKyB,EAAO,IAAIA,EAAO,IAAM,EAEvC,OAAOzB,EAkBF,IAAM0B,EAAeC,YAAY,CACtCC,KAAM,UACN7B,eAEA8B,SAAU,CACRC,UAAW,SAACC,KAIZC,aAAc,SAACD,EAAOE,GACpB,IAAIR,EAASQ,EAAOC,QAKpB,GAJAC,QAAQC,IAAIX,GAEZM,EAAM/B,KAAOwB,EAAmBO,EAAM/B,KAAMyB,GAC5CU,QAAQC,IAAI,QAC0D,IAAnEL,EAAM/B,KAAKqC,SAAQ,SAAAC,GAAC,OAAIA,KAAGC,QAAO,SAAAD,GAAC,OAAIA,GAAK,GAAKA,GAAI,KAAGhB,OAAa,CACtES,EAAM7B,OAAS,WACf6B,EAAM5B,MAAQc,EAAec,EAAM/B,MACnC,IAAIwC,EA1GZ,SAAoBxC,GAKlB,IAJA,IAAIyC,EAAe,CAACC,EAAG,CAAC,EAAE,GAAIC,EAAG,CAAC,EAAE,GAAIC,EAAG,CAAC,EAAE,GAAIzB,EAAG,CAAC,EAAE,GAAIC,EAAE,CAAC,EAAE,GAAIC,EAAE,CAAC,EAAE,GAAIwB,EAAE,CAAC,EAAE,GAAGC,EAAE,CAAC,EAAE,GAAIC,EAAE,CAAC,EAAE,IAChGC,EAuEN,SAAwBhD,GACtB,IAAI,IAAIS,EAAI,EAAGA,EAAIT,EAAKsB,OAAQb,IAC9B,IAAI,IAAIC,EAAI,EAAGA,EAAIV,EAAK,GAAGsB,OAAQZ,IACjC,OAAOV,EAAKS,GAAGC,IACb,KAAK,EAAGV,EAAKS,GAAGC,GAAK,EAAG,MACxB,KAAK,EAAGV,EAAKS,GAAGC,GAAK,EAAG,MACxB,KAAK,EAAGV,EAAKS,GAAGC,GAAK,EAM3B,OAAOV,EAnFSiD,CAAeC,KAAKC,MAAMD,KAAKE,UAAUC,YAAQrD,MAC7DsD,EAAkC,GAClCC,EAAS,CAAC,GACN9C,EAAI,EAAGA,GAAK,EAAGA,IACrB,IAAI,IAAIC,EAAID,EAAE,EAAGC,GAAK,EAAGA,IACvB,IAAI,IAAI8C,EAAI9C,EAAE,EAAG8C,GAAK,EAAGA,IAAI,CAC3B,IAAIC,EAAUP,KAAKC,MAAMD,KAAKE,UAAUJ,IACxCxB,EAAmBiC,EAAUhB,EAAahC,IAC1Ce,EAAmBiC,EAAUhB,EAAa/B,IAC1Cc,EAAmBiC,EAAUhB,EAAae,IAC1C,IAAIrD,EAAQc,EAAewC,GACvBC,EAAU,CAACjB,EAAahC,GAAIgC,EAAa/B,GAAI+B,EAAae,IAC9DF,EAAKK,KAAK,CAAClC,OAAOiC,EAAStD,SAASD,IACpCoD,EAAOI,KAAKxD,GAMlB,IAFA,IAAIyD,EAAW,CAAC,CAAC,IACbxD,EAAW,EACf,MAAakD,EAAb,eAAkB,CAAd,IAAIhB,EAAC,KACJA,EAAElC,SAAWA,IACdwD,EAAWtB,EAAEb,OACbrB,EAAWkC,EAAElC,UAIjB,MAAO,CAACqB,OAAQmC,EAAUxD,SAAUA,GA8ELyD,CAAW9B,EAAM/B,MAC1C+B,EAAM3B,SAAWoC,EAAmBpC,SACpC+B,QAAQC,IAAI,WAAaI,EAAmBf,QACzCM,EAAM5B,QAAU4B,EAAM3B,SACvB2B,EAAM/B,KAAO+B,EAAM/B,KAAKQ,KAAI,SAAA8B,GAAC,OAAIA,EAAE9B,KAAI,SAAAsD,GAAC,OAAIA,EAAI,EAAIA,EAAI,EAAIA,SAE5D/B,EAAM/B,KAAKwC,EAAmBf,OAAO,GAAG,IAAIe,EAAmBf,OAAO,GAAG,KAAO,EAChFM,EAAM/B,KAAKwC,EAAmBf,OAAO,GAAG,IAAIe,EAAmBf,OAAO,GAAG,KAAO,EAChFM,EAAM/B,KAAKwC,EAAmBf,OAAO,GAAG,IAAIe,EAAmBf,OAAO,GAAG,KAAO,KAKtFsC,UAAW,SAAChC,GACVI,QAAQC,IAAI,OACZL,EAAM7B,OAAS,WACf6B,EAAM/B,KAAOC,KAEf+D,cAAe,SAACjC,GACdI,QAAQC,IAAI,OACZL,EAAM7B,OAAS,cAMd,EAAmDwB,EAAauC,QAAzDF,EAAP,EAAOA,UAAW/B,EAAlB,EAAkBA,aAAcgC,EAAhC,EAAgCA,cAK1BE,EAAa,SAACnC,GAAD,OAAsBA,EAAMoC,QAAQnE,MACjDoE,EAAe,SAACrC,GAAD,OAAsBA,EAAMoC,QAAQjE,QACnDmE,EAAc,SAACtC,GAAD,OAAsBA,EAAMoC,QAAQhE,OAClDmE,EAAiB,SAACvC,GAAD,OAAsBA,EAAMoC,QAAQ/D,UAGnDsB,IAAf,Q,wBCxLO,SAAS6C,IACd,IAAMvE,EAAOH,EAAeqE,GACtB/D,EAAQN,EAAewE,GACvBjE,EAAWP,EAAeyE,GAC1BpE,EAASL,EAAeuE,GACxBI,EFf4BC,cEmBlC,SAASC,EAAeC,EAAWC,GACjC,GAAe,SAAX1E,EACF,OAAO2E,IAAOC,OAEhB,GAAGH,EAAY,EAEb,OADAA,GAAa,GAEX,KAAK,EAAG,OAAOE,IAAOC,OAAS,IAAMD,IAAOE,QAC5C,KAAK,EAAG,OAAOF,IAAOG,cAAe,IAAMH,IAAOE,QAClD,KAAK,EAAG,OAAOF,IAAOI,aAAc,IAAMJ,IAAOE,QACjD,KAAK,EAAG,OAAOF,IAAOK,YAAa,IAAML,IAAOE,QAChD,KAAK,EAAG,OAAOF,IAAOM,YAAa,IAAMN,IAAOE,QAChD,KAAK,EAAG,OAAOF,IAAOO,WAAY,IAAMP,IAAOE,QAC/C,KAAK,EAAG,OAAOF,IAAOQ,UAAW,IAAMR,IAAOE,QAKlD,OAAQJ,GACN,KAAK,EAAG,OAAOE,IAAOC,OACtB,KAAK,EAAG,OAAOD,IAAOG,cACtB,KAAK,EAAG,OAAOH,IAAOI,aACtB,KAAK,EAAG,OAAOJ,IAAOK,YACtB,KAAK,EAAG,OAAOL,IAAOM,YACtB,KAAK,EAAG,OAAON,IAAOO,WACtB,KAAK,EAAG,OAAOP,IAAOQ,WAM1B,SAASC,IACPnD,QAAQC,IAAI,QACZmD,YAAW,kBAAMf,EAAST,OAAc,KACxCwB,YAAW,kBAAMf,EAASR,OAAkB,KA2D9C,OACE,gCACE,oBAAIwB,MAAO,CAAE,MAAS,sBAAtB,+BACA,sBAAMA,MAAO,CAAE,MAAS,sBAAxB,qFAA8H,uBAC9H,sBAAMA,MAAO,CAAE,MAAS,sBAAxB,qGAA8I,uBAC9I,sBAAMA,MAAO,CAAE,MAAS,sBAAxB,mGAA4I,uBAC5I,uBA9DJ,WACE,OAAQtF,GACN,IAAK,OAAQ,OAAQ,gCACnB,qBAAKuF,UAAWZ,IAAOa,IAAvB,SACA,wBAAQD,UAAWZ,IAAOC,OAC1BU,MAAO,CAAC,gBAAmB,YAAaG,MAAM,SAC5CC,QAASN,EAFX,qBAOCtF,GAAQA,EAAKQ,KAAI,SAACkF,EAAKjF,GACtB,OAAQ,qBAAKgF,UAAWZ,IAAOa,IAAvB,SACLA,EAAIlF,KAAI,SAACqF,EAAMnF,GAAP,OACR,wBAAQoF,UAAU,EAAML,UAAWf,EAAemB,GAAlD,0BAcP,IAAK,WACL,IAAK,UACL,IAAK,WAAY,OACf,8BAEG7F,GAAQA,EAAKQ,KAAI,SAACkF,EAAKjF,GACtB,OAAQ,qBAAKgF,UAAWZ,IAAOa,IAAvB,SACLA,EAAIlF,KAAI,SAACqF,EAAMnF,GAAP,OACR,wBAAQoF,SAAqB,aAAX5F,EAAuBuF,UAAWf,EAAemB,GAClED,QAAS,kBAAMpB,EAASxC,EAAa,CAACvB,EAAGC,MAD1C,0BA2BRqF,GACW,aAAX7F,GAA0B,gCAAK,uBAAMsF,MAAO,CAAC,MAAQ,sBAAtB,wBAAyDrF,KACzF,uBACA,uBAAMqF,MAAO,CAAC,MAAQ,sBAAtB,gCAAiEpF,KACjE,qBAAKqF,UAAWZ,IAAOa,IAAvB,SACA,wBAAQD,UAAWZ,IAAOC,OAC1BU,MAAO,CAAC,gBAAmB,YAAaG,MAAM,SAC5CC,QAASN,EAFX,2B,6BCfSU,MAnGf,WACE,OACE,sBAAKP,UAAU,MAAf,UAEE,cAAC,IAAD,CACAQ,GAAG,cACHC,QAAS,CACPC,WAAY,CACVC,QAAQ,EACRC,OAAQ,GAEVC,WAAY,CACVX,MAAO,CACLY,MAAO,kBAGTC,QAAS,KAEXC,SAAU,GACVC,cAAe,CACbC,UAAW,SACXC,MAAO,CACLC,OAAQ,CACNC,SAAU,IACVC,SAAU,EACVP,QAAS,GACTQ,KAAM,MAIZC,UAAW,CACTtB,MAAO,CACLY,MAAO,CACL,UACA,UACA,UACA,YAKJW,WAAY,CACVd,QAAQ,GAEVe,KAAM,CACJC,UAAW,OACXhB,QAAQ,EACRiB,QAAS,MACTrG,QAAQ,EACRsG,MAAO,EACPC,UAAU,GAEZC,OAAQ,CACNC,QAAS,CACPrB,QAAQ,EACRsB,WAAY,KAEdnB,MAAO,GAETC,QAAS,CACPD,MAAO,IAEToB,MAAO,CACLC,KAAM,CAAC,UAAW,WAEpBZ,KAAM,CACJhG,QAAQ,EACRuF,MAAO,GAETsB,OAAQ,CACNT,UAAW,YACXU,UAAW,CACT1B,QAAQ,EACRkB,MAAO,IAGXjB,OAAQ,CACN0B,YAAa,GACbC,SAAU,KAGdC,cAAc,KAKhB,wBAAQxC,UAAU,aAAlB,SAGE,sBAAKD,MAAO,CAACa,OAAQ,EAAG6B,gBAAiB,yBAAzC,UACA,sBAAKC,MAAM,6BAA6BC,OAAO,QAAQC,MAAM,QAAQC,KAAK,UAAUC,QAAQ,YAAYjG,EAAE,MAAMwB,EAAE,MAAlH,UAAwH,sBAAM0E,EAAE,s9DAAq9D,sBAAMA,EAAE,wJAAuJ,sBAAMA,EAAE,gPAA+O,sBAAMA,EAAE,2IAA0I,sBAAMA,EAAE,qLAAoL,sBAAMA,EAAE,mEAAkE,sBAAMA,EAAE,8jBAC34F,cAACjE,EAAD,a,0BCxGD,SAASkE,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAA0B,SAACC,GAAD,OACnCrD,YAAW,kBAAMqD,EAAQ,CAAEC,KAAMH,MAAW,QCMhD,IC0CYI,EAiCAC,EDjECC,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAOP,GAAP,eAAAQ,EAAA,sEACyBT,EAAWC,GADpC,cACQS,EADR,yBAGSA,EAASN,MAHlB,2CAF4C,uDASjCO,EAAezH,YAAY,CACtCC,KAAM,UACN7B,aArBiC,CACjCwG,MAAO,EACPrG,OAAQ,QAqBR2B,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMwE,OAAS,GAEjB8C,UAAW,SAACtH,GACVA,EAAMwE,OAAS,GAGjB+C,kBAAmB,SAACvH,EAAOE,GACzBF,EAAMwE,OAAStE,EAAOC,UAK1BqH,cAAe,SAACC,GACdA,EACGC,QAAQT,EAAeU,SAAS,SAAC3H,GAChCA,EAAM7B,OAAS,aAEhBuJ,QAAQT,EAAeW,WAAW,SAAC5H,EAAOE,GACzCF,EAAM7B,OAAS,OACf6B,EAAMwE,OAAStE,EAAOC,cAKvB,EAAoDkH,EAAanF,QAmBzDmF,GAnBR,EAAQtH,UAAR,EAAmBuH,UAAnB,EAA8BC,kBAmBtBF,EAAf,SChFMQ,EAAKC,EAAQ,M,SAkDPf,K,gBAAAA,E,kBAAAA,E,2BAAAA,E,iCAAAA,E,kBAAAA,E,gBAAAA,E,YAAAA,E,YAAAA,E,sBAAAA,E,gBAAAA,E,cAAAA,E,oBAAAA,E,kBAAAA,E,qBAAAA,E,oBAAAA,E,6BAAAA,E,qBAAAA,E,mCAAAA,E,+BAAAA,E,gBAAAA,E,YAAAA,E,yBAAAA,E,iCAAAA,E,yBAAAA,E,2BAAAA,E,qBAAAA,E,2BAAAA,E,cAAAA,E,oCAAAA,M,cAiCAC,K,oBAAAA,E,qBAAAA,E,YAAAA,E,wCAAAA,E,8BAAAA,M,KAWL,IAAMe,EAAU,CACrBC,SAAU,CAAEC,YAAajB,EAAUgB,SAAUE,SAAU,IAAOC,WAAW,GACzEC,kBAAmB,CAAEH,YAAajB,EAAUoB,kBAAmBF,SAAU,IAAMC,WAAW,GAC1FE,KAAQ,CAAEJ,YAAajB,EAAUqB,KAAMH,SAAU,IAAMC,WAAW,GAClEG,SAAY,CAAEL,YAAajB,EAAUsB,SAAUJ,SAAU,IAAOC,WAAW,GAC3EI,aAAe,CAAEN,YAAajB,EAAUuB,aAAcL,SAAU,IAAMC,WAAW,IAS5E,SAASK,EAAkBC,EAAYC,GAC1C,IAAK,IAAIC,KAAKF,EACV,GAAIA,EAAKE,GAA0BD,EAAUC,GAA8B,OAAO,EAEtF,OAAO,EAGJ,SAASC,EAAgBH,EAAYC,GACxC,IAAK,IAAIC,KAAKF,EACVC,EAAUC,IAAgCF,EAAKE,GAEnD,OAAOD,EAiBJ,SAASG,EAAiB1B,EAAgB2B,GAC7C,IAAK,IAAIpK,KAAKyI,EACVA,EAAEzI,GAAuByI,EAAEzI,GAAuBoK,EAAEpK,GAExD,OAAOyI,EA2BF,SAAS4B,EAAMC,GACpB,IAAIC,EAAQ,EAKZ,OAJID,EAAOE,WACTD,GAASD,EAAOE,UAGXD,EAMF,SAASE,EAAOH,GACrB,IAAIC,EAAQ,EAKZ,OAJID,EAAOI,SAAW,GAAKJ,EAAOK,SAAW,IAC3CJ,GAASnK,KAAKD,IAAI,EAAGgJ,EAAGyB,MAAM,EAAEN,EAAOI,SAAUJ,EAAOK,YAGnDJ,ECpJX,I,QC9BO,SAASM,EAAsBvJ,EAAOwJ,GACrCA,EAAMvB,cAAgBjB,EAAUgB,UAAahI,EAAMyJ,KAAKC,SAASC,SAAS,SAInEH,EAAMvB,cAAgBjB,EAAUoB,mBAAsBpI,EAAMyJ,KAAKC,SAASC,SAAS,SAG1F3J,EAAM4J,kBAAkBC,QAAQ,aAFhC7J,EAAM4J,kBAAkBC,QAAQ,qEAJhC7J,EAAMyJ,KAAKC,SAAS9H,KAAK,SACzB5B,EAAM8J,YAAcjB,EAAiB,CAAEK,SAAU,GAAKlJ,EAAM8J,aAC5D9J,EAAM4J,kBAAkBC,QAAQ,oDAQjC,SAASE,EAAoB/J,EAAOwJ,GACnCA,EAAMvB,cAAgBjB,EAAUsB,UAAatI,EAAMyJ,KAAKC,SAASC,SAAS,UAGnEH,EAAMvB,cAAgBjB,EAAUuB,cAAgBvI,EAAMyJ,KAAKC,SAASC,SAAS,WACpF3J,EAAM4J,kBAAkBC,QAAQ,+DAChC7J,EAAMyJ,KAAKtF,QAAQvC,KAAKoI,KACjBR,EAAMvB,cAAgBjB,EAAUoB,mBAAsBpI,EAAMyJ,KAAKC,SAASC,SAAS,SAG1F3J,EAAM4J,kBAAkBC,QAAQ,aAFhC7J,EAAM4J,kBAAkBC,QAAQ,0GANhC7J,EAAMyJ,KAAKC,SAAS9H,KAAK,UACzB5B,EAAM4J,kBAAkBC,QAAQ,8CAWjC,SAASI,EAAsBjK,EAAOwJ,GACrCA,EAAMvB,cAAgBjB,EAAUgB,SAChChI,EAAM4J,kBAAkBC,QAAQ,qCACzBL,EAAMvB,cAAgBjB,EAAUoB,mBACvCpI,EAAM4J,kBAAkBC,QAAQ,6EAChC7J,EAAM0I,UAAUwB,IAAM,IAEtBlK,EAAM4J,kBAAkBC,QAAQ,aAIjC,SAASM,GAAwBnK,EAAOwJ,GACvCA,EAAMvB,cAAgBjB,EAAUgB,SAChChI,EAAM4J,kBAAkBC,QAAQ,yDACzBL,EAAMvB,cAAgBjB,EAAUoB,kBACvCpI,EAAM4J,kBAAkBC,QAAQ,mCACzBL,EAAMvB,cAAgBjB,EAAUsB,UAAatI,EAAMyJ,KAAKC,SAASC,SAAS,UAKjF3J,EAAM4J,kBAAkBC,QAAQ,cAJhC7J,EAAMyJ,KAAKC,SAAS9H,KAAK,UACzB5B,EAAM4J,kBAAkBC,QAAQ,mDAChC7J,EAAMyJ,KAAKtF,QAAQvC,KAAKwI,KAMzB,SAASC,GAAsBrK,EAAOwJ,GACrCA,EAAMvB,cAAgBjB,EAAUgB,UAChChI,EAAMyJ,KAAKC,SAAS9H,KAAK,SACzB5B,EAAM4J,kBAAkBC,QAAQ,0EAChC7J,EAAM0I,UAAUwB,IAAM,IAEfV,EAAMvB,cAAgBjB,EAAUqB,KACvCrI,EAAM4J,kBAAkBC,QAAQ,2FAGzBL,EAAMvB,cAAgBjB,EAAUsB,UAAatI,EAAMyJ,KAAKC,SAASC,SAAS,WAAc3J,EAAMyJ,KAAKC,SAASC,SAAS,SAGrHH,EAAMvB,cAAgBjB,EAAUuB,cACvCvI,EAAM4J,kBAAkBC,QAAQ,wFAChC7J,EAAMyJ,KAAKtF,QAAQvC,KAAK0I,KAExBtK,EAAM4J,kBAAkBC,QAAQ,cANhC7J,EAAMyJ,KAAKC,SAAS9H,KAAK,UACzB5B,EAAM4J,kBAAkBC,QAAQ,6FASjC,SAASU,GAAwBvK,EAAOwJ,IAIxC,SAASgB,GAA4BxK,EAAOwJ,GAC/CxJ,EAAM4J,kBAAkBC,QAAQ,aAW7B,SAASY,GAAwBzK,EAAyBwJ,GACzDA,EAAMvB,cAAgBjB,EAAUgB,UAAYwB,EAAMvB,cAAgBjB,EAAUsB,UAC5EtI,EAAMyJ,KAAKC,SAAS9H,KAAK,SAEzB5B,EAAMyJ,KAAKtF,QAAQ1F,KAAI,SAAAiM,GACnB,IAAK,IAAI/B,KAAK+B,EAAEjC,KACZiC,EAAEjC,KAAKE,GAA6B+B,EAAEjC,KAAKE,GAA4B,KAG/E3I,EAAM4J,kBAAkBC,QAAQ,4CAExBL,EAAMvB,cAAgBjB,EAAUsB,UACxCtI,EAAMyJ,KAAKC,SAAS9H,KAAK,UAEzB5B,EAAMyJ,KAAKtF,QAAQ1F,KAAI,SAAAiM,GACnB,IAAK,IAAI/B,KAAK+B,EAAEjC,KACZiC,EAAEjC,KAAKE,GAA6B+B,EAAEjC,KAAKE,GAA4B,KAG/E3I,EAAM4J,kBAAkBC,QAAQ,4CAEH,SAAtBL,EAAMvB,aACbjI,EAAMyJ,KAAKtF,QAAQ1F,KAAI,SAAAiM,GACnB,IAAK,IAAI/B,KAAK+B,EAAEjC,KACZiC,EAAEjC,KAAKE,GAAgE,EAAnC+B,EAAEjC,KAAKE,MAGnD3I,EAAM4J,kBAAkBC,QAAQ,qCAEhC7J,EAAM4J,kBAAkBC,QAAQ,aAwExC,SAASc,GAAQ3K,EAAOwJ,IAIjB,IAAIoB,GAAiB,CACxB/K,KAAMkH,EAAS8D,KACfnB,SAAU,IAAInL,MACd4F,QAAS,IAaF2G,IAPD/D,EAASgE,SACL,IAAIxM,MAMsB,CACpCsB,KAAMkH,EAASiE,YACftB,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASiE,YAAa9K,OAAQ,6BAA8BuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaT,GAAUlB,SAAU,IAAInL,UAIvJ+M,GAAqB,CAC5BzL,KAAMkH,EAASwE,SACf7B,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASiE,YAAa9K,OAAQ,6BAA8BuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaP,GAAsBpB,SAAU,IAAInL,SAInKiN,GAAwB,CAC/B3L,KAAMkH,EAAS0E,YACf/B,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASwE,SAAUrL,OAAQ,kBAAmBuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaC,GAAc5B,SAAU,IAAInL,SAI7ImN,GAA0B,CACjC7L,KAAMkH,EAAS4E,cACfjC,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAAS0E,YAAavL,OAAQ,wBAAyBuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaG,GAAiB9B,SAAU,IAAInL,SAIzJqN,GAAkB,CACzB/L,KAAMkH,EAAS4E,cACfjC,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAAS4E,cAAezL,OAAQ,+BAAgCuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaK,GAAmBhC,SAAU,IAAInL,SAIpKsN,GAAwB,CAC/BhM,KAAMkH,EAAS+E,gBACfpC,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASgF,MAAO7L,OAAQ,qBAAsBuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaO,GAAWlC,SAAU,IAAInL,SAI1IyN,GAAqB,CAC5BnM,KAAMkH,EAASkF,SACfvC,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAAS+E,gBAAiB5L,OAAQ,qBAAsBuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaQ,GAAiBnC,SAAU,IAAInL,OAC7J,CAAE0M,MAAOlE,EAASgF,MAAO7L,OAAQ,qBAAsBuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaO,GAAWlC,SAAU,IAAInL,SAY1I2N,IAPDnF,EAASoF,gBACL,IAAI5N,MAEDwI,EAASkF,SAAmI,IAAI1N,MAIzI,CACpBsB,KAAMkH,EAASoF,gBACfzC,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAAS8D,KAAM3K,OAAQ,aAAcuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaT,GAAUlB,SAAU,IAAInL,UAIhI6N,GAAe,CACtBvM,KAAMkH,EAASsF,OACf3C,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASuF,KAAMpM,OAAQ,sBAAuBuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaa,GAAMxC,SAAU,IAAInL,SAKrIgO,GAA2B,CAClC1M,KAAMkH,EAASyF,eACf9C,SAAU,IAAInL,MACd4F,QAAS,CAEL,CAAE8G,MAAOlE,EAAS8D,KAAM3K,OAAQ,gCAAiCuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaT,GAAUlB,SAAU,IAAInL,SAKnJkO,GAAkB,CACzB5M,KAAMkH,EAAS2F,MACfhD,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASyF,eAAgBtM,OAAQ,gCAAiCuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAakB,GAAoB7C,SAAU,IAAInL,SAKvKoO,GAAoB,CAC3B9M,KAAMkH,EAAS6F,QACflD,SAAU,IAAInL,MACd4F,QAAS,IAMF0I,GAAoB,CAC3BhN,KAAMkH,EAAS+F,QACfpD,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASkF,SAAU/L,OAAQ,wBAAyBuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaW,GAActC,SAAU,IAAInL,OACtJ,CAAE0M,MAAOlE,EAAS6F,QAAS1M,OAAQ,2BAA4BuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAasB,GAAajD,SAAU,IAAInL,SAKpJwO,GAAoB,CAC3BlN,KAAMkH,EAASiG,QACftD,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAAS2F,MAAOxM,OAAQ,qCAAsCuI,KAAM,CAAEyC,MAAO,KAAMC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaoB,GAAW/C,SAAU,IAAInL,OAC5J,CAAE0M,MAAOlE,EAAS+F,QAAS5M,OAAQ,sBAAuBuI,KAAM,CAAEyC,MAAO,KAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAawB,GAAanD,SAAU,IAAInL,SAI/I0O,GAAqB,CAC5BpN,KAAMkH,EAASmG,SACfxD,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASiG,QAAS9M,OAAQ,0CAA2CuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAa0B,GAAarD,SAAU,IAAInL,SAKnK4O,GAAmB,CAC1BtN,KAAMkH,EAASqG,OACf1D,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASmG,SAAUhN,OAAQ,oBAAqBuI,KAAM,CAAEyC,MAAO,IAAKC,IAAK,KAAMC,KAAM,IAAKlB,GAAI,GAAKmB,YAAa4B,GAAcvD,SAAU,IAAInL,SAKzJ+L,GAAkB,CAAEW,MAAOlE,EAASmG,SAAUhN,OAAQ,iCAAkCuI,KAAM,CAAEyC,MAAO,IAAKC,IAAK,IAAKC,KAAM,GAAIlB,GAAI,GAAKmB,YAAa4B,GAAcvD,SAAU,IAAInL,OAE3K8O,GAAqB,CAC5BxN,KAAMkH,EAASuG,SACf5D,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASmG,SAAUhN,OAAQ,2BAA4BuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAa4B,GAAcvD,SAAU,IAAInL,SAMtJgP,GAAwB,CAC/B1N,KAAMkH,EAASyG,YACf9D,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASyF,eAAgBtM,OAAQ,2BAA4BuI,KAAM,CAAEyC,MAAO,MAAOC,IAAK,KAAMC,KAAM,GAAIlB,GAAI,GAAKmB,YAAakB,GAAoB7C,SAAU,IAAInL,SAItKkP,GAAmB,CAC1B5N,KAAMkH,EAAS2G,OACfhE,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASuG,SAAUpN,OAAQ,4BAA6BuI,KAAM,CAAEyC,MAAO,KAAMC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAagC,GAAc3D,SAAU,IAAInL,OACzJ,CAAE0M,MAAOlE,EAASyG,YAAatN,OAAQ,mCAAoCuI,KAAM,CAAEyC,MAAO,KAAMC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAakC,GAAiB7D,SAAU,IAAInL,SAanKoP,IAPD5G,EAAS6G,UACL,IAAIrP,MAMY,CAC1BsB,KAAMkH,EAAS8G,OACfnE,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAAS+F,QAAS5M,OAAQ,wBAAyBuI,KAAM,CAAEyC,MAAO,EAAGC,IAAK,IAAOC,KAAM,EAAGlB,GAAI,GAAKmB,YAAawB,GAAanD,SAAU,IAAInL,OACpJ,CAAE0M,MAAOlE,EAASsF,OAAQnM,OAAQ,qCAAsCuI,KAAM,CAAEyC,MAAO,EAAGC,IAAK,IAAOC,KAAM,EAAGlB,GAAI,GAAKmB,YAAae,GAAQ1C,SAAU,IAAInL,UAKxJuP,GAAiB,CACxBjO,KAAMkH,EAASgH,KACfrE,SAAU,IAAInL,MACd4F,QAAS,IAKF6J,GAAyB,CAChCnO,KAAMkH,EAASkH,aACfvE,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAASgH,KAAM7N,OAAQ,gCAAiCuI,KAAM,CAAEyC,MAAO,EAAGC,IAAK,EAAGC,KAAM,IAAQlB,GAAI,GAAKmB,YAAayC,GAAUpE,SAAU,IAAInL,SAK3JyL,GAAW,CAAEiB,MAAOlE,EAASkH,aAAc/N,OAAQ,0BAA2BuI,KAAM,CAAEyC,MAAO,IAAKC,IAAK,IAAKC,KAAM,GAAIlB,GAAI,GAAKmB,YAAa2C,GAAkBtE,SAAU,IAAInL,OAC5K6L,GAAa,CAAEa,MAAOlE,EAASqG,OAAQlN,OAAQ,kCAAmCuI,KAAM,CAAEyC,MAAO,IAAKC,IAAK,IAAKC,KAAM,GAAIlB,GAAI,GAAKmB,YAAa8B,GAAYzD,SAAU,IAAInL,OAGnK2P,GAAiB,CACxBrO,KAAMkH,EAAS8D,KACfnB,SAAU,IAAInL,MACd4F,QAAS,CACL,CAAE8G,MAAOlE,EAAS2G,OAAQxN,OAAQ,uBAAwBuI,KAAM,CAAEyC,MAAO,IAAKC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAAKmB,YAAaoC,GAAY/D,SAAU,IAAInL,OAC/I,CAAE0M,MAAOlE,EAAS8G,OAAQ3N,OAAQ,mBAAoBuI,KAAM,CAAEyC,MAAO,IAAKC,IAAK,IAAKC,KAAM,IAAKlB,GAAI,GAAKmB,YAAasC,GAAYjE,SAAU,IAAInL,SC5ajJP,GAA8B,CAElCC,KAAMC,KACNC,OAAQ,OACRgQ,OAAQ,IACR7P,SAAS,GAGX,SAASJ,KAGP,OADiB,YAAIK,MADb,GACsBC,QAAQC,KAAI,SAAAC,GAAC,OAAI,YAAIH,MAD3C,GACoDC,QAAQC,KAAI,SAAAE,GAAC,OAAIG,KAAKsP,MAAMtP,KAAKG,gBAKxF,IAAMoP,GAAgBzO,YAAY,CACvCC,KAAM,WACN7B,gBAEA8B,SAAU,CACRC,UAAW,SAACC,KAIZsO,gBAAiB,SAACtO,EAAOE,GACvB,IAAIR,EAASQ,EAAOC,QACpBC,QAAQC,IAAIX,GAEZM,EAAM/B,KAAKyB,EAAO,IAAIA,EAAO,IAA4C,IAArCM,EAAM/B,KAAKyB,EAAO,IAAIA,EAAO,IAAY,EAAI,GAGnFsC,UAAW,SAAChC,GACVI,QAAQC,IAAI,OACZL,EAAM7B,OAAS,WACf6B,EAAM/B,KAAOC,MAEf+D,cAAe,SAACjC,GACdI,QAAQC,IAAI,OACZL,EAAM7B,OAAS,WAEjBoQ,qBAAsB,SAACvO,KAIvBwO,gBAAiB,SAACxO,GAChBA,EAAMmO,QAAsE,EAAzDnO,EAAM/B,KAAKqC,SAAQ,SAAA5B,GAAC,OAAIA,KAAG8B,QAAO,SAAA9B,GAAC,OAAU,IAANA,KAASa,OAAwE,EAAzDS,EAAM/B,KAAKqC,SAAQ,SAAA5B,GAAC,OAAIA,KAAG8B,QAAO,SAAA9B,GAAC,OAAU,IAANA,KAASa,OAElIS,EAAM7B,OAAS,YAIjBoJ,kBAAmB,SAACvH,EAAOE,QAMxB,GAA0HmO,GAAcnM,QAAvCqM,IAAjG,GAAQxO,UAAR,GAAkBwH,kBAAlB,GAAqCvF,UAArC,GAAgDsM,gBAAhD,GAAiErM,cAAjE,GAAgFuM,gBAAhF,GAAiGD,sBAUzFF,MAAf,QCrCMI,GAA4C,CAAC,WAAY,YAAa,SAAU,SAAU,YAAa,WAAY,YAgDnHzQ,GAA0B,CAC9B0K,UAAW,CACTyC,IAAK,IACLD,MAAO,IACPE,KAAM,UACNlB,GAAI,KAENwE,KAAM,CACJC,OAAQ,IACRxQ,OAAQ,UAEVsL,KAAMyE,GACNU,iBAAkB,EAClBC,gBAAiB,GACjBC,MH3FK,WACH,IAAIC,EAAmC,CACnC,CAAE7D,MAAO,EAAGC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GACjC,CAAEgB,MAAO,EAAGC,IAAK,GAAIC,KAAM,EAAGlB,GAAI,GAClC,CAAEgB,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAClC,CAAEgB,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAClC,CAAEgB,MAAO,GAAIC,IAAK,GAAIC,KAAM,EAAGlB,GAAI,GACnC,CAAEgB,MAAO,EAAGC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,KAGjC8E,EAA0B,CAC1B,CAAE9D,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAClC,CAAEgB,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GAClC,CAAEgB,MAAO,IAAKC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GACnC,CAAEgB,MAAO,IAAKC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GACnC,CAAEgB,MAAO,IAAKC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,GACnC,CAAEgB,MAAO,KAAMC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAGxC6E,EA7BJ,SAAoB5H,GAChB,IAAK,IAAIzI,EAAIyI,EAAE5H,OAAS,EAAGb,EAAI,EAAGA,IAAK,CACnC,IAAMC,EAAIG,KAAKE,MAAMF,KAAKG,UAAYP,EAAI,IADP,EAEpB,CAACyI,EAAExI,GAAIwI,EAAEzI,IAAvByI,EAAEzI,GAFgC,KAE5ByI,EAAExI,GAF0B,KAIvC,OAAOwI,EAwBM8H,CAAQF,GACrB,IAAID,EAA4B,GAChC,IAAK,IAAIpQ,KAAKsQ,EACVF,EAAMlN,KAAK,CAACoN,EAAWtQ,GAAIqQ,EAAWrQ,KAE1C,OAAOoQ,EGmEFI,GACPpF,YAAa,CAAEZ,SAAU,GACzBiG,cAAe,CAAEjG,SAAU,EAAGkG,YAAa,EAAGC,WAAY,GAC1DC,aAAc,CAAElG,SAAU,EAAGC,SAAU,GACvCkG,WAAY,CAAErG,SAAU,IACxBsG,SAAU,CAAC,EAAG,EAAG,EAAG,GACpBC,SAAU,YAAIlR,MAAM,IAAIC,QAAQC,KAAI,SAAAC,GAAC,OAAI,KACzCgR,UAAW,YAAInR,MAAM,IAAIC,QAAQC,KAAI,SAAAC,GAAC,OAAI,KAC1CiR,QAAS,YAAIpR,MAAM,IAAIC,QAAQC,KAAI,SAAAC,GAAC,OAAI,KACxCP,OAAQ,QACRyL,kBAAmB,GACnBgG,cAAe,CACb,CAAC,CAAE1E,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,GAAKkG,YAAa,EAAGC,WAAY,GAAK,IACxG,CAAC,CAAEnE,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,GAAKkG,YAAa,EAAGC,WAAY,GAAK,CAACtH,EAAQK,oBACjH,CAAC,CAAE8C,MAAO,IAAKC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,EAAGkG,YAAa,EAAGC,WAAY,GAAK,IACvG,CAAC,CAAEnE,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,GAAKkG,YAAa,EAAGC,WAAY,GAAK,CAACtH,EAAQQ,eACjH,CAAC,CAAE2C,MAAO,IAAKC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,EAAGkG,YAAa,EAAGC,WAAY,GAAK,IACvG,CAAC,CAAEnE,MAAO,KAAMC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,GAAKkG,YAAa,EAAGC,WAAY,IAAM,IAC3G,CAAC,CAAEnE,MAAO,IAAQC,IAAK,IAAKC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,GAAKkG,YAAa,EAAGC,WAAY,GAAK,CAACtH,EAAQM,OACvH,CAAC,CAAE6C,MAAO,IAAYC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,GAAKkG,YAAa,EAAGC,WAAY,IAAM,KAGnHQ,YAAa,CACX,CAAC,CAAE3E,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,IAAO,CAACnB,EAAQC,WAClF,CAAC,CAAEkD,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,IAAO,IACzE,CAAC,CAAEgC,MAAO,IAAKC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,GAAK,IACxE,CAAC,CAAEgC,MAAO,GAAIC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,IAAO,IACzE,CAAC,CAAEgC,MAAO,IAAMC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,GAAK,IACzE,CAAC,CAAEgC,MAAO,MAAOC,IAAK,EAAGC,KAAM,GAAIlB,GAAI,IAAK,GAAO,EAAO,CAAEhB,SAAU,IAAM,KAG9E4G,aAAc,CACZ,CAAC,CAAE5E,MAAO,EAAGC,IAAK,GAAIC,KAAM,EAAGlB,GAAI,IAAK,EAAO,EAAG,CAAEd,SAAU,KAAQC,SAAU,MAAU,IAC1F,CAAC,CAAE6B,MAAO,IAAKC,IAAK,EAAGC,KAAM,EAAGlB,GAAI,IAAK,EAAO,EAAG,CAAEd,SAAU,EAAGC,SAAU,IAAO,CAACtB,EAAQO,WAC5F,CAAC,CAAE4C,MAAO,EAAGC,IAAK,IAAKC,KAAM,GAAIlB,GAAI,IAAK,EAAO,EAAG,CAAEd,SAAU,EAAGC,SAAU,GAAK,IAClF,CAAC,CAAE6B,MAAO,EAAGC,IAAK,EAAGC,KAAM,IAAKlB,GAAI,IAAK,EAAO,EAAG,CAAEd,SAAU,EAAGC,SAAU,IAAM,IAClF,CAAC,CAAE6B,MAAO,EAAGC,IAAK,EAAGC,KAAM,IAAKlB,GAAI,IAAK,EAAO,EAAG,CAAEd,SAAU,EAAGC,SAAU,IAAM,MAOhF0G,GAAmBC,OAAOC,OAAO,GAAIjS,IAE9BkS,GAAiBtQ,YAAY,CACxCC,KAAM,YACN7B,gBAEA8B,SAAU,CACRqQ,UAAW,SAACnQ,GACVA,EAAM7B,OAAS,WAEjBiS,WAAY,SAACpQ,GACXqQ,cAAcrQ,EAAM4O,kBACpBoB,OAAOC,OAAOjQ,EAAO+P,KAEvBO,aAAc,SAACtQ,GACbA,EAAM0I,UAAUyC,KAAOpC,EAAM/I,EAAM8J,aACnC9J,EAAM2P,QAAQ/N,KAAKmH,EAAM/I,EAAM8J,cAC/B9J,EAAM2P,QAAQY,SAEhBC,UAAW,SAACxQ,EAAOG,GACjB,GAAIA,EAAS,CACX,IAAIqJ,EAAQxJ,EAAM6O,gBAAgB4B,MAAK,SAAAlQ,GAAC,OAAIA,EAAE0H,cAAgB9H,EAAQA,QAAQ8H,eAC1EuB,IACFA,EAAMrB,WAAY,EAuM5B,SAAqBnI,EAAyBwJ,IF9OVC,EE+OIzJ,EAAMyJ,KAAK5J,KF9OxC6Q,gBAAMjH,GACZkH,KAAK5J,EAAS2G,QAAO,kBAAMnE,KAC3BoH,KAAK5J,EAAS8D,MAAM,kBAAKd,KACzB4G,KAAK5J,EAAS8G,QAAO,kBAAM5D,KAC3B0G,KAAK5J,EAASiG,SAAS,kBAAKxC,MAC5BmG,KAAK5J,EAASmG,UAAS,kBAAM3C,MAC7BoG,KAAK5J,EAASuG,UAAS,kBAAMnD,MAC7BwG,KAAK5J,EAASqG,QAAO,kBAAM/C,MAC3BsG,KAAK5J,EAASkH,cAAa,kBAAMtD,MACjCgG,KAAK5J,EAASgE,UAAS,kBAAMJ,MAC7BgG,KAAK5J,EAASgH,MAAK,kBAAMpD,MACzBgG,KAAK5J,EAAS2F,OAAM,kBAAM/B,MAC1BgG,KAAK5J,EAAS+F,SAAQ,kBAAMnC,MAC5BgG,KAAK5J,EAAS6F,SAAQ,kBAAMjC,MAC5BgG,KAAK5J,EAASyG,aAAY,kBAAM7C,MAChCgG,KAAK5J,EAASyF,gBAAe,kBAAM7B,MACnCgG,KAAK5J,EAAS6G,WAAU,kBAAMjD,MAC9BgG,KAAK5J,EAASkF,UAAU,kBAAMtB,MAC9BgG,KAAK5J,EAASoF,iBAAgB,kBAAMxB,MACpCgG,KAAK5J,EAAS4E,eAAc,kBAAMhB,MAClCgG,KAAK5J,EAASsF,QAAO,kBAAM1B,MAC3BgG,KAAK5J,EAASuF,MAAK,kBAAM3B,MACzBgG,KAAK5J,EAAS6J,YAAW,kBAAMjG,MAC/BgG,KAAK5J,EAAS8J,gBAAe,kBAAMlG,MACnCgG,KAAK5J,EAAS+J,YAAW,kBAAMnG,MAC/BgG,KAAK5J,EAAS0E,aAAY,kBAAMd,MAChCgG,KAAK5J,EAASwE,UAAS,kBAAMZ,MAC7BgG,KAAK5J,EAASiE,aAAY,kBAAML,MAChCgG,KAAK5J,EAASgF,OAAM,kBAAMpB,MAC1BgG,KAAK5J,EAAS+E,iBAAgB,kBAAMnB,MACpCoG,cEiNsB/Q,EAAOwJ,GAEdxJ,EAAMyJ,KAAKtF,QAAQ1F,KAAI,SAAA8B,GAAC,OFhNrC,SAA6BkJ,GAChC,OAAOiH,gBAAMjH,GACZkH,KAAK5J,EAAS2G,QAAO,kBAAM/C,MAC3BgG,KAAK5J,EAAS8D,MAAK,kBAAMF,MACzBgG,KAAK5J,EAAS8G,QAAO,kBAAMlD,MAC3BgG,KAAK5J,EAASiG,SAAQ,kBAAMvC,MAC5BkG,KAAK5J,EAASmG,UAAS,kBAAMvC,MAC7BgG,KAAK5J,EAASuG,UAAS,kBAAM3C,MAC7BgG,KAAK5J,EAASqG,QAAO,kBAAMzC,MAC3BgG,KAAK5J,EAASkH,cAAc,kBAAKtD,MACjCgG,KAAK5J,EAASgE,UAAU,kBAAKJ,MAC7BgG,KAAK5J,EAASgH,MAAK,kBAAMpD,MACzBgG,KAAK5J,EAAS2F,OAAM,kBAAM/B,MAC1BgG,KAAK5J,EAAS+F,SAAQ,kBAAMnC,MAC5BgG,KAAK5J,EAAS6F,SAAQ,kBAAMjC,MAC5BgG,KAAK5J,EAASyG,aAAY,kBAAM7C,MAChCgG,KAAK5J,EAASyF,gBAAe,kBAAM7B,MACnCgG,KAAK5J,EAAS6G,WAAU,kBAAMjD,MAC9BgG,KAAK5J,EAASkF,UAAU,kBAAMtB,MAC9BgG,KAAK5J,EAASoF,iBAAgB,kBAAMxB,MACpCgG,KAAK5J,EAAS4E,eAAc,kBAAMhB,MAClCgG,KAAK5J,EAASsF,QAAO,kBAAM1B,MAC3BgG,KAAK5J,EAASuF,MAAK,kBAAM3B,MACzBgG,KAAK5J,EAAS6J,YAAW,kBAAMjG,MAC/BgG,KAAK5J,EAAS8J,gBAAe,kBAAMlG,MACnCgG,KAAK5J,EAAS+J,YAAW,kBAAMnG,MAC/BgG,KAAK5J,EAAS0E,aAAY,kBAAMd,MAChCgG,KAAK5J,EAASwE,UAAS,kBAAMZ,MAC7BgG,KAAK5J,EAASiE,aAAY,kBAAML,MAChCgG,KAAK5J,EAASgF,OAAM,kBAAMpB,MAC1BgG,KAAK5J,EAAS+E,iBAAgB,kBAAMnB,MACpCoG,aEiL2CC,CAAoBzQ,EAAE8K,YAAYxL,KAAlCmR,CAAwChR,EAAOwJ,MFlPxF,IAA6BC,EEwC1BwH,CAAYjR,EAAOwJ,MAIzB0H,WAAY,SAAClR,EAAOG,GAClB,GAAIA,EAAS,CACX,IAAIqJ,EAAQxJ,EAAM6O,gBAAgB4B,MAAK,SAAAlQ,GAAC,OAAIA,EAAE0H,cAAgB9H,EAAQA,QAAQ8H,eAC1EuB,IACFA,EAAMrB,WAAY,KAIxBgJ,cAAe,SAACnR,GACdA,EAAM0I,UAAU0C,MAAQjC,EAAOnJ,EAAMsP,cACrCtP,EAAMwP,SAAW,YAAIjR,MAAM,KAAMC,QAAQC,KAAI,SAAAC,GAAC,OAAII,KAAKsP,MAAMjF,EAAOnJ,EAAMsP,kBAC1EtP,EAAMyP,SAAS7N,KAAK5B,EAAM0I,UAAU0C,MACpCpL,EAAMyP,SAASc,SAEjBa,eAAgB,SAACpR,GACfA,EAAM0I,UAAUwC,OJnCf,SAAiBlC,GACpB,IAAIC,EAAQ,EAUZ,OATID,EAAOE,WACTD,GAASD,EAAOE,UAEdF,EAAOoG,cACTnG,GAAUD,EAAOoG,YAAcpG,EAAOoG,aAEpCpG,EAAOqG,aACTpG,GAAUnK,KAAKuS,IAAI,EAAGrI,EAAOqG,aAExBpG,EIwBoBqI,CAAQtR,EAAMmP,eACvCnP,EAAM0P,UAAU9N,KAAK5B,EAAM0I,UAAUwC,OACrClL,EAAM0P,UAAUa,SAElBgB,YAAa,SAACvR,GACZA,EAAM0I,UAAUwB,IJFb,SAAclB,GACnB,IAAIC,EAAQ,EAKZ,OAJID,EAAOE,WACTD,GAASD,EAAOE,UAGXD,EIJiBuI,CAAKxR,EAAMuP,YAC7BvP,EAAM0I,UAAUwB,IAAM,IACxBlK,EAAM7B,OAAS,aAInBsT,WAAY,SAACzR,EAAOE,GACdA,EAAOC,QAAQ8H,cAAgBjB,EAAUgB,UAAkC,aAAtBhI,EAAM0O,KAAKvQ,QAClE6B,EAAM0O,KAAKvQ,OAAS,QACpB6B,EAAM0O,KAAKC,QAAU,IACZzO,EAAOC,QAAQ8H,cAAgBjB,EAAUgB,UAAkC,WAAtBhI,EAAM0O,KAAKvQ,OACzE6B,EAAM0O,KAAKC,QAAU,GACZzO,EAAOC,QAAQ8H,cAAgBjB,EAAUsB,UAAkC,cAAtBtI,EAAM0O,KAAKvQ,QACzE6B,EAAM0O,KAAKvQ,OAAS,SACpB6B,EAAM0O,KAAKC,QAAU,IACZzO,EAAOC,QAAQ8H,cAAgBjB,EAAUsB,UAAkC,WAAtBtI,EAAM0O,KAAKvQ,OACzE6B,EAAM0O,KAAKC,QAAU,GACmB,eAA/BzO,EAAOC,QAAQ8H,aAAsD,WAAtBjI,EAAM0O,KAAKvQ,QACnE6B,EAAM0O,KAAKvQ,OAAS,WACpB6B,EAAM0O,KAAKC,QAAU,IACmB,eAA/BzO,EAAOC,QAAQ8H,aAAgCjI,EAAM6O,gBAAgB4B,MAAK,SAAAlQ,GAAC,OAAIA,EAAE0H,cAAgBjB,EAAUuB,eAAiBhI,EAAE4H,cAAoC,WAAtBnI,EAAM0O,KAAKvQ,SAChK6B,EAAM0O,KAAKvQ,OAAS,WACpB6B,EAAM0O,KAAKC,QAAU,IAEnB3O,EAAM0O,KAAKC,QAAU,IACvB3O,EAAM7B,OAAS,YAGnBuT,6BAA8B,SAAC1R,GAC7BA,EAAM7B,OAAS,cACfkS,cAAcrQ,EAAM4O,kBACpB5O,EAAM4O,iBAAmB+C,KAE3BC,uBAAwB,SAAC5R,GACvBA,EAAM7B,OAAS,oBACfkS,cAAcrQ,EAAM4O,kBACpB5O,EAAM4O,iBAAmB+C,KAE3BE,WAAY,SAAC7R,GACPA,EAAM6O,gBAAgB4B,MAAK,SAAAlQ,GAAC,OAAIA,EAAE0H,cAAgBjB,EAAUuB,eAAiBhI,EAAE4H,cAAoC,WAAtBnI,EAAM0O,KAAKvQ,QAA6C,UAAtB6B,EAAM0O,KAAKvQ,OAC5I6B,EAAM0I,UAAUwB,IAAM,EAEtBlK,EAAM0I,UAAUwB,IAAM,EAExBlK,EAAM0O,KAAKvQ,OAASsQ,GAAkB3P,KAAKsP,MAAMtP,KAAKG,SAAWwP,GAAkBlP,SAC/ES,EAAM0I,UAAUwB,IAAM,IACxBlK,EAAM7B,OAAS,aAInB2T,gBAAiB,SAAC9R,GAChBA,EAAM0O,KAAKC,QAAW,EAAI7P,KAAKG,SAC3Be,EAAM0O,KAAKC,QAAU,IACvB3O,EAAM7B,OAAS,YAGnB4T,YAAa,SAAC/R,GACRA,EAAMyJ,KAAK5J,OAASkH,EAASiG,UAC/BhN,EAAM7B,OAAS,aAInB6T,qBAAsB,SAAChS,EAAOE,GAC5BF,EAAM4O,iBAAmB1O,EAAOC,SAElC8R,uBAAwB,SAACjS,GACvBqQ,cAAcrQ,EAAM4O,kBACpB5O,EAAM4O,iBAAmB,GAE3BsD,qBAAsB,SAAClS,EAAOE,GAC5BE,QAAQC,IAAI,WACZL,EAAM4J,kBAAkBC,QAAQ3J,EAAOC,UAEzCgS,uBAAwB,SAACnS,GACvBA,EAAM4J,kBAAoB,IAE5BwI,QAAS,SAACpS,EAAOE,GACf,GAAIA,EAAOC,QAAQkS,KAAM,CACvB,IAAIA,EAAOrS,EAAM8O,MAAM,GACnBwD,EAAchR,YAAQ+Q,GAC1B,IAAKA,IAASC,GAAepS,EAAOC,QAAQkS,OAASC,EACnD,OAEF,IAAK9J,EAAkB8J,EAAY,GAAItS,EAAM0I,WAC3C,OAEF1I,EAAM0I,UAAYE,EAAgB0J,EAAY,GAAItS,EAAM0I,WACxD1I,EAAM0I,UJ7JP,SAAsBD,EAAYC,GACrC,IAAK,IAAIC,KAAKF,EACVC,EAAUC,IAAgCF,EAAKE,GAEnD,OAAOD,EIyJe6J,CAAaD,EAAY,GAAItS,EAAM0I,WACrD1I,EAAM8O,MAAMyB,UAGhBiC,UAAW,SAACxS,EAAOE,GACjB,IAAIuS,EAAOzS,EAAMyJ,KAAKtF,QAClBuO,EAAcpR,YAAQmR,GAC1B,GAAKA,GAASC,EAAd,CAIA,IAAIC,EAAgBD,EAAYjC,MAAK,SAAAlQ,GAAC,OAAIA,IAAML,EAAOC,QAAQyS,UAC1DD,GAGAnK,EAAkBmK,EAAclK,KAAMzI,EAAM0I,aAGjD1I,EAAM0I,UAAYE,EAAgB+J,EAAclK,KAAMzI,EAAM0I,WACZ,GAA5CiK,EAActH,YAAYlH,QAAQ5E,SACpCS,EAAM7B,OAAS,WAGjB6B,EAAMyJ,KAAOkJ,EAActH,eAI7BwH,QAAS,SAAC7S,EAAOE,GACf,GAAIA,EAAOC,QAAQ+K,MAAO,CACxB,IAAI2H,EAAU7S,EAAM4P,cAAca,MAAK,SAAAlQ,GAAC,OAAKA,EAAE,MAC3CuS,EAAiBxR,YAAQuR,GAC7B,IAAKA,IAAYC,GAAkB5S,EAAOC,QAAQ+K,QAAU4H,EAC1D,OAEF,IAAKtK,EAAkBsK,EAAe,GAAI9S,EAAM0I,WAE9C,YADAmK,EAAQ,IAAK,GAGf7S,EAAM6O,gBAAkB7O,EAAM6O,gBAAgBkE,OAAOD,EAAe,IACpE9S,EAAM0I,UAAYE,EAAgBkK,EAAe,GAAI9S,EAAM0I,WAC3D1I,EAAMmP,cJ9LP,SAA4BhI,EAAkB2B,GACjD,IAAK,IAAIpK,KAAKyI,EACVA,EAAEzI,GAAuByI,EAAEzI,GAAuBoK,EAAEpK,GAExD,OAAOyI,EI0LmB6L,CAAmBhT,EAAMmP,cAAe2D,EAAe,IAC7ED,EAAQ,IAAK,EAEf,GAAI3S,EAAOC,QAAQgL,IAAK,CACtB,IAAI0H,EAAU7S,EAAM6P,YAAYY,MAAK,SAAAlQ,GAAC,OAAKA,EAAE,MACzCuS,EAAiBxR,YAAQuR,GAC7B,IAAKA,IAAYC,GAAkB5S,EAAOC,QAAQgL,MAAQ2H,EACxD,OAEF,IAAKtK,EAAkBsK,EAAe,GAAI9S,EAAM0I,WAE9C,YADAmK,EAAQ,IAAK,GAGf7S,EAAM6O,gBAAkB7O,EAAM6O,gBAAgBkE,OAAOD,EAAe,IACpE9S,EAAM0I,UAAYE,EAAgBkK,EAAe,GAAI9S,EAAM0I,WAC3D1I,EAAM8J,YAAcjB,EAAiB7I,EAAM8J,YAAagJ,EAAe,IACvED,EAAQ,IAAK,EAEf,GAAI3S,EAAOC,QAAQiL,KAAM,CACvB,IAAIyH,EAAU7S,EAAM8P,aAAaW,MAAK,SAAAlQ,GAAC,OAAKA,EAAE,MAC1CuS,EAAiBxR,YAAQuR,GAC7B,IAAKA,IAAYC,GAAkB5S,EAAOC,QAAQiL,OAAS0H,EACzD,OAEF,IAAKtK,EAAkBsK,EAAe,GAAI9S,EAAM0I,WAE9C,YADAmK,EAAQ,IAAM,GAGhB7S,EAAM6O,gBAAkB7O,EAAM6O,gBAAgBkE,OAAOD,EAAe,IACpE9S,EAAM0I,UAAYE,EAAgBkK,EAAe,GAAI9S,EAAM0I,WAC3D1I,EAAMsP,aJ9MP,SAA2BnI,EAAiB2B,GAC/C,IAAK,IAAIpK,KAAKyI,EACVA,EAAEzI,GAAuByI,EAAEzI,GAAuBoK,EAAEpK,GAExD,OAAOyI,EI0MkB8L,CAAkBjT,EAAMsP,aAAcwD,EAAe,IAC1ED,EAAQ,IAAK,KAMnBrL,cAAe,SAACC,GACdA,EACGC,QAAQ6G,IAAsB,SAACvO,GAC9BA,EAAM7B,OAAS,gBAchB,OAAwV+R,GAAehO,QA4B/VgO,IA5BR,GAAQI,aAAR,GAAsBwB,gBAAtB,GAAuC1B,WAAvC,GAAmDsB,6BAAnD,GAAiFE,uBAAjF,GAAyGzB,UAAzG,GAAoH4B,YAApH,GAAiIN,WAAjI,GAA6II,WAA7I,GAAyJK,qBAAzJ,GAA+KC,uBAA/K,GAAuMf,eAAvM,GAAuND,cAAvN,GAAsOa,qBAAtO,GAA4PC,uBAA5P,GAAoRV,YAApR,GAAiSf,UAAjS,GAA4SU,WAA5S,GAAwTkB,QAAxT,GAAiUI,UAAjU,GAA4UK,QA4BpU3C,GAAf,SCzYMgD,GAAiBC,aAAaC,QAAQ,cACnBjS,KAAKC,MAAM+R,aAAaC,QAAQ,eAAiB,MACjD,GACtBF,IAAkBA,GAAeG,WAAaH,GAAeG,UAAUlV,QAA8C,YAApC+U,GAAeG,UAAUlV,SAC1G+U,GAAeG,UAAUlV,OAAS,SAE9B,IAAMmV,GAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,EACTL,UAAWM,GACXC,SAAUC,GACVzR,QAAS0R,GAEXC,eAAgBb,KAGlBI,GAAMU,WAAU,WACdb,aAAac,QAAQ,aAAc9S,KAAKE,UAAUiS,GAAMY,gBCdtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5D,MACvB,2DCPN6D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUnB,MAAOA,GAAjB,SACI,cAAC,EAAD,QAGNoB,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN/U,QAAQ+U,MAAMA,EAAMC,c","file":"static/js/main.42d06721.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Farming_row__3F5tY\",\"value\":\"Farming_value__2vtaD\",\"button\":\"Farming_button__3edmD\",\"textbox\":\"Farming_textbox__219dn\",\"asyncButton\":\"Farming_asyncButton__pDz8e Farming_button__3edmD\",\"buttonThermite\":\"Farming_buttonThermite__1ZXsW\",\"greenInactive\":\"Farming_greenInactive__wywNz\",\"blueInactive\":\"Farming_blueInactive__1cpj0\",\"redInactive\":\"Farming_redInactive__AwjGf\",\"greenActive\":\"Farming_greenActive__-odSk\",\"blueActive\":\"Farming_blueActive__32hG-\",\"redActive\":\"Farming_redActive__2R1kz\",\"optimal\":\"Farming_optimal__1UIra\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk, createSlice, PayloadAction, current } from '@reduxjs/toolkit';\nimport { stat } from 'fs';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface FarmingState {\n  grid: Array<Array<number>>;\n  status: 'idle' | 'starting' | 'started' | 'finished';\n  score: number;\n  maxScore: number;\n  enabled: boolean;\n}\n\nconst initialState: FarmingState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(),\n  status: 'idle',\n  score: 0,\n  maxScore: 20,\n  enabled: false\n};\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nfunction initializeGrid(){\n  let n = 3\n  let randomGrid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => getRandomIntInclusive(1,3)))\n  return randomGrid\n}\nexport interface BruteforceSolution {\n  coords: Array<Array<number>>;\n  maxScore: number;\n}\n\ninterface gridParams {\n  gridLength: number;\n  coordChoices: Array<Array<number>>;\n  choiceCount: number;\n  grid?: Array<Array<number>>\n}\n\nlet threeByThreeGrid: gridParams = {\n  gridLength: 3,\n  choiceCount: 3,\n  coordChoices: [[0,0], [0,1], [0,2], [1,0],[2,0],[1,1], [2,1],[1,2],[2,2]]\n}\nlet fourByFourGrid: gridParams = {\n  gridLength: 4,\n  choiceCount: 4,\n  coordChoices: [[0,0], [0,1], [0,2], [0,3], [1,0],[2,0], [3,0], [1,1], [2,1], [3,1], [1,2],[2,2], [3,2], [3,3],]\n}\n\nfunction bruteForce(grid): BruteforceSolution{\n  let coordChoices = {1: [0,0], 2: [0,1], 3: [0,2], 4: [1,0], 5:[2,0], 6:[1,1], 7:[2,1],8:[1,2], 9:[2,2]}\n  let gridCopy1 = deactivateGrid(JSON.parse(JSON.stringify(current(grid))))\n  let curr: Array<BruteforceSolution> = []\n  let scores = [0]\n  for(let i = 1; i <= 9; i++){\n    for(let j = i+1; j <= 9; j++){\n      for(let k = j+1; k <= 9; k++){\n        let gridCopy =JSON.parse(JSON.stringify(gridCopy1))\n        activateGridCoords(gridCopy, coordChoices[i])\n        activateGridCoords(gridCopy, coordChoices[j])\n        activateGridCoords(gridCopy, coordChoices[k])\n        let score = calculateScore(gridCopy)\n        let coords1 = [coordChoices[i], coordChoices[j], coordChoices[k]]\n        curr.push({coords:coords1, maxScore:score})\n        scores.push(score)\n      }\n    }\n  }\n  let maxCoord = [[0]]\n  let maxScore = 0\n  for(let x of curr){\n    if(x.maxScore > maxScore){\n      maxCoord = x.coords\n      maxScore = x.maxScore\n    }\n  }\n\n  return {coords: maxCoord, maxScore: maxScore}\n}\n\nfunction calculateScore(grid){\n  let score = 0;\n  let baseScores = {4: 3, 5: 2, 6: 1}\n\n\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[0].length; j++){\n      let base = baseScores[grid[i][j]] || 0\n      if(base === 0){\n        continue;\n      }\n      if((i - 1 >= 0 && grid[i - 1][j] === 5) || (i + 1 < grid.length && grid[i + 1][j] === 5)){\n        base = base + 1\n      }\n      if((i - 1 >= 0 && j - 1 >= 0 && grid[i - 1][j- 1] === 6 )  \n      || (i - 1 >= 0 && j + 1 <= grid[0].length && grid[i - 1][j + 1] === 6 )  \n      || (i + 1 < grid.length && j - 1 >= 0 && grid[i + 1][j - 1] === 6 )  \n      || (i + 1 < grid.length && j + 1 < grid[0].length && grid[i + 1][j + 1] === 6)){\n        base = base + 1\n      }\n      if((j - 1 >= 0 && grid[i][j - 1] === 4) || (j + 1 < grid[0].length && grid[i][j + 1] === 4)){\n        base = 0\n      }\n      score = score + base\n    }\n  }\n\n  return score;\n}\n\nfunction activateGridCoords(grid, coords){\n  switch(grid[coords[0]][coords[1]]) {\n    case 1: grid[coords[0]][coords[1]] = 4; break;\n    case 2: grid[coords[0]][coords[1]] = 5; break;\n    case 3: grid[coords[0]][coords[1]] = 6; break;\n    case 4: grid[coords[0]][coords[1]] = 1; break;\n    case 5: grid[coords[0]][coords[1]] = 2; break;\n    case 6: grid[coords[0]][coords[1]] = 3; break;\n  }\n  return grid\n}\n\nfunction deactivateGrid(grid){\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[0].length; j++){\n      switch(grid[i][j]) {\n        case 4: grid[i][j] = 1; break;\n        case 5: grid[i][j] = 2; break;\n        case 6: grid[i][j] = 3; break;\n        default: break;\n      }\n    }\n  }\n  \n  return grid\n}\n\nexport const farmingSlice = createSlice({\n  name: 'farming',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n\n      //state.value += 1;\n    },\n    activateCell: (state, action) => {\n      let coords = action.payload;\n      console.log(coords)\n      //let coords = [0,2]\n      state.grid = activateGridCoords(state.grid, coords)\n      console.log('test')\n      if(state.grid.flatMap(x => x).filter(x => x >= 4 && x <=6).length === 3){\n        state.status = 'finished'\n        state.score = calculateScore(state.grid)\n        let bruteForceSolution = bruteForce(state.grid)\n        state.maxScore = bruteForceSolution.maxScore\n        console.log('coords: ' + bruteForceSolution.coords)\n        if(state.score === state.maxScore){\n          state.grid = state.grid.map(x => x.map(y => y > 3 ? y + 6 : y))\n        } else {\n          state.grid[bruteForceSolution.coords[0][0]][bruteForceSolution.coords[0][1]] += 6\n          state.grid[bruteForceSolution.coords[1][0]][bruteForceSolution.coords[1][1]] += 6\n          state.grid[bruteForceSolution.coords[2][0]][bruteForceSolution.coords[2][1]] += 6\n        }\n      }\n      //state.value += 1;\n    },\n    startGrid: (state) => {\n      console.log('yes')\n      state.status = 'starting'\n      state.grid = initializeGrid()\n    },\n    enableButtons: (state) => {\n      console.log('yes')\n      state.status = 'started'\n    },\n\n  },\n});\n\nexport const {startGrid, activateCell, enableButtons, } = farmingSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectGrid = (state: RootState) => state.farming.grid\nexport const selectStatus = (state: RootState) => state.farming.status;\nexport const selectScore = (state: RootState) => state.farming.score;\nexport const selectMaxScore = (state: RootState) => state.farming.maxScore;\n\n\nexport default farmingSlice.reducer;\n","import React, { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  selectGrid,\n  activateCell,\n  enableButtons,\n  selectStatus,\n  startGrid,\n  selectScore,\n  selectMaxScore\n} from './farmingSlice';\nimport styles from './Farming.module.css';\n\nexport function Farming() {\n  const grid = useAppSelector(selectGrid);\n  const score = useAppSelector(selectScore);\n  const maxScore = useAppSelector(selectMaxScore);\n  const status = useAppSelector(selectStatus);\n  const dispatch = useAppDispatch();\n \n\n\n  function getButtonStyle(cellValue, enabledButtons) {\n    if (status === 'idle') {\n      return styles.button;\n    }\n    if(cellValue > 6){\n      cellValue -= 6;\n      switch (cellValue) {\n        case 0: return styles.button + ' ' + styles.optimal;\n        case 1: return styles.greenInactive+ ' ' + styles.optimal;\n        case 2: return styles.blueInactive+ ' ' + styles.optimal;\n        case 3: return styles.redInactive+ ' ' + styles.optimal;\n        case 4: return styles.greenActive+ ' ' + styles.optimal;\n        case 5: return styles.blueActive+ ' ' + styles.optimal;\n        case 6: return styles.redActive+ ' ' + styles.optimal;\n        \n  \n      }\n    }\n    switch (cellValue) {\n      case 0: return styles.button;\n      case 1: return styles.greenInactive;\n      case 2: return styles.blueInactive;\n      case 3: return styles.redInactive;\n      case 4: return styles.greenActive;\n      case 5: return styles.blueActive;\n      case 6: return styles.redActive;\n      \n\n    }\n  }\n\n  function runLoop() {\n    console.log('loop')\n    setTimeout(() => dispatch(startGrid()), 100);\n    setTimeout(() => dispatch(enableButtons()), 100);\n  }\n\n  function getBoard() {\n    switch (status) {\n      case 'idle': return (<div>\n        <div className={styles.row}>\n        <button className={styles.button}\n        style={{'backgroundColor': 'goldenrod', color:'white'}}\n          onClick={runLoop\n          }\n\n        >Start</button>\n        </div>\n        {grid && grid.map((row, i) => {\n          return (<div className={styles.row}>\n            {row.map((cell, j) =>\n            (<button disabled={true} className={getButtonStyle(cell, status)}\n\n\n            >O</button>)\n            )\n            }\n\n          </div>\n          )\n        })}\n\n\n\n      </div>);\n      case 'starting':\n      case 'started': \n      case 'finished': return (\n        <div>\n\n          {grid && grid.map((row, i) => {\n            return (<div className={styles.row}>\n              {row.map((cell, j) =>\n              (<button disabled={status === 'finished'} className={getButtonStyle(cell, status)}\n                onClick={() => dispatch(activateCell([i, j]))}\n\n              >O</button>)\n              )\n              }\n\n            </div>\n            )\n          })}\n\n\n\n        </div>\n      )\n\n    }\n  }\n\n\n  return (\n    <div>\n      <h3 style={{ 'color': 'rgb(222, 222, 222)'  }}>Mushroom Minigame</h3>\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Red mushrooms give 1 point and add 1 point to active diagonal mushrooms</span><br/>\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Green mushrooms give 3 point and set active mushrooms to the left and right to 0 points</span><br/>\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Blue mushrooms give 2 points and add 1 point to active mushrooms above and below them</span><br/>\n      <br />\n      {getBoard()}\n      {status === 'finished' && (<div><span style={{'color':'rgb(255, 255, 255)'}}>Your Score:{score}</span>\n      <br/>\n      <span style={{'color':'rgb(255, 255, 255)'}}>Max Possible Score:{maxScore}</span>\n      <div className={styles.row}>\n      <button className={styles.button}\n      style={{'backgroundColor': 'goldenrod', color:'white'}}\n        onClick={runLoop\n        }\n\n      >Start</button>\n      </div>\n      </div>)\n      }\n    </div>\n  );\n}\n\n//{status === 'started' && <img src='./timeout_bar.svg' className=\"App-logo\" alt=\"logo\" />}","import React from 'react';\nimport logo from './Beetle.png';\nimport { CYOA } from './features/gameState/CYOA';\nimport { Draft } from './features/gameState/Draft';\nimport { GameOver } from './features/gameState/GameOver';\nimport { TechTree } from './features/gameState/TechTree';\nimport { Maze } from './features/maze/Maze';\nimport { Thermite } from './features/thermite_bossfight/Thermite'\nimport { Farming } from './features/farming_minigame/Farming'\nimport './App.css';\nimport Particles from \"react-tsparticles\";\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Particles\n      id=\"tsparticles\"\n      options={{\n        fullScreen: {\n          enable: true,\n          zIndex: 0\n        },\n        background: {\n          color: {\n            value: \"rgb(147,70,17)\",\n          },\n          \n          opacity: 0.01\n        },\n        fpsLimit: 60,\n        interactivity: {\n          detectsOn: \"canvas\",\n          modes: {\n            bubble: {\n              distance: 400,\n              duration: 2,\n              opacity: 0.2,\n              size: 10,\n            }, \n          },\n        },\n        particles: {\n          color: {\n            value: [\n              \"#921212\",\n              \"#9e1b3e\",\n              \"#c3711a\",\n              \"#ff6b00\"\n            ]\n\n          },\n        \n          collisions: {\n            enable: false,\n          },\n          move: {\n            direction: \"none\",\n            enable: true,\n            outMode: \"out\",\n            random: true,\n            speed: 4,\n            straight: false,\n          },\n          number: {\n            density: {\n              enable: true,\n              value_area: 800,\n            },\n            value: 8,\n          },\n          opacity: {\n            value: 0.5,\n          },\n          shape: {\n            type: [\"polygon\", \"circle\"],\n          },\n          size: {\n            random: true,\n            value: 5,\n          },\n          rotate: {\n            direction: \"clockwise\",\n            animation: {\n              enable: true,\n              speed: 8\n            }\n          },\n          zIndex: {\n            opacityRate: 0.2,\n            sizeRate: 0.5\n          }\n        },\n        detectRetina: true,\n      }}\n      \n      >\n        </Particles>\n      <header className=\"App-header\" >\n      \n        \n        <div style={{zIndex: 1, backgroundColor: 'rgba(85, 85, 85, 0.3)'}}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"150px\" width=\"150px\" fill=\"#b2b2b2\" viewBox=\"0 0 64 64\" x=\"0px\" y=\"0px\"><path d=\"M19.631,36.864A1,1,0,0,0,20.369,35c-.06-.023-.117-.05-.177-.074L21.9,24.688c.363.027.721.053,1.088.083-.13,10.067-2.308,23.656-3.627,31A7,7,0,0,0,26.252,64H39.238a6.994,6.994,0,0,0,6.935-7.953c-.378-2.729-1.417-9.59-3.2-17.076,4.679-.153,17.295-1.063,20.864-6.416a1,1,0,0,0,.155-.714C63.936,31.522,58.521,0,30,0,1.376,0,.012,22.725,0,22.955a1,1,0,0,0,.26.718A57.524,57.524,0,0,0,19.631,36.864ZM16.6,24.341l-2.129,7.808c-1.055-.6-2.058-1.215-3.006-1.837L14.5,24.236C15.181,24.267,15.881,24.3,16.6,24.341Zm-6.8,4.836q-1.236-.874-2.3-1.713l2.043-3.406c.876.023,1.8.051,2.779.087ZM5.914,26.2c-1.009-.843-1.851-1.6-2.511-2.222,1,0,2.288,0,3.826.031ZM18.3,34.115c-.692-.316-1.365-.647-2.025-.987l2.363-8.668c.412.025.838.056,1.258.084ZM34.878,24.046c-3.389-.462-6.71-.824-9.872-1.1a5,5,0,1,1,9.872,1.1Zm8.135,36.237A5,5,0,0,1,39.238,62H26.252a4.994,4.994,0,0,1-4.923-5.873c1.323-7.372,3.5-20.987,3.656-31.185,3.855.343,7.945.809,12.1,1.433,4.258,10.944,6.515,25.644,7.111,29.946A4.983,4.983,0,0,1,43.013,60.283Zm-3.657-33.55c.648.107,1.3.216,1.944.331l3.278,9.83c-.737.043-1.439.072-2.1.088A102.933,102.933,0,0,0,39.356,26.733ZM56,30.545v4.529c-.644.2-1.313.373-2,.534V29.95Q55.008,30.24,56,30.545Zm-4,5.479c-.378.07-.755.135-1.136.2l-1.5-7.488q1.328.318,2.634.665ZM47.228,28.24,48.881,36.5c-.759.094-1.51.174-2.246.239l-3.089-9.266Q45.4,27.832,47.228,28.24ZM58,34.368V31.191c1.133.383,2.235.794,3.319,1.219A11.188,11.188,0,0,1,58,34.368ZM54.939,15.051a42.8,42.8,0,0,1,4.619,8.694,4.994,4.994,0,0,1-4.619-8.694ZM39.586,3.422A27.9,27.9,0,0,1,49.964,9.363,6,6,0,0,1,39.586,3.422Zm-1.945-.537A7.993,7.993,0,0,0,51.417,10.77a33.082,33.082,0,0,1,2.332,2.673,6.99,6.99,0,0,0,6.509,12.174,46.755,46.755,0,0,1,1.393,4.774,118.874,118.874,0,0,0-24.78-6.062,7,7,0,1,0-13.86-1.556c-9.971-.8-18.032-.815-20.9-.788A22.525,22.525,0,0,1,3.723,16.3,7.994,7.994,0,0,0,15,9a7.872,7.872,0,0,0-.906-3.682C18,3.331,23.163,2,30,2A32.564,32.564,0,0,1,37.641,2.885ZM12.348,6.3A5.993,5.993,0,0,1,4.6,14.5,21.6,21.6,0,0,1,12.348,6.3Z\"/><path d=\"M26.918,48.034a1.006,1.006,0,0,0-1.225.707,12.368,12.368,0,0,1-.588,1.812,1,1,0,0,0,1.79.894,12.993,12.993,0,0,0,.73-2.188A1,1,0,0,0,26.918,48.034Z\"/><path d=\"M27.758,30.03a1,1,0,0,0-.728,1.213c.009.038.942,3.887-.02,10.616q-.153,1.065-.3,1.978a1,1,0,0,0,.823,1.15,1.034,1.034,0,0,0,.164.013,1,1,0,0,0,.986-.837c.1-.623.207-1.3.31-2.021,1.016-7.113.023-11.213-.02-11.385A1,1,0,0,0,27.758,30.03Z\"/><path d=\"M33.341,46.92a1,1,0,0,0-1.28.6,11.342,11.342,0,0,1-.918,1.964,1,1,0,1,0,1.714,1.03A13.1,13.1,0,0,0,33.941,48.2,1,1,0,0,0,33.341,46.92Z\"/><path d=\"M33.876,36.008a1,1,0,0,0-.868,1.116,29.669,29.669,0,0,1,0,6.032,1,1,0,0,0,.889,1.1.955.955,0,0,0,.106.006,1,1,0,0,0,.993-.9,31.242,31.242,0,0,0,0-6.491A1,1,0,0,0,33.876,36.008Z\"/><path d=\"M37.01,44.142l1,7a1,1,0,1,0,1.98-.284l-1-7a1,1,0,0,0-1.98.284Z\"/><path d=\"M61,53c0-.964-.123-9.459-4.4-10.978-2.728-.969-6.12,1.109-10.375,6.348a1,1,0,0,0-.119,1.077c.14.278,1.055,1.838,4.146,3.056a33.757,33.757,0,0,1-.8,8.963,1.963,1.963,0,0,0,.327,1.734,2,2,0,0,0,1.605.8h4.6a1.978,1.978,0,0,0,1.434-.609,2.033,2.033,0,0,0,.565-1.478,51.524,51.524,0,0,0-1.064-8.036C57.867,53.95,58.878,54,60,54A1,1,0,0,0,61,53Zm-5.02,9-4.608.015a35.888,35.888,0,0,0,.9-8.865,23.808,23.808,0,0,0,2.557.506A50.855,50.855,0,0,1,55.98,62ZM48.289,49.01c4.389-5.216,6.662-5.449,7.64-5.1,2.171.77,2.885,5.49,3.038,8.081C51.986,51.815,49.219,49.917,48.289,49.01Z\"/></svg>\n        <Farming />\n        </div>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","\nconst pd = require('probability-distributions');\n\nexport interface CYOAOption {\n    description?: string;\n    title?: string;\n    action?: string;\n    image?: String;\n    cost: Cost;\n    destination: Room;\n    statuses: Array<StructureStatus>;\n}\n\nexport interface QuestStep {\n    options: Array<CYOAOption>;\n    active: boolean;\n}\n\nexport interface GreenFnParams {\n    linearP1: number;\n    quadraticP1: number;\n    twoPowerP1: number;\n}\n\nexport interface BlueFnParams {\n    normalP1: number;\n    normalP2: number;\n}\n\nexport interface RedFnParams  {\n    linearP1: number;\n}\n\n\nexport interface HPFnParams  {\n    linearP1: number;\n}\n\n\nexport interface Spell {\n    description: SpellList;\n    cooldown?: number;\n    available: boolean;\n}\n\n\nexport type GSResourceName = \"red\" | \"blue\" | \"green\" | \"hp\";\nexport type GameStatus = \"ready\" | \"started\" | \"victory\" | \"tgBossFight\" | \"thermiteBossFight\" | \"gameOver\" ;\nexport type StructureStatus = \"burnt\" | \"frozen\" | \"flourishing\";\n\n\nexport enum RoomList {\n    Desert = \"Desert\",\n    Volcano = \"Volcano\",\n    TempleRuins = \"Temple Ruins\",\n    TempleGuardian = \"Temple Guardian\",\n    Unknown = \"Unknown\",\n    Jungle = \"Jungle\",\n    Cave = \"Cave\",\n    Moon = \"Moon\",\n    Sandstorm = \"Sandstorm\",\n    Rabbit = \"Rabbit\",\n    Oasis = \"Oasis\",\n    Treasure = \"Treasure\",\n    Boulder = \"Boulder\",\n    TreeTops = \"Tree Tops\",\n    Monsters = \"Monsters\",\n    FungalColony = \"Fungal Colony\",\n    LavaFlow = \"Lava Flow\",\n    CrumblingBridge=\"Crumbling Bridge\",\n    TrappedInsect=\"Trapped Insect\",\n    Wastes=\"Wastes\",\n    Lost=\"Lost\",\n    IceChamber=\"Ice Chamber\",\n    MagmaWaterfall=\"Magma Waterfall\",\n    StatueRoom=\"Statue Room\",\n    GraniteRaft=\"Granite Raft\",\n    CageTrap=\"Cage Trap\",\n    VolcanoBoss=\"Volcano Boss\",\n    Altar=\"Altar\",\n    ObsidianHallway=\"Obsidian Hallway\",\n}\n\n\nexport enum SpellList {\n    Fireball = \"Fireball\",\n    FrostRay = \"Frost Ray\",\n    Heal = \"Heal\",\n    CommuneWithPlants = \"Commune with Plants\",\n    SpectralRope = \"Spectral Rope\"\n}\n\nexport type Cost = Record<GSResourceName, number>\nexport type ResourceBonus = Record<GSResourceName, number>\n\nexport const spells1 = {\n  Fireball: { description: SpellList.Fireball, cooldown: 20000, available: true, },\n  CommuneWithPlants: { description: SpellList.CommuneWithPlants, cooldown: 3000, available: true },\n  Heal:   { description: SpellList.Heal, cooldown: 5000, available: true},\n  FrostRay:   { description: SpellList.FrostRay, cooldown: 5000,  available: true, },\n  SpectralRope:  { description: SpellList.SpectralRope, cooldown: 5000, available: true, }\n}\n\nexport interface Room {\n    statuses: Array<StructureStatus>;\n    options: Array<CYOAOption>;\n    name: RoomList;\n  }\n\nexport function isCostSatisfiable(cost: Cost, resources: Record<GSResourceName, number>): boolean {\n    for (let c in cost) {\n        if (cost[c as keyof typeof cost] > resources[c as keyof typeof resources]) return false\n    }\n    return true\n}\n\nexport function removeResources(cost: Cost, resources: Record<GSResourceName, number>) {\n    for (let c in cost) {\n        resources[c as keyof typeof resources] -= cost[c as keyof typeof cost]\n    }\n    return resources\n}\n\nexport function addResources(cost: Cost, resources: Record<GSResourceName, number>) {\n    for (let c in cost) {\n        resources[c as keyof typeof resources] += cost[c as keyof typeof cost]\n    }\n    return resources\n}\n\nexport function combineGreenParams(a: GreenFnParams, b: GreenFnParams): GreenFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\nexport function combineRedParams(a: RedFnParams, b: RedFnParams): RedFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\nexport function combineBlueParams(a: BlueFnParams, b: BlueFnParams): BlueFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\n\n\nexport function greenFn(params: GreenFnParams) {\n    let total = 0.0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n    if (params.quadraticP1) {\n      total += (params.quadraticP1 * params.quadraticP1)\n    }\n    if (params.twoPowerP1) {\n      total += (Math.pow(2, params.twoPowerP1))\n    }\n    return total\n  }\n  \n  \n  export function redFn(params: RedFnParams) {\n    let total = 0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n  \n    return total\n  }\n  \n  \n  \n  \n  export function blueFn(params: BlueFnParams) {\n    let total = 0.0\n    if (params.normalP1 > 0 && params.normalP2 > 0) {\n      total += Math.max(0, pd.rnorm(1,params.normalP1, params.normalP2))\n    }\n  \n    return total\n  }\n  \n  \n  \n  export function hpFn(params: HPFnParams) {\n    let total = 0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n  \n    return total\n  }","import { Cost, ResourceBonus } from './Types'\nfunction shuffle<T>(a: Array<T>): Array<T> {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nexport let Item: [Cost, ResourceBonus]\n\nexport function initializeTier1(): Array<typeof Item> {\n    let itemsTier1: Array<ResourceBonus> = [\n        { green: 0, red: 0, blue: 1, hp: 0 },\n        { green: 0, red: 19, blue: 0, hp: 0 },\n        { green: 42, red: 0, blue: 0, hp: 0 },\n        { green: 66, red: 0, blue: 0, hp: 0 },\n        { green: 20, red: 20, blue: 0, hp: 0 },\n        { green: 7, red: 2, blue: 0, hp: 10 },\n    ]\n\n    let costsTier1: Array<Cost> = [\n        { green: 65, red: 0, blue: 0, hp: 0 },\n        { green: 87, red: 0, blue: 0, hp: 0 },\n        { green: 123, red: 0, blue: 0, hp: 0 },\n        { green: 198, red: 0, blue: 0, hp: 0 },\n        { green: 270, red: 0, blue: 0, hp: 0 },\n        { green: 1033, red: 0, blue: 0, hp: 0 },\n    ]\n\n    itemsTier1 = shuffle(itemsTier1)\n    let items: Array<typeof Item> = []\n    for (let i in costsTier1) {\n        items.push([costsTier1[i], itemsTier1[i]]);\n    }\n    return items\n}\n\nlet itemsTier2: Array<ResourceBonus> = [\n    { green: 0, red: 0, blue: 104, hp: 0 },\n    { green: 0, red: 290, blue: 0, hp: 0 },\n    { green: 4255, red: 0, blue: 0, hp: 0 },\n    { green: 660, red: 0, blue: 0, hp: 24 },\n    { green: 808, red: 935, blue: 0, hp: 0 },\n    { green: 7, red: 2, blue: 0, hp: 0 },\n]\n\n","import { QuestStep, combineRedParams, StructureStatus, Room, RoomList, SpellList } from './Types'\nimport { match, __, not, select, when } from 'ts-pattern';\nimport { GameState } from './gameStateSlice';\nimport {Draft } from '@reduxjs/toolkit';\n\n\n\n\nexport function jungleRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball && !state.room.statuses.includes('burnt')) {\n        state.room.statuses.push('burnt');\n        state.redFnParams = combineRedParams({ linearP1: 3 }, state.redFnParams)\n        state.combatLogMessages.unshift('You feed on the energy from the withering vines')\n    } else if (spell.description === SpellList.CommuneWithPlants && !state.room.statuses.includes('burnt')) {\n        state.combatLogMessages.unshift('Vines sway in sync and you hear a whisper \"Seek the golden slug\"')\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function caveRoomInteraction(state, spell) {\n    if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('Water freezes into a path to the far wall')\n    } else if (spell.description === SpellList.SpectralRope && state.room.statuses.includes('frozen')) {\n        state.combatLogMessages.unshift('You climb in to a narrow fissure, revealing a the Moon Door')\n        state.room.options.push(moonDoor);\n    } else if (spell.description === SpellList.CommuneWithPlants && !state.room.statuses.includes('burnt')) {\n        state.combatLogMessages.unshift('A phosphorescent mushroom breathes in and lets out a puff of spores in the shape of a bridge and rope')\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function desertRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball) {\n        state.combatLogMessages.unshift('Molten glass sinks in to the sand')\n    } else if (spell.description === SpellList.CommuneWithPlants ) {\n        state.combatLogMessages.unshift('Wails from the void echo in your head. You stumble and fall to your knees')\n        state.resources.hp -= 10;\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function treeTopsRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball) {\n        state.combatLogMessages.unshift('Leaves crackle and crumple but the trees stand strong')\n    } else if (spell.description === SpellList.CommuneWithPlants ) {\n        state.combatLogMessages.unshift('Trees lean slightly to the left')\n    } else if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('Branches shrink back, revealing the Rabbit Door')\n        state.room.options.push(rabbitDoor); \n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function rabbitRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball ) {\n        state.room.statuses.push('burnt');\n        state.combatLogMessages.unshift('Charred remains litter the floor. Rocks begin to fall from the ceiling')\n        state.resources.hp -= 10;\n        //Add hpFn params for faster reduction for the rest of the round\n    } else if (spell.description === SpellList.Heal ) {\n        state.combatLogMessages.unshift('The rabbit leaps around the room with great vigor. You feel energized just watching it.')\n        //TODO: More lore\n        //TODO: more, maybe better greenFnParams, \n    } else if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen') && !state.room.statuses.includes('burnt')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('You enrage the rabbit. It lunges at you, biting your index finger off, then bounces away')\n    } else if (spell.description === SpellList.SpectralRope) {\n        state.combatLogMessages.unshift('You lower a rope through a crack in the floor, giving you a better avenue to proceed')\n        state.room.options.push(ropeMonsterDoor)\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function monstersRoomInteraction(state, spell) {\n    \n}\n\nexport function boulderDodgeRoomInteraction(state, spell) {\n    state.combatLogMessages.unshift('No effect')\n}\n\n\nexport function desertDoorInteraction(state, spell) {\n    if (spell.type === 'Fireball') {\n        state.combatLogMessages.unshift('Flames dance across the sand haplessly');\n    } else {\n        state.combatLogMessages.unshift('No effect');\n    }\n}\nexport function monstersDoorInteraction(state: Draft<GameState>, spell) {\n    if (spell.description === SpellList.Fireball || spell.description === SpellList.FrostRay ) {\n        state.room.statuses.push('burnt');\n\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] / 2\n            }\n        })\n        state.combatLogMessages.unshift('You batter the monsters with your magic');\n\n    } else if ( spell.description === SpellList.FrostRay ) {\n        state.room.statuses.push('frozen');\n\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] / 2\n            }\n        })\n        state.combatLogMessages.unshift('You batter the monsters with your magic');\n\n    } else if (spell.description === 'Heal' ) {\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] * 2\n            }\n        })\n        state.combatLogMessages.unshift('Your magic empowers the monsters');\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function getRoomInteractions(room: RoomList) {\n    return match(room)\n    .with(RoomList.Jungle,() => jungleRoomInteraction)\n    .with(RoomList.Cave, () =>caveRoomInteraction)\n    .with(RoomList.Desert,() => desertRoomInteraction)\n    .with(RoomList.Boulder, () =>boulderDodgeRoomInteraction)\n    .with(RoomList.Monsters,() => monstersRoomInteraction)\n    .with(RoomList.TreeTops,() => treeTopsRoomInteraction)\n    .with(RoomList.Rabbit,() => rabbitRoomInteraction)\n    .with(RoomList.FungalColony,() => EmptyFn)\n    .with(RoomList.Treasure,() => EmptyFn)\n    .with(RoomList.Moon,() => EmptyFn)\n    .with(RoomList.Oasis,() => EmptyFn)\n    .with(RoomList.Volcano,() => EmptyFn)\n    .with(RoomList.Unknown,() => EmptyFn)\n    .with(RoomList.TempleRuins,() => EmptyFn)\n    .with(RoomList.TempleGuardian,() => EmptyFn)  \n    .with(RoomList.Sandstorm,() => EmptyFn)\n    .with(RoomList.LavaFlow ,() => EmptyFn)\n    .with(RoomList.CrumblingBridge,() => EmptyFn)\n    .with(RoomList.TrappedInsect,() => EmptyFn)\n    .with(RoomList.Wastes,() => EmptyFn)\n    .with(RoomList.Lost,() => EmptyFn)\n    .with(RoomList.IceChamber,() => EmptyFn)\n    .with(RoomList.MagmaWaterfall,() => EmptyFn)\n    .with(RoomList.StatueRoom,() => EmptyFn)\n    .with(RoomList.GraniteRaft,() => EmptyFn)\n    .with(RoomList.CageTrap,() => EmptyFn)\n    .with(RoomList.VolcanoBoss,() => EmptyFn)\n    .with(RoomList.Altar,() => EmptyFn)\n    .with(RoomList.ObsidianHallway,() => EmptyFn)\n    .exhaustive()\n}\n\nexport function getDoorInteractions(room: RoomList){\n    return match(room)\n    .with(RoomList.Jungle,() => EmptyFn)\n    .with(RoomList.Cave,() => EmptyFn)\n    .with(RoomList.Desert,() => EmptyFn)\n    .with(RoomList.Boulder,() => monstersDoorInteraction)\n    .with(RoomList.Monsters,() => EmptyFn)\n    .with(RoomList.TreeTops,() => EmptyFn)\n    .with(RoomList.Rabbit,() => EmptyFn)\n    .with(RoomList.FungalColony, () =>EmptyFn)\n    .with(RoomList.Treasure, () =>EmptyFn)\n    .with(RoomList.Moon,() => EmptyFn)\n    .with(RoomList.Oasis,() => EmptyFn)\n    .with(RoomList.Volcano,() => EmptyFn)\n    .with(RoomList.Unknown,() => EmptyFn)\n    .with(RoomList.TempleRuins,() => EmptyFn)\n    .with(RoomList.TempleGuardian,() => EmptyFn)\n    .with(RoomList.Sandstorm,() => EmptyFn)\n    .with(RoomList.LavaFlow ,() => EmptyFn)\n    .with(RoomList.CrumblingBridge,() => EmptyFn)\n    .with(RoomList.TrappedInsect,() => EmptyFn)\n    .with(RoomList.Wastes,() => EmptyFn)\n    .with(RoomList.Lost,() => EmptyFn)\n    .with(RoomList.IceChamber,() => EmptyFn)\n    .with(RoomList.MagmaWaterfall,() => EmptyFn)\n    .with(RoomList.StatueRoom,() => EmptyFn)\n    .with(RoomList.GraniteRaft,() => EmptyFn)\n    .with(RoomList.CageTrap,() => EmptyFn)\n    .with(RoomList.VolcanoBoss,() => EmptyFn)\n    .with(RoomList.Altar,() => EmptyFn)\n    .with(RoomList.ObsidianHallway,() => EmptyFn)\n    .exhaustive()\n}\n\nfunction EmptyFn(state, spell) {\n    \n}\n\nexport let FakeRoom: Room = {\n    name: RoomList.Cave,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let treasureRoom: Room = {\n    name: RoomList.Treasure,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let volcanoBossFightRoom: Room = {\n    name: RoomList.VolcanoBoss,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.VolcanoBoss, action: \"Challenge the Volcano Boss\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let cageTrapRoom: Room = {\n    name: RoomList.CageTrap,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.VolcanoBoss, action: \"Challenge the Volcano Boss\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: volcanoBossFightRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let graniteRaftRoom: Room = {\n    name: RoomList.GraniteRaft,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.CageTrap, action: \"Drift aimlessly\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: cageTrapRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let trappedInsectRoom: Room = {\n    name: RoomList.TrappedInsect,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.GraniteRaft, action: \"Ride the granite raft\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: graniteRaftRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let altarRoom: Room = {\n    name: RoomList.TrappedInsect,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TrappedInsect, action: \"Move ahead into the darkness\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: trappedInsectRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let obsidianHallway: Room = {\n    name: RoomList.ObsidianHallway,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Altar, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: altarRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let lavaFlowRoom: Room = {\n    name: RoomList.LavaFlow,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.ObsidianHallway, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: obsidianHallway, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Altar, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: altarRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let crumblingBridge: Room = {\n    name: RoomList.CrumblingBridge,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.LavaFlow, action: \"Leap from stone to stone\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lavaFlowRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let lost: Room = {\n    name: RoomList.CrumblingBridge,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Cave, action: \"Journey On\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let wastes: Room = {\n    name: RoomList.Wastes,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Lost, action: \"Navigate the wastes\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lost, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let templeGuardianRoom: Room = {\n    name: RoomList.TempleGuardian,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n        { title: RoomList.Cave, action: \"Challenge the Temple Guardian\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let oasisRoom: Room = {\n    name: RoomList.Oasis,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TempleGuardian, action: \"Challenge the Temple Guardian\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: templeGuardianRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let unknownRoom: Room = {\n    name: RoomList.Unknown,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n\n    ]\n}\n\nexport let volcanoRoom: Room = {\n    name: RoomList.Volcano,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.LavaFlow, action: \"Brave the fiery rocks\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lavaFlowRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Unknown, action: \"Plunge in to the unknown\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: unknownRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let boulderRoom: Room = {\n    name: RoomList.Boulder,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Oasis, action: \"Dive left into the web-covered pit\", cost: { green: 3200, red: 0, blue: 0, hp: 0 }, destination: oasisRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Volcano, action: \"Crawl over the wall\", cost: { green: 48000, red: 0, blue: 0, hp: 0 }, destination: volcanoRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let monstersRoom: Room = {\n    name: RoomList.Monsters,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Boulder, action: \"Tumble away from the ferocious monsters\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: boulderRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let rabbitRoom: Room = {\n    name: RoomList.Rabbit,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Monsters, action: \"Slide down tunnel\", cost: { green: 900, red: 1200, blue: 100, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nlet ropeMonsterDoor = { title: RoomList.Monsters, action: \"Rappel down behind the monster\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() }\n\nexport let treeTopsRoom: Room = {\n    name: RoomList.TreeTops,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Monsters, action: \"Leap into the musty cove\", cost: { green: 75330, red: 0, blue: 0, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\n\nexport let templeRuinsRoom: Room = {\n    name: RoomList.TempleRuins,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TempleGuardian, action: \"Face the Temple Guardian\", cost: { green: 37500, red: 1200, blue: 50, hp: 0 }, destination: templeGuardianRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let jungleRoom: Room = {\n    name: RoomList.Jungle,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TreeTops, action: \"Shimmy into the Tree Tops\", cost: { green: 2134, red: 0, blue: 0, hp: 0 }, destination: treeTopsRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.TempleRuins, action: \"Venture towards the Temple Ruins\", cost: { green: 4444, red: 0, blue: 0, hp: 0 }, destination: templeRuinsRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let sandstormRoom: Room = {\n    name: RoomList.Sandstorm,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let desertRoom: Room = {\n    name: RoomList.Desert,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Volcano, action: \"Ascend the cliff face\", cost: { green: 0, red: 10000, blue: 0, hp: 0 }, destination: volcanoRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Wastes, action: \"Shy away from the blazing mountain\", cost: { green: 0, red: 10000, blue: 0, hp: 0 }, destination: wastes, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let moonRoom: Room = {\n    name: RoomList.Moon,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let fungalColonyRoom: Room = {\n    name: RoomList.FungalColony,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Moon, action: \"Gaze deeply at the moon above\", cost: { green: 0, red: 0, blue: 100000, hp: 0 }, destination: moonRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nlet moonDoor = { title: RoomList.FungalColony, action: \"Venture behind the veil\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: fungalColonyRoom, statuses: new Array<StructureStatus>() }\nlet rabbitDoor = { title: RoomList.Rabbit, action: \"Hurdle over the frozen brambles\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: rabbitRoom, statuses: new Array<StructureStatus>() }\n\n\nexport let caveRoom: Room = {\n    name: RoomList.Cave,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Jungle, action: \"Swing from the vines\", cost: { green: 340, red: 0, blue: 0, hp: 0 }, destination: jungleRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Desert, action: \"Brave the wastes\", cost: { green: 970, red: 800, blue: 290, hp: 0 }, destination: desertRoom, statuses: new Array<StructureStatus>() }\n    ]\n}\n\n\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface ThermiteState {\n  grid: Array<Array<number>>;\n  status: 'idle' | 'starting' | 'started' | 'finished';\n  bossHP: number;\n  enabled: boolean;\n}\n\nconst initialState: ThermiteState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(),\n  status: 'idle',\n  bossHP: 100,\n  enabled: false\n};\n\nfunction initializeGrid(){\n  let n = 4\n  let randomGrid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => Math.round(Math.random())))\n  return randomGrid\n}\n\n\nexport const thermiteSlice = createSlice({\n  name: 'thermite',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n\n      //state.value += 1;\n    },\n    triggerThermite: (state, action) => {\n      let coords = action.payload;\n      console.log(coords)\n      //let coords = [0,2]\n      state.grid[coords[0]][coords[1]]  = state.grid[coords[0]][coords[1]] === 1 ? 2 : 3\n      //state.value += 1;\n    },\n    startGrid: (state) => {\n      console.log('yes')\n      state.status = 'starting'\n      state.grid = initializeGrid()\n    },\n    enableButtons: (state) => {\n      console.log('yes')\n      state.status = 'started'\n    },\n    winThermiteBossFight: (state) => {\n\n    },\n\n    calculateDamage: (state) => {\n      state.bossHP -=  ((state.grid.flatMap(i => i).filter(i => i === 2).length * 4) - (state.grid.flatMap(i => i).filter(i => i === 3).length * 2))\n\n      state.status = 'finished'\n    },\n\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      //state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment,incrementByAmount, startGrid, triggerThermite, enableButtons, calculateDamage, winThermiteBossFight } = thermiteSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectGrid = (state: RootState) => state.thermite.grid;\nexport const selectStatus = (state: RootState) => state.thermite.status;\nexport const selectBossHP = (state: RootState) => state.thermite.bossHP;\n\n\nexport default thermiteSlice.reducer;\n","import { types } from '@babel/core';\nimport { createAsyncThunk, createSlice, PayloadAction, current, Draft } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport {\n  Spell,\n  Cost,\n  GreenFnParams,\n  BlueFnParams,\n  RedFnParams,\n  redFn,\n  blueFn,\n  greenFn,\n  hpFn,\n  Room,\n  GSResourceName,\n  HPFnParams,\n  GameStatus,\n  combineRedParams,\n  combineBlueParams,\n  combineGreenParams,\n  addResources,\n  removeResources,\n  isCostSatisfiable,\n  spells1,\n  RoomList,\n  SpellList\n} from './Types'\nimport { initializeTier1, Item, } from './Items'\nimport { caveRoom, getRoomInteractions, getDoorInteractions } from './Quest'\nimport {\n  winThermiteBossFight,\n} from '../thermite_bossfight/thermiteSlice';\n\n\nlet GreenUpgrade: [Cost, boolean, boolean, GreenFnParams, Spell[]]\nlet BlueUpgrade: [Cost, boolean, number, BlueFnParams, Spell[]]\nlet RedUpgrade: [Cost, boolean, boolean, RedFnParams, Spell[]]\n\n\nexport type SlimeBossStatus = \"burnable\" | \"burnt\" | \"freezable\" | \"frozen\" | \"normal\" | \"attacking\" | \"inactive\";\nconst SlimeBossStatuses: Array<SlimeBossStatus> = [\"burnable\", \"freezable\", \"normal\", \"normal\", \"attacking\", \"inactive\", \"inactive\"]\nexport const SlimeBossStatusColors = {\n  \"burnable\": \"#ff0000\",\n  \"burnt\": \"#860f11\",\n  \"freezable\": \"#00e4ff\",\n  \"frozen\": \"#00a6b9\",\n  \"normal\": \"#d2d2d2\",\n  \"attacking\": \"#000000\",\n  \"inactive\": \"#f3b179\",\n}\n\n\nexport interface Achievement {\n  name: String;\n  requirement: number;\n  description?: String;\n}\n\nexport interface SlimeBoss {\n  bossHp: number;\n  status: SlimeBossStatus;\n}\n\n\n\nexport interface GameState {\n  resources: Record<GSResourceName, number>;\n  boss: SlimeBoss;\n\n  gameLoopInterval: number;\n  availableSpells: Array<Spell>;\n  room: Room;\n  items: Array<typeof Item>;\n  redFnParams: RedFnParams;\n  greenFnParams: GreenFnParams;\n  blueFnParams: BlueFnParams;\n  hpFnParams: HPFnParams;\n  status: GameStatus;\n  combatLogMessages: Array<String>;\n  greenUpgrades: Array<typeof GreenUpgrade>;\n  redUpgrades: Array<typeof RedUpgrade>;\n  blueUpgrades: Array<typeof BlueUpgrade>;\n  blueDist: Array<number>;\n  bluePast: Array<number>;\n  greenDist: Array<number>;\n  redDist: Array<number>;\n}\n\nconst initialState: GameState = {\n  resources: {\n    red: 1000000, // 0\n    green: 10000000, // 20\n    blue: 100000003, //3\n    hp: 100\n  },\n  boss: {\n    bossHp: 100,\n    status: 'normal'\n  },\n  room: caveRoom,\n  gameLoopInterval: 0,\n  availableSpells: [],//Object.values(spells1),\n  items: initializeTier1(),\n  redFnParams: { linearP1: 1 },\n  greenFnParams: { linearP1: 2, quadraticP1: 0, twoPowerP1: 0 },\n  blueFnParams: { normalP1: 0, normalP2: 0 },\n  hpFnParams: { linearP1: 0.1 },\n  blueDist: [0, 0, 0, 0],\n  bluePast: [...Array(40).keys()].map(i => 0),\n  greenDist: [...Array(40).keys()].map(i => 0),\n  redDist: [...Array(40).keys()].map(i => 0),\n  status: \"ready\",\n  combatLogMessages: [],\n  greenUpgrades: [\n    [{ green: 13, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 0, twoPowerP1: 0 }, []],\n    [{ green: 29, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 0, twoPowerP1: 0 }, [spells1.CommuneWithPlants]],\n    [{ green: 105, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 4, quadraticP1: 0, twoPowerP1: 0 }, []],\n    [{ green: 82, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 0 }, [spells1.SpectralRope]],\n    [{ green: 379, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0, quadraticP1: 3, twoPowerP1: 0 }, []],\n    [{ green: 1800, red: 0, blue: 7, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 10 }, []],\n    [{ green: 300000, red: 100, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 2 }, [spells1.Heal]],\n    [{ green: 1000000000, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 10 }, []],\n\n  ],\n  redUpgrades: [\n    [{ green: 13, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3 }, [spells1.Fireball]],\n    [{ green: 37, red: 0, blue: 1, hp: 0 }, false, false, { linearP1: 0.3 }, []],\n    [{ green: 105, red: 0, blue: 3, hp: 0 }, false, false, { linearP1: 4 }, []],\n    [{ green: 10, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3 }, []],\n    [{ green: 7000, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 8 }, []],\n    [{ green: 61589, red: 0, blue: 55, hp: 0 }, false, false, { linearP1: 22 }, []],\n\n  ],\n  blueUpgrades: [\n    [{ green: 9, red: 45, blue: 0, hp: 0 }, false, 0, { normalP1: 0.0002, normalP2: 0.0001 }, []],\n    [{ green: 499, red: 0, blue: 2, hp: 0 }, false, 0, { normalP1: 0, normalP2: 0.5 }, [spells1.FrostRay]],\n    [{ green: 0, red: 389, blue: 21, hp: 0 }, false, 0, { normalP1: 2, normalP2: 0 }, []],\n    [{ green: 0, red: 0, blue: 131, hp: 0 }, false, 0, { normalP1: 0, normalP2: 10 }, []],\n    [{ green: 0, red: 0, blue: 305, hp: 0 }, false, 0, { normalP1: 1, normalP2: 10 }, []],\n  ]\n\n\n};\n\n\nconst initialStateCopy = Object.assign({}, initialState)\n\nexport const gameStateSlice = createSlice({\n  name: 'gameState',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    startLoop: (state) => {\n      state.status = 'started';\n    },\n    resetState: (state) => {\n      clearInterval(state.gameLoopInterval);\n      Object.assign(state, initialStateCopy);\n    },\n    incrementRed: (state) => {\n      state.resources.red += redFn(state.redFnParams);\n      state.redDist.push(redFn(state.redFnParams));\n      state.redDist.shift();\n    },\n    castSpell: (state, payload) => {\n      if (payload) {\n        let spell = state.availableSpells.find(x => x.description === payload.payload.description)\n        if (spell) {\n          spell.available = false\n          handleSpell(state, spell)\n        }\n      }\n    },\n    resetSpell: (state, payload) => {\n      if (payload) {\n        let spell = state.availableSpells.find(x => x.description === payload.payload.description)\n        if (spell) {\n          spell.available = true\n        }\n      }\n    },\n    incrementBlue: (state) => {\n      state.resources.blue += blueFn(state.blueFnParams);\n      state.blueDist = [...Array(1000).keys()].map(i => Math.round(blueFn(state.blueFnParams)))\n      state.bluePast.push(state.resources.blue);\n      state.bluePast.shift();\n    },\n    incrementGreen: (state) => {\n      state.resources.green += greenFn(state.greenFnParams);\n      state.greenDist.push(state.resources.green);\n      state.greenDist.shift();\n    },\n    incrementHP: (state) => {\n      state.resources.hp -= hpFn(state.hpFnParams);\n      if (state.resources.hp <= 0) {\n        state.status = \"gameOver\"\n      }\n    },\n\n    attackBoss: (state, action) => {\n      if (action.payload.description === SpellList.Fireball && state.boss.status === 'burnable') {\n        state.boss.status = 'burnt'\n        state.boss.bossHp -= 30\n      } else if (action.payload.description === SpellList.Fireball && state.boss.status === 'normal') {\n        state.boss.bossHp -= 20\n      } else if (action.payload.description === SpellList.FrostRay && state.boss.status === 'freezable') {\n        state.boss.status = 'frozen'\n        state.boss.bossHp -= 30\n      } else if (action.payload.description === SpellList.FrostRay && state.boss.status === 'normal') {\n        state.boss.bossHp -= 20\n      } else if (action.payload.description === 'Gem Attack' && state.boss.status === 'normal') {\n        state.boss.status = 'inactive'\n        state.boss.bossHp -= 10\n      } else if (action.payload.description === 'Gem Attack' && state.availableSpells.find(x => x.description === SpellList.SpectralRope && !x.available) && state.boss.status === 'normal') {\n        state.boss.status = 'inactive'\n        state.boss.bossHp -= 15\n      }\n      if (state.boss.bossHp <= 0) {\n        state.status = 'victory'\n      }\n    },\n    startTempleGuardianBossFight: (state) => {\n      state.status = 'tgBossFight'\n      clearInterval(state.gameLoopInterval)\n      state.gameLoopInterval = NaN\n    },\n    startThermiteBossFight: (state) => {\n      state.status = 'thermiteBossFight'\n      clearInterval(state.gameLoopInterval)\n      state.gameLoopInterval = NaN\n    },\n    bossAttack: (state) => {\n      if (state.availableSpells.find(x => x.description === SpellList.SpectralRope && !x.available) || state.boss.status === 'frozen' || state.boss.status === 'burnt') {\n        state.resources.hp -= 3\n      } else {\n        state.resources.hp -= 5\n      }\n      state.boss.status = SlimeBossStatuses[Math.round(Math.random() * SlimeBossStatuses.length)]\n      if (state.resources.hp <= 0) {\n        state.status = 'gameOver'\n      }\n\n    },\n    incrementBossHP: (state) => {\n      state.boss.bossHp -= (4 * Math.random())\n      if (state.boss.bossHp <= 0) {\n        state.status = \"victory\"\n      }\n    },\n    boulderKill: (state) => {\n      if (state.room.name === RoomList.Boulder) {\n        state.status = \"gameOver\"\n      }\n    },\n\n    setGameLoopIntervals: (state, action) => {\n      state.gameLoopInterval = action.payload\n    },\n    clearGameLoopIntervals: (state) => {\n      clearInterval(state.gameLoopInterval);\n      state.gameLoopInterval = 0;\n    },\n    addCombatLogMessages: (state, action) => {\n      console.log('unshift');\n      state.combatLogMessages.unshift(action.payload)\n    },\n    clearCombatLogMessages: (state) => {\n      state.combatLogMessages = []\n    },\n    buyItem: (state, action) => {\n      if (action.payload.item) {\n        let item = state.items[0]\n        let currentItem = current(item)\n        if (!item || !currentItem || action.payload.item !== currentItem) {\n          return\n        }\n        if (!isCostSatisfiable(currentItem[0], state.resources)) {\n          return\n        }\n        state.resources = removeResources(currentItem[0], state.resources)\n        state.resources = addResources(currentItem[1], state.resources)\n        state.items.shift()\n      }\n    },\n    stepQuest: (state, action) => {\n      let step = state.room.options\n      let currentStep = current(step)\n      if (!step || !currentStep) {\n        return\n      }\n\n      let currentChoice = currentStep.find(x => x === action.payload.choice)\n      if (!currentChoice) {\n        return\n      }\n      if (!isCostSatisfiable(currentChoice.cost, state.resources)) {\n        return\n      }\n      state.resources = removeResources(currentChoice.cost, state.resources)\n      if (currentChoice.destination.options.length == 0) {\n        state.status = 'victory'\n      }\n\n      state.room = currentChoice.destination\n\n\n    },\n    upgrade: (state, action) => {\n      if (action.payload.green) {\n        let upgrade = state.greenUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.green !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] = true\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.greenFnParams = combineGreenParams(state.greenFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n      if (action.payload.red) {\n        let upgrade = state.redUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.red !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] = true\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.redFnParams = combineRedParams(state.redFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n      if (action.payload.blue) {\n        let upgrade = state.blueUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.blue !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] += 1\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.blueFnParams = combineBlueParams(state.blueFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n    },\n\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(winThermiteBossFight, (state) => {\n        state.status = 'victory'\n      })\n    }\n  \n\n});\n\nfunction handleSpell(state: Draft<GameState>, spell: Spell) {\n  let interaction = getRoomInteractions(state.room.name)\n  let result = interaction(state, spell)\n\n  let doorResults = state.room.options.map(x => getDoorInteractions(x.destination.name)(state, spell))\n}\n\nexport const { incrementRed, incrementBossHP, resetState, startTempleGuardianBossFight, startThermiteBossFight, startLoop, boulderKill, attackBoss, bossAttack, addCombatLogMessages, clearCombatLogMessages, incrementGreen, incrementBlue, setGameLoopIntervals, clearGameLoopIntervals, incrementHP, castSpell, resetSpell, buyItem, stepQuest, upgrade } = gameStateSlice.actions;\n\n\nexport const selectRed = (state: RootState) => state.gameState.resources.red;\nexport const selectBlue = (state: RootState) => state.gameState.resources.blue;\nexport const selectGreen = (state: RootState) => state.gameState.resources.green;\nexport const selectHP = (state: RootState) => state.gameState.resources.hp;\nexport const selectBossHP = (state: RootState) => state.gameState.boss.bossHp;\nexport const selectBossStatus = (state: RootState) => state.gameState.boss.status;\nexport const selectCombatLogMessages = (state: RootState) => state.gameState.combatLogMessages;\nexport const selectGreenFnP1 = (state: RootState) => state.gameState.greenFnParams.linearP1;\nexport const selectRoomName = (state: RootState) => state.gameState.room.name;\n\nexport const selectNextDoors = (state: RootState) => state.gameState.room.options || [];\nexport const selectGameLoopInterval = (state: RootState) => state.gameState.gameLoopInterval;\n\nexport const selectSpells = (state: RootState) => state.gameState.availableSpells;\nexport const selectGameStatus = (state: RootState) => state.gameState.status;\nexport const selectBlueDist = (state: RootState) => state.gameState.blueDist;\nexport const selectBluePast = (state: RootState) => state.gameState.bluePast;\nexport const selectGreenDist = (state: RootState) => state.gameState.greenDist;\nexport const selectRedDist = (state: RootState) => state.gameState.redDist;\nexport const selectGreenUpgradeCost = (state: RootState) => state.gameState.greenUpgrades.find(x => !x[1]);\nexport const selectRedUpgradeCost = (state: RootState) => state.gameState.redUpgrades.find(x => !x[1]);\nexport const selectBlueUpgradeCost = (state: RootState) => state.gameState.blueUpgrades.find(x => !x[1]);\nexport const selectItemCost = (state: RootState) => state.gameState.items[0];\n\n\nexport default gameStateSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux'\n\nimport counterReducer from '../features/counter/counterSlice';\nimport gameStateReducer from '../features/gameState/gameStateSlice';\nimport thermiteReducer from '../features/thermite_bossfight/thermiteSlice';\nimport farmingReducer from '../features/farming_minigame/farmingSlice';\n\n\nconst persistedState = localStorage.getItem('reduxState') \n                       ? JSON.parse(localStorage.getItem('reduxState') || '{}')\n                       : {}\nif(persistedState && persistedState.gameState && persistedState.gameState.status && persistedState.gameState.status === 'started'){\n   persistedState.gameState.status = 'ready'\n}\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    gameState: gameStateReducer,\n    thermite: thermiteReducer,\n    farming: farmingReducer\n  },\n  preloadedState: persistedState\n},);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}