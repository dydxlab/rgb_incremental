{"version":3,"sources":["features/farming_minigame/Farming.module.css","app/hooks.ts","features/farming_minigame/farmingSlice.ts","features/farming_minigame/Farming.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/gameState/Types.ts","features/gameState/Items.ts","features/gameState/Quest.ts","features/thermite_bossfight/thermiteSlice.ts","features/gameState/gameStateSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppSelector","useSelector","activeCellStatuses","threeByThreeGrid","gridLength","choiceCount","coordChoices","grid","gridChoices","choose","Array","length","keys","allParams","3","4","5","initialState","initializeGrid","status","score","maxScore","maxScoreCoords","enabled","achievementStats","perfectScores","streak","achievements","title","description","complete","freshAchievements","version","getRandomIntInclusive","min","max","Math","ceil","floor","random","gridParams","showGolden","n","lookup","1","2","map","i","j","arr","k","prefix","flatMap","v","slice","calculateScore","baseScores","base","activateGridCoords","coords","cellStatus","activateCellStatus","deactivateGridCellStatus","highlightCellStatus","cell","farmingSlice","createSlice","name","reducers","activateCell","state","action","payload","x","filter","includes","y","concat","current","coord","setGridSize","randomGrid","emptyGrid","JSON","parse","stringify","startGrid","bruteForceSolution","gridCopy1","curr","choices","maxCoord","choice","gridCopy","coords1","push","bruteForce","enableButtons","actions","selectGrid","farming","selectGridSize","selectStatus","selectScore","selectMaxScore","selectFreshAchievements","Farming","gridSize","dispatch","useDispatch","activateCellAudio","Audio","volume","deactivateCellAudio","perfectScoreAudio","achievementAudio","finishRoundAudio","getButtonStyleCellStatus","cellValue","enabledButtons","styles","button","greenActive","greenInactive","redActive","redInactive","blueActive","blueInactive","optimal","runLoop","setTimeout","play","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","Slide","style","className","row","color","onClick","disabled","getBoard","type","value","checked","onChange","a","toast","success","progress","undefined","toastId","App","id","options","fullScreen","enable","zIndex","background","opacity","fpsLimit","interactivity","detectsOn","modes","bubble","distance","duration","size","particles","collisions","move","direction","outMode","speed","straight","number","density","value_area","shape","rotate","animation","opacityRate","sizeRate","detectRetina","backgroundColor","xmlns","height","width","fill","viewBox","d","attributeName","attributeType","values","additive","repeatCount","dur","fetchCount","amount","Promise","resolve","data","RoomList","SpellList","incrementAsync","createAsyncThunk","response","counterSlice","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","pd","require","spells1","Fireball","cooldown","available","CommuneWithPlants","Heal","FrostRay","SpectralRope","isCostSatisfiable","cost","resources","c","removeResources","combineRedParams","b","redFn","params","total","linearP1","blueFn","normalP1","normalP2","rnorm","jungleRoomInteraction","spell","room","statuses","combatLogMessages","unshift","redFnParams","caveRoomInteraction","moonDoor","desertRoomInteraction","hp","treeTopsRoomInteraction","rabbitDoor","rabbitRoomInteraction","ropeMonsterDoor","monstersRoomInteraction","boulderDodgeRoomInteraction","monstersDoorInteraction","o","EmptyFn","FakeRoom","Cave","volcanoBossFightRoom","Treasure","VolcanoBoss","green","red","blue","destination","cageTrapRoom","CageTrap","graniteRaftRoom","GraniteRaft","trappedInsectRoom","TrappedInsect","altarRoom","obsidianHallway","ObsidianHallway","Altar","lavaFlowRoom","LavaFlow","lost","CrumblingBridge","wastes","Wastes","Lost","templeGuardianRoom","TempleGuardian","oasisRoom","Oasis","unknownRoom","Unknown","volcanoRoom","Volcano","boulderRoom","Boulder","monstersRoom","Monsters","rabbitRoom","Rabbit","treeTopsRoom","TreeTops","templeRuinsRoom","TempleRuins","jungleRoom","Jungle","desertRoom","Sandstorm","Desert","moonRoom","Moon","fungalColonyRoom","FungalColony","caveRoom","bossHP","round","thermiteSlice","triggerThermite","winThermiteBossFight","calculateDamage","SlimeBossStatuses","boss","bossHp","gameLoopInterval","availableSpells","items","itemsTier1","costsTier1","shuffle","initializeTier1","greenFnParams","quadraticP1","twoPowerP1","blueFnParams","hpFnParams","blueDist","bluePast","greenDist","redDist","greenUpgrades","redUpgrades","blueUpgrades","initialStateCopy","Object","assign","gameStateSlice","startLoop","resetState","clearInterval","incrementRed","shift","castSpell","find","match","with","IceChamber","MagmaWaterfall","StatueRoom","exhaustive","getDoorInteractions","handleSpell","resetSpell","incrementBlue","incrementGreen","pow","greenFn","incrementHP","hpFn","attackBoss","startTempleGuardianBossFight","NaN","startThermiteBossFight","bossAttack","incrementBossHP","boulderKill","setGameLoopIntervals","clearGameLoopIntervals","addCombatLogMessages","clearCombatLogMessages","buyItem","item","currentItem","addResources","stepQuest","step","currentStep","currentChoice","upgrade","currentUpgrade","combineGreenParams","combineBlueParams","persistedState","localStorage","getItem","gameState","store","configureStore","reducer","counter","counterReducer","gameStateReducer","thermite","thermiteReducer","farmingReducer","preloadedState","subscribe","setItem","getState","Boolean","window","location","hostname","backgroundAudio","addEventListener","this","currentTime","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5c788ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Farming_row__3F5tY\",\"value\":\"Farming_value__2vtaD\",\"button\":\"Farming_button__3edmD\",\"textbox\":\"Farming_textbox__219dn\",\"asyncButton\":\"Farming_asyncButton__pDz8e Farming_button__3edmD\",\"buttonThermite\":\"Farming_buttonThermite__1ZXsW\",\"greenInactive\":\"Farming_greenInactive__wywNz\",\"blueInactive\":\"Farming_blueInactive__1cpj0\",\"redInactive\":\"Farming_redInactive__AwjGf\",\"greenActive\":\"Farming_greenActive__-odSk\",\"blueActive\":\"Farming_blueActive__32hG-\",\"redActive\":\"Farming_redActive__2R1kz\",\"optimal\":\"Farming_optimal__1UIra\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk, createSlice, PayloadAction, current } from '@reduxjs/toolkit';\nimport { stat } from 'fs';\nimport { RootState, AppThunk } from '../../app/store';\n\nconst currentVersion = '0.2'\n\ninterface GridParams {\n  gridLength: number;\n  coordChoices: Array<Array<number>>;\n  choiceCount: number;\n  grid: Array<Array<CellStatus>>;\n  gridChoices: Array<Array<number>>;\n}\n\ninterface AchievementStats {\n  perfectScores: number;\n  streak: number;\n}\n\ninterface Achievement {\n  perfectScores?: number;\n  streak?: number;\n  title: string;\n  description: string;\n  complete: boolean;\n}\nexport type CellStatus = 'GreenActive' | 'BlueActive' | 'RedActive' | 'OrangeActive' | 'GreenInactive' | 'BlueInactive' | 'RedInactive' | 'OrangeInactive' |\n  'GreenActiveHighlighted' | 'BlueActiveHighlighted' | 'RedActiveHighlighted' | 'OrangeActiveHighlighted' | 'GreenInactiveHighlighted' | 'BlueInactiveHighlighted' | 'RedInactiveHighlighted' | 'OrangeInactiveHighlighted' |\n  'Neutral' | 'GoldInactive' | 'GoldActive'\nexport const activeCellStatuses: Array<CellStatus> = ['GreenActive', 'BlueActive', 'RedActive', 'OrangeActive', 'GoldActive']\n\nlet fiveStreak: Achievement = { streak: 5, title: \"Five Win Streak\", description: \"Unprecedented success!\", complete: false}\nlet tenStreak: Achievement = { streak: 10, title: \"Ten Win Streak\", description: \"Unprecedented success!\", complete: false }\nlet tenTotal: Achievement = { perfectScores: 10, title: \"Ten Wins!\", description: \"Unprecedented success!\", complete: false }\nlet hundredTotal: Achievement = { perfectScores: 100, title: \"One Hundred Wins\", description: \"Unprecedented success!\", complete: false }\n\nexport interface FarmingState {\n  grid: GridParams;\n  status: 'idle' | 'starting' | 'started' | 'finished';\n  score: number;\n  maxScore: number;\n  maxScoreCoords: Array<Array<number>>;\n  enabled: boolean;\n  achievementStats: AchievementStats;\n  achievements: Array<Achievement>;\n  freshAchievements: Array<Achievement>;\n  version: string;\n}\n\n\n\nlet threeByThreeGrid: GridParams = {\n  gridLength: 3,\n  choiceCount: 3,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2]],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2]].length).keys()], 3)\n}\nlet fourByFourGrid: GridParams = {\n  gridLength: 4,\n  choiceCount: 4,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3],],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3],].length).keys()], 4)\n}\nlet fiveByFiveGrid: GridParams = {\n  gridLength: 5,\n  choiceCount: 5,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [3, 4], [4, 3], [4, 4],],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [3, 4], [4, 3], [4, 4],].length).keys()], 5)\n}\n\nlet allParams = {\n  3: threeByThreeGrid,\n  4: fourByFourGrid,\n  5: fiveByFiveGrid\n}\n\nconst initialState: FarmingState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(threeByThreeGrid, false),\n  status: 'idle',\n  score: 0,\n  maxScore: 20,\n  maxScoreCoords: [[0]],\n  enabled: false,\n  achievementStats: { perfectScores: 0, streak: 0 },\n  achievements: [fiveStreak, tenStreak, tenTotal, hundredTotal],\n  freshAchievements: new Array<Achievement>(),\n  version: '0.1'\n};\n\nfunction getRandomIntInclusive(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nfunction emptyGrid(gridParams: GridParams): GridParams {\n  let n = gridParams.gridLength\n  let randomGrid: Array<Array<CellStatus>> = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => 'Neutral'))\n  gridParams.grid = randomGrid\n  return gridParams\n}\n\nfunction initializeGrid(gridParams: GridParams, showGolden: boolean): GridParams {\n  let n = gridParams.gridLength\n  let lookup = {1: 'GreenInactive', 2: 'BlueInactive', 3:'RedInactive'}\n  gridParams.grid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => lookup[getRandomIntInclusive(1, 3)]))\n  if(showGolden && Math.random() >0.99) {\n    gridParams.grid[getRandomIntInclusive(0, gridParams.gridLength - 1)][getRandomIntInclusive(0, gridParams.gridLength - 1)] = 'GoldInactive'\n  }\n  return gridParams\n}\nexport interface BruteforceSolution {\n  coords: Array<Array<number>>;\n  maxScore: number;\n}\n\n\nfunction choose(arr, k, prefix: Array<number> = []) {\n  if (k == 0) return [prefix];\n  return arr.flatMap((v, i) =>\n    choose(arr.slice(i + 1), k - 1, [...prefix, v])\n  );\n}\n\n\n\nfunction bruteForce(grid: GridParams): BruteforceSolution {\n  //let coordChoices = {1: [0,0], 2: [0,1], 3: [0,2], 4: [1,0], 5:[2,0], 6:[1,1], 7:[2,1],8:[1,2], 9:[2,2]}\n  let coordChoices = grid.coordChoices\n  let gridCopy1 = deactivateGridCellStatus(JSON.parse(JSON.stringify(grid.grid)))\n  let curr: Array<BruteforceSolution> = []\n  let choices = grid.gridChoices\n  let maxCoord = [[0]]\n  let maxScore = 0\n  for (const choice of choices) {\n    let gridCopy = deactivateGridCellStatus(gridCopy1)\n    choice.flatMap(x => activateGridCoords(gridCopy, coordChoices[x]))\n    let score = calculateScore(gridCopy)\n    let coords1 = choice.map(x => coordChoices[x])\n    curr.push({ coords: coords1, maxScore: score })\n    if (score > maxScore) {\n      maxCoord = coords1\n      maxScore = score\n    }\n  }\n\n  return { coords: maxCoord, maxScore: maxScore }\n}\n\nfunction calculateScore(grid: Array<Array<CellStatus>>) {\n  let score = 0;\n  let baseScores = { 'GreenActive': 4, 'BlueActive': 0, 'RedActive': 1, 'GoldActive': 10, 'OrangeActive': 2 }\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      let base = baseScores[grid[i][j]] ?? -1\n      if (base === -1) {\n        continue;\n      }\n      if ((i - 1 >= 0 && grid[i - 1][j] === 'BlueActive') || (i + 1 < grid.length && grid[i + 1][j] === 'BlueActive')) {\n        base = base + 3\n      }\n      if ((i - 1 >= 0 && j - 1 >= 0 && grid[i - 1][j - 1] === 'RedActive')\n        || (i - 1 >= 0 && j + 1 <= grid[0].length && grid[i - 1][j + 1] === 'RedActive')\n        || (i + 1 < grid.length && j - 1 >= 0 && grid[i + 1][j - 1] === 'RedActive')\n        || (i + 1 < grid.length && j + 1 < grid[0].length && grid[i + 1][j + 1] === 'RedActive')) {\n        base = base + 2\n      }\n      \n      if ((j - 1 >= 0 && grid[i][j - 1] === 'GreenActive') || (j + 1 < grid[0].length && grid[i][j + 1] === 'GreenActive')) {\n        base = 0\n      }\n      score = score + base\n    }\n  }\n\n  return score;\n}\n\nfunction activateGridCoords(grid, coords) {\n  grid[coords[0]][coords[1]] = activateCellStatus(grid[coords[0]][coords[1]])\n  return grid\n}\n\nfunction activateCellStatus(cellStatus: CellStatus) {\n  switch (cellStatus) {\n    case 'GreenActive': return 'GreenInactive'\n    case 'GreenInactive': return 'GreenActive'\n    case 'RedActive': return 'RedInactive'\n    case 'RedInactive': return 'RedActive'\n    case 'BlueActive': return 'BlueInactive'\n    case 'BlueInactive': return 'BlueActive'\n  }\n\n}\n\nfunction deactivateGrid(grid) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      switch (grid[i][j]) {\n        case '4': grid[i][j] = 1; break;\n        case 5: grid[i][j] = 2; break;\n        case 6: grid[i][j] = 3; break;\n        default: break;\n      }\n    }\n  }\n\n  return grid\n}\n\nfunction deactivateGridCellStatus(grid) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      switch (grid[i][j]) {\n        case 'GreenActive': grid[i][j] = 'GreenInactive'; break;\n        case 'RedActive': grid[i][j] = 'RedInactive'; break;\n        case 'BlueActive': grid[i][j] = 'BlueInactive'; break;\n        default: break;\n      }\n    }\n  }\n\n  return grid\n}\n\nfunction highlightCellStatus(cell: CellStatus): CellStatus {\n  switch (cell) {\n    case 'GreenActive': return 'GreenActiveHighlighted';\n    case 'RedActive': return 'RedActiveHighlighted'; \n    case 'BlueActive': return 'BlueActiveHighlighted'; \n    case 'GreenInactive': return 'GreenInactiveHighlighted'; \n    case 'RedInactive': return 'RedInactiveHighlighted'; \n    case 'BlueInactive': return 'BlueInactiveHighlighted'; \n    default: return 'Neutral'\n  }\n\n}\n\nexport const farmingSlice = createSlice({\n  name: 'farming',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n    activateCell: (state, action) => {\n      state.freshAchievements = []\n      let coords = action.payload;\n      //let coords = [0,2]\n      state.grid.grid = activateGridCoords(state.grid.grid, coords)\n      if (state.grid.grid.flatMap(x => x).filter(x => activeCellStatuses.includes(x)).length === state.grid.choiceCount) {\n        state.status = 'finished'\n        state.score = calculateScore(state.grid.grid)\n        if (state.score === state.maxScore) {\n          state.grid.grid = state.grid.grid.map(x => x.map(y => activeCellStatuses.includes(y) ? highlightCellStatus(y) : y))\n          state.achievementStats.perfectScores += 1\n          state.achievementStats.streak += 1\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores))\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores))\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.streak === state.achievementStats.streak))\n          state.achievements.filter(x => !x.complete && x.streak === state.achievementStats.streak).flatMap(x => x.complete = true)\n          state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores).flatMap(x => x.complete = true)\n\n        } else {\n          for (const coord of current(state.maxScoreCoords)) {\n            state.grid.grid[coord[0]][coord[1]] = highlightCellStatus(state.grid.grid[coord[0]][coord[1]])\n          }\n          state.achievementStats.streak = 0\n        }\n\n\n      }\n      //state.value += 1;\n    },\n    setGridSize: (state, action) => {\n      state.grid = emptyGrid(JSON.parse(JSON.stringify(allParams[action.payload])))\n    },\n    startGrid: (state) => {\n      state.status = 'starting'\n      state.grid = initializeGrid(state.grid,state.achievementStats.perfectScores > 0)\n      let bruteForceSolution = bruteForce(state.grid)\n      state.maxScore = bruteForceSolution.maxScore\n      state.maxScoreCoords = bruteForceSolution.coords\n    },\n    enableButtons: (state) => {\n      state.status = 'started'\n    },\n\n  },\n});\n\nexport const { startGrid, activateCell, enableButtons, setGridSize } = farmingSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectGrid = (state: RootState) => state.farming.grid.grid;\nexport const selectGridSize = (state: RootState) => state.farming.grid.gridLength;\nexport const selectStatus = (state: RootState) => state.farming.status;\nexport const selectScore = (state: RootState) => state.farming.score;\nexport const selectMaxScore = (state: RootState) => state.farming.maxScore;\nexport const selectFreshAchievements = (state: RootState) => state.farming.freshAchievements;\n\n\nexport default farmingSlice.reducer;\n","import React, { useState, FunctionComponent } from 'react';\nimport ReactDOM from 'react-dom'\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  selectGrid,\n  selectGridSize,\n  setGridSize,\n  activateCell,\n  enableButtons,\n  selectStatus,\n  startGrid,\n  selectScore,\n  selectMaxScore,\n  activeCellStatuses,\n  CellStatus,\n  selectFreshAchievements\n} from './farmingSlice';\nimport styles from './Farming.module.css';\nimport { ToastContainer, toast, Slide } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ninterface FarmingProps {\n  id: string;\n}\n\nexport const Farming: FunctionComponent = () => {\n  const grid = useAppSelector(selectGrid);\n  const gridSize = useAppSelector(selectGridSize);\n  const score = useAppSelector(selectScore);\n  const maxScore = useAppSelector(selectMaxScore);\n  const status = useAppSelector(selectStatus);\n  const freshAchievements = useAppSelector(selectFreshAchievements);\n\n  const dispatch = useAppDispatch();\n\n\n  const activateCellAudio = new Audio(\"./activate_cell3.wav\")\n  activateCellAudio.volume = 0.3\n\n  \n  const deactivateCellAudio = new Audio(\"./deactivate_cell.wav\")\n  deactivateCellAudio.volume = 0.3\n\n  const perfectScoreAudio = new Audio(\"./perfect_score.wav\")\n  const achievementAudio = new Audio(\"./achievement_unlocked2.wav\")\n  achievementAudio.volume = 0.05\n  const finishRoundAudio = new Audio(\"./finish_round.wav\")\n\n\n\n\n  function getButtonStyle(cellValue, enabledButtons) {\n    if (status === 'idle') {\n      return styles.button;\n    }\n    if (cellValue > 6) {\n      cellValue -= 6;\n      switch (cellValue) {\n        case 0: return styles.button + ' ' + styles.optimal;\n        case 1: return styles.greenInactive + ' ' + styles.optimal;\n        case 2: return styles.blueInactive + ' ' + styles.optimal;\n        case 3: return styles.redInactive + ' ' + styles.optimal;\n        case 4: return styles.greenActive + ' ' + styles.optimal;\n        case 5: return styles.blueActive + ' ' + styles.optimal;\n        case 6: return styles.redActive + ' ' + styles.optimal;\n\n\n      }\n    }\n    switch (cellValue) {\n      case 0: return styles.button;\n      case 1: return styles.greenInactive;\n      case 2: return styles.blueInactive;\n      case 3: return styles.redInactive;\n      case 4: return styles.greenActive;\n      case 5: return styles.blueActive;\n      case 6: return styles.redActive;\n\n\n    }\n  }\n\n\n  function getButtonStyleCellStatus(cellValue: CellStatus, enabledButtons) {\n    if (status === 'idle') {\n      return styles.button;\n    }\n\n    switch (cellValue) {\n      case 'GreenActive': return styles.greenActive;\n      case 'GreenInactive': return styles.greenInactive;\n      case 'RedActive': return styles.redActive;\n      case 'RedInactive': return styles.redInactive;\n      case 'BlueActive': return styles.blueActive;\n      case 'BlueInactive': return styles.blueInactive;\n\n      case 'GreenActiveHighlighted': return styles.greenActive + ' ' + styles.optimal;\n      case 'GreenInactiveHighlighted': return styles.greenInactive + ' ' + styles.optimal;\n      case 'RedActiveHighlighted': return styles.redActive + ' ' + styles.optimal;\n      case 'RedInactiveHighlighted': return styles.redInactive + ' ' + styles.optimal;\n      case 'BlueActiveHighlighted': return styles.blueActive + ' ' + styles.optimal;\n      case 'BlueInactiveHighlighted': return styles.blueInactive + ' ' + styles.optimal;\n\n      case 'Neutral': return styles.button;\n      default: return styles.button;\n\n    }\n  }\n\n  function runLoop() {\n    setTimeout(() => dispatch(startGrid()), 100);\n    setTimeout(() => dispatch(enableButtons()), 100);\n\n  }\n\n  function clickCell(coord) {\n    if (activeCellStatuses.includes(grid[coord[0]][coord[1]])) {\n      deactivateCellAudio.play();\n    } else {\n      activateCellAudio.play();\n    }\n\n    dispatch(activateCell(coord))\n  }\n\n  function notify() {\n    if (freshAchievements && freshAchievements.length) {\n      freshAchievements.flatMap(a => \n      toast.success(a.title, {\n        position: \"top-center\",\n        autoClose: 7000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        toastId: a.title\n      })\n      )\n    }\n  }\n\n  function playEndRoundAudio(){\n    if(score === maxScore && freshAchievements.length){\n      achievementAudio.play()\n    } else if(score === maxScore && !freshAchievements.length){\n      perfectScoreAudio.play()\n    } else if(score !== maxScore){\n      finishRoundAudio.play()\n    }\n    \n  }\n\n\n  function getBoard() {\n    switch (status) {\n      case 'idle': return (<div>\n        <div className={styles.row}>\n          <button className={styles.button}\n            style={{ 'backgroundColor': 'goldenrod', color: 'white' }}\n            onClick={runLoop\n            }\n\n          >Start</button>\n        </div>\n        {grid && grid.map((row, i) => {\n          return (<div className={styles.row}>\n            {row.map((cell, j) =>\n            (<button disabled={true} className={getButtonStyleCellStatus(cell, status)}\n\n\n            >O</button>)\n            )\n            }\n\n          </div>\n          )\n        })}\n\n\n\n      </div>);\n      case 'starting':\n      case 'started':\n      case 'finished': return (\n        <div>\n\n          {grid && grid.map((row, i) => {\n            return (<div className={styles.row}>\n              {row.map((cell, j) =>\n              (<button disabled={status === 'finished'} className={getButtonStyleCellStatus(cell, status)}\n                onClick={() => clickCell([i, j])}\n\n              >O</button>)\n              )\n              }\n\n            </div>\n            )\n          })}\n\n\n\n        </div>\n      )\n\n    }\n  }\n\n  { status === 'finished' && score > 0 && playEndRoundAudio()  }\n  return (\n    <div>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        transition={Slide}\n      />\n      <h3 style={{ 'color': 'rgb(222, 222, 222)' }}>Mushroom Minigame</h3>\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Red mushrooms give 1 point and add 2 points to active diagonal mushrooms</span><br />\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Green mushrooms give 4 point and set active mushrooms to the left and right to 0 points</span><br />\n      <span style={{ 'color': 'rgb(222, 222, 222)' }}>Blue mushrooms give 0 points and add 3 points to active mushrooms above and below them</span><br />\n      <br />\n      {getBoard()}\n      {status === 'finished' && (<div><span style={{ 'color': 'rgb(255, 255, 255)' }}>Your Score:{score}</span>\n        <br />\n        <span style={{ 'color': 'rgb(255, 255, 255)' }}>Max Possible Score:{maxScore}</span>\n\n        <div className={styles.row}>\n          <label style={{ 'color': 'rgb(255, 255, 255)', 'paddingRight': '12px' }}>\n            <input type=\"radio\" name=\"gridsize3x3\"\n              value={3}\n              checked={gridSize === 3}\n              onChange={() => dispatch(setGridSize(3))} /> 3X3</label>\n          <label style={{ 'color': 'rgb(255, 255, 255)', 'paddingRight': '12px' }}>\n            <input type=\"radio\" name=\"gridsize4x4\"\n              value={4}\n              checked={gridSize === 4}\n              onChange={() => dispatch(setGridSize(4))} />4X4</label>\n\n          <label style={{ 'color': 'rgb(255, 255, 255)', 'paddingRight': '12px' }}>\n            <input type=\"radio\" name=\"gridsize5x5\"\n              value={5}\n              checked={gridSize === 5}\n              onChange={() => dispatch(setGridSize(5))} />5X5</label>\n          <button className={styles.button}\n            style={{ 'backgroundColor': 'goldenrod', color: 'white' }}\n            onClick={runLoop\n            }\n\n          >Start</button>\n        </div>\n      </div>)\n      }\n      {status === 'finished' && notify()}\n    </div>\n  );\n}\n\n//{status === 'started' && <img src='./timeout_bar.svg' className=\"App-logo\" alt=\"logo\" />}","import React from 'react';\nimport logo from './Beetle.png';\nimport { CYOA } from './features/gameState/CYOA';\nimport { Draft } from './features/gameState/Draft';\nimport { GameOver } from './features/gameState/GameOver';\nimport { TechTree } from './features/gameState/TechTree';\nimport { Maze } from './features/maze/Maze';\nimport { Thermite } from './features/thermite_bossfight/Thermite'\nimport { Farming } from './features/farming_minigame/Farming'\nimport './App.css';\nimport Particles from \"react-tsparticles\";\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      \n      <Particles\n      id=\"tsparticles\"\n      options={{\n        fullScreen: {\n          enable: true,\n          zIndex: 0\n        },\n        background: {\n          color: {\n            value: \"rgb(147,70,17)\",\n          },\n          \n          opacity: 0.01\n        },\n        fpsLimit: 60,\n        interactivity: {\n          detectsOn: \"canvas\",\n          modes: {\n            bubble: {\n              distance: 400,\n              duration: 2,\n              opacity: 0.2,\n              size: 10,\n            }, \n          },\n        },\n        particles: {\n          color: {\n            value: [\n              \"#921212\",\n              \"#9e1b3e\",\n              \"#c3711a\",\n              \"#ff6b00\"\n            ]\n\n          },\n        \n          collisions: {\n            enable: false,\n          },\n          move: {\n            direction: \"none\",\n            enable: true,\n            outMode: \"out\",\n            random: true,\n            speed: 4,\n            straight: false,\n          },\n          number: {\n            density: {\n              enable: true,\n              value_area: 800,\n            },\n            value: 8,\n          },\n          opacity: {\n            value: 0.5,\n          },\n          shape: {\n            type: [\"polygon\", \"circle\"],\n          },\n          size: {\n            random: true,\n            value: 5,\n          },\n          rotate: {\n            direction: \"clockwise\",\n            animation: {\n              enable: true,\n              speed: 8\n            }\n          },\n          zIndex: {\n            opacityRate: 0.2,\n            sizeRate: 0.5\n          }\n        },\n        detectRetina: true,\n      }}\n      \n      >\n        </Particles>\n      <header className=\"App-header\" >\n      \n        \n        <div style={{zIndex: 1, backgroundColor: 'rgba(85, 85, 85, 0.3)'}}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"150px\" width=\"150px\" fill=\"#b2b2b2\" viewBox=\"0 0 64 64\" x=\"0px\" y=\"0px\">\n          <path d=\"M19.631,36.864A1,1,0,0,0,20.369,35c-.06-.023-.117-.05-.177-.074L21.9,24.688c.363.027.721.053,1.088.083-.13,10.067-2.308,23.656-3.627,31A7,7,0,0,0,26.252,64H39.238a6.994,6.994,0,0,0,6.935-7.953c-.378-2.729-1.417-9.59-3.2-17.076,4.679-.153,17.295-1.063,20.864-6.416a1,1,0,0,0,.155-.714C63.936,31.522,58.521,0,30,0,1.376,0,.012,22.725,0,22.955a1,1,0,0,0,.26.718A57.524,57.524,0,0,0,19.631,36.864ZM16.6,24.341l-2.129,7.808c-1.055-.6-2.058-1.215-3.006-1.837L14.5,24.236C15.181,24.267,15.881,24.3,16.6,24.341Zm-6.8,4.836q-1.236-.874-2.3-1.713l2.043-3.406c.876.023,1.8.051,2.779.087ZM5.914,26.2c-1.009-.843-1.851-1.6-2.511-2.222,1,0,2.288,0,3.826.031ZM18.3,34.115c-.692-.316-1.365-.647-2.025-.987l2.363-8.668c.412.025.838.056,1.258.084ZM34.878,24.046c-3.389-.462-6.71-.824-9.872-1.1a5,5,0,1,1,9.872,1.1Zm8.135,36.237A5,5,0,0,1,39.238,62H26.252a4.994,4.994,0,0,1-4.923-5.873c1.323-7.372,3.5-20.987,3.656-31.185,3.855.343,7.945.809,12.1,1.433,4.258,10.944,6.515,25.644,7.111,29.946A4.983,4.983,0,0,1,43.013,60.283Zm-3.657-33.55c.648.107,1.3.216,1.944.331l3.278,9.83c-.737.043-1.439.072-2.1.088A102.933,102.933,0,0,0,39.356,26.733ZM56,30.545v4.529c-.644.2-1.313.373-2,.534V29.95Q55.008,30.24,56,30.545Zm-4,5.479c-.378.07-.755.135-1.136.2l-1.5-7.488q1.328.318,2.634.665ZM47.228,28.24,48.881,36.5c-.759.094-1.51.174-2.246.239l-3.089-9.266Q45.4,27.832,47.228,28.24ZM58,34.368V31.191c1.133.383,2.235.794,3.319,1.219A11.188,11.188,0,0,1,58,34.368ZM54.939,15.051a42.8,42.8,0,0,1,4.619,8.694,4.994,4.994,0,0,1-4.619-8.694ZM39.586,3.422A27.9,27.9,0,0,1,49.964,9.363,6,6,0,0,1,39.586,3.422Zm-1.945-.537A7.993,7.993,0,0,0,51.417,10.77a33.082,33.082,0,0,1,2.332,2.673,6.99,6.99,0,0,0,6.509,12.174,46.755,46.755,0,0,1,1.393,4.774,118.874,118.874,0,0,0-24.78-6.062,7,7,0,1,0-13.86-1.556c-9.971-.8-18.032-.815-20.9-.788A22.525,22.525,0,0,1,3.723,16.3,7.994,7.994,0,0,0,15,9a7.872,7.872,0,0,0-.906-3.682C18,3.331,23.163,2,30,2A32.564,32.564,0,0,1,37.641,2.885ZM12.348,6.3A5.993,5.993,0,0,1,4.6,14.5,21.6,21.6,0,0,1,12.348,6.3Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M26.918,48.034a1.006,1.006,0,0,0-1.225.707,12.368,12.368,0,0,1-.588,1.812,1,1,0,0,0,1.79.894,12.993,12.993,0,0,0,.73-2.188A1,1,0,0,0,26.918,48.034Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M27.758,30.03a1,1,0,0,0-.728,1.213c.009.038.942,3.887-.02,10.616q-.153,1.065-.3,1.978a1,1,0,0,0,.823,1.15,1.034,1.034,0,0,0,.164.013,1,1,0,0,0,.986-.837c.1-.623.207-1.3.31-2.021,1.016-7.113.023-11.213-.02-11.385A1,1,0,0,0,27.758,30.03Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M33.341,46.92a1,1,0,0,0-1.28.6,11.342,11.342,0,0,1-.918,1.964,1,1,0,1,0,1.714,1.03A13.1,13.1,0,0,0,33.941,48.2,1,1,0,0,0,33.341,46.92Z\" >\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M33.876,36.008a1,1,0,0,0-.868,1.116,29.669,29.669,0,0,1,0,6.032,1,1,0,0,0,.889,1.1.955.955,0,0,0,.106.006,1,1,0,0,0,.993-.9,31.242,31.242,0,0,0,0-6.491A1,1,0,0,0,33.876,36.008Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M37.01,44.142l1,7a1,1,0,1,0,1.98-.284l-1-7a1,1,0,0,0-1.98.284Z\">\n            <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M61,53c0-.964-.123-9.459-4.4-10.978-2.728-.969-6.12,1.109-10.375,6.348a1,1,0,0,0-.119,1.077c.14.278,1.055,1.838,4.146,3.056a33.757,33.757,0,0,1-.8,8.963,1.963,1.963,0,0,0,.327,1.734,2,2,0,0,0,1.605.8h4.6a1.978,1.978,0,0,0,1.434-.609,2.033,2.033,0,0,0,.565-1.478,51.524,51.524,0,0,0-1.064-8.036C57.867,53.95,58.878,54,60,54A1,1,0,0,0,61,53Zm-5.02,9-4.608.015a35.888,35.888,0,0,0,.9-8.865,23.808,23.808,0,0,0,2.557.506A50.855,50.855,0,0,1,55.98,62ZM48.289,49.01c4.389-5.216,6.662-5.449,7.64-5.1,2.171.77,2.885,5.49,3.038,8.081C51.986,51.815,49.219,49.917,48.289,49.01Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"0;-2;0;-2;0;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"3s\" fill=\"freeze\"/>\n          <animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" values=\"-1, 20, 80;1, 20,80;-1,20,80\" dur=\"3s\" additive=\"sum\" repeatCount=\"indefinite\" />\n          </path>\n        \n        <animate attributeName=\"fill\" values=\"b2b2b2;704cb6;b2b2b2;\" dur=\"8s\" repeatCount=\"indefinite\"/>\n        \n      \n      \n\n        </svg>\n        <Farming/>\n        </div>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","\nconst pd = require('probability-distributions');\n\nexport interface CYOAOption {\n    description?: string;\n    title?: string;\n    action?: string;\n    image?: String;\n    cost: Cost;\n    destination: Room;\n    statuses: Array<StructureStatus>;\n}\n\nexport interface QuestStep {\n    options: Array<CYOAOption>;\n    active: boolean;\n}\n\nexport interface GreenFnParams {\n    linearP1: number;\n    quadraticP1: number;\n    twoPowerP1: number;\n}\n\nexport interface BlueFnParams {\n    normalP1: number;\n    normalP2: number;\n}\n\nexport interface RedFnParams  {\n    linearP1: number;\n}\n\n\nexport interface HPFnParams  {\n    linearP1: number;\n}\n\n\nexport interface Spell {\n    description: SpellList;\n    cooldown?: number;\n    available: boolean;\n}\n\n\nexport type GSResourceName = \"red\" | \"blue\" | \"green\" | \"hp\";\nexport type GameStatus = \"ready\" | \"started\" | \"victory\" | \"tgBossFight\" | \"thermiteBossFight\" | \"gameOver\" ;\nexport type StructureStatus = \"burnt\" | \"frozen\" | \"flourishing\";\n\n\nexport enum RoomList {\n    Desert = \"Desert\",\n    Volcano = \"Volcano\",\n    TempleRuins = \"Temple Ruins\",\n    TempleGuardian = \"Temple Guardian\",\n    Unknown = \"Unknown\",\n    Jungle = \"Jungle\",\n    Cave = \"Cave\",\n    Moon = \"Moon\",\n    Sandstorm = \"Sandstorm\",\n    Rabbit = \"Rabbit\",\n    Oasis = \"Oasis\",\n    Treasure = \"Treasure\",\n    Boulder = \"Boulder\",\n    TreeTops = \"Tree Tops\",\n    Monsters = \"Monsters\",\n    FungalColony = \"Fungal Colony\",\n    LavaFlow = \"Lava Flow\",\n    CrumblingBridge=\"Crumbling Bridge\",\n    TrappedInsect=\"Trapped Insect\",\n    Wastes=\"Wastes\",\n    Lost=\"Lost\",\n    IceChamber=\"Ice Chamber\",\n    MagmaWaterfall=\"Magma Waterfall\",\n    StatueRoom=\"Statue Room\",\n    GraniteRaft=\"Granite Raft\",\n    CageTrap=\"Cage Trap\",\n    VolcanoBoss=\"Volcano Boss\",\n    Altar=\"Altar\",\n    ObsidianHallway=\"Obsidian Hallway\",\n}\n\n\nexport enum SpellList {\n    Fireball = \"Fireball\",\n    FrostRay = \"Frost Ray\",\n    Heal = \"Heal\",\n    CommuneWithPlants = \"Commune with Plants\",\n    SpectralRope = \"Spectral Rope\"\n}\n\nexport type Cost = Record<GSResourceName, number>\nexport type ResourceBonus = Record<GSResourceName, number>\n\nexport const spells1 = {\n  Fireball: { description: SpellList.Fireball, cooldown: 20000, available: true, },\n  CommuneWithPlants: { description: SpellList.CommuneWithPlants, cooldown: 3000, available: true },\n  Heal:   { description: SpellList.Heal, cooldown: 5000, available: true},\n  FrostRay:   { description: SpellList.FrostRay, cooldown: 5000,  available: true, },\n  SpectralRope:  { description: SpellList.SpectralRope, cooldown: 5000, available: true, }\n}\n\nexport interface Room {\n    statuses: Array<StructureStatus>;\n    options: Array<CYOAOption>;\n    name: RoomList;\n  }\n\nexport function isCostSatisfiable(cost: Cost, resources: Record<GSResourceName, number>): boolean {\n    for (let c in cost) {\n        if (cost[c as keyof typeof cost] > resources[c as keyof typeof resources]) return false\n    }\n    return true\n}\n\nexport function removeResources(cost: Cost, resources: Record<GSResourceName, number>) {\n    for (let c in cost) {\n        resources[c as keyof typeof resources] -= cost[c as keyof typeof cost]\n    }\n    return resources\n}\n\nexport function addResources(cost: Cost, resources: Record<GSResourceName, number>) {\n    for (let c in cost) {\n        resources[c as keyof typeof resources] += cost[c as keyof typeof cost]\n    }\n    return resources\n}\n\nexport function combineGreenParams(a: GreenFnParams, b: GreenFnParams): GreenFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\nexport function combineRedParams(a: RedFnParams, b: RedFnParams): RedFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\nexport function combineBlueParams(a: BlueFnParams, b: BlueFnParams): BlueFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\n\n\nexport function greenFn(params: GreenFnParams) {\n    let total = 0.0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n    if (params.quadraticP1) {\n      total += (params.quadraticP1 * params.quadraticP1)\n    }\n    if (params.twoPowerP1) {\n      total += (Math.pow(2, params.twoPowerP1))\n    }\n    return total\n  }\n  \n  \n  export function redFn(params: RedFnParams) {\n    let total = 0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n  \n    return total\n  }\n  \n  \n  \n  \n  export function blueFn(params: BlueFnParams) {\n    let total = 0.0\n    if (params.normalP1 > 0 && params.normalP2 > 0) {\n      total += Math.max(0, pd.rnorm(1,params.normalP1, params.normalP2))\n    }\n  \n    return total\n  }\n  \n  \n  \n  export function hpFn(params: HPFnParams) {\n    let total = 0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n  \n    return total\n  }","import { Cost, ResourceBonus } from './Types'\nfunction shuffle<T>(a: Array<T>): Array<T> {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nexport let Item: [Cost, ResourceBonus]\n\nexport function initializeTier1(): Array<typeof Item> {\n    let itemsTier1: Array<ResourceBonus> = [\n        { green: 0, red: 0, blue: 1, hp: 0 },\n        { green: 0, red: 19, blue: 0, hp: 0 },\n        { green: 42, red: 0, blue: 0, hp: 0 },\n        { green: 66, red: 0, blue: 0, hp: 0 },\n        { green: 20, red: 20, blue: 0, hp: 0 },\n        { green: 7, red: 2, blue: 0, hp: 10 },\n    ]\n\n    let costsTier1: Array<Cost> = [\n        { green: 65, red: 0, blue: 0, hp: 0 },\n        { green: 87, red: 0, blue: 0, hp: 0 },\n        { green: 123, red: 0, blue: 0, hp: 0 },\n        { green: 198, red: 0, blue: 0, hp: 0 },\n        { green: 270, red: 0, blue: 0, hp: 0 },\n        { green: 1033, red: 0, blue: 0, hp: 0 },\n    ]\n\n    itemsTier1 = shuffle(itemsTier1)\n    let items: Array<typeof Item> = []\n    for (let i in costsTier1) {\n        items.push([costsTier1[i], itemsTier1[i]]);\n    }\n    return items\n}\n\nlet itemsTier2: Array<ResourceBonus> = [\n    { green: 0, red: 0, blue: 104, hp: 0 },\n    { green: 0, red: 290, blue: 0, hp: 0 },\n    { green: 4255, red: 0, blue: 0, hp: 0 },\n    { green: 660, red: 0, blue: 0, hp: 24 },\n    { green: 808, red: 935, blue: 0, hp: 0 },\n    { green: 7, red: 2, blue: 0, hp: 0 },\n]\n\n","import { QuestStep, combineRedParams, StructureStatus, Room, RoomList, SpellList } from './Types'\nimport { match, __, not, select, when } from 'ts-pattern';\nimport { GameState } from './gameStateSlice';\nimport {Draft } from '@reduxjs/toolkit';\n\n\n\n\nexport function jungleRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball && !state.room.statuses.includes('burnt')) {\n        state.room.statuses.push('burnt');\n        state.redFnParams = combineRedParams({ linearP1: 3 }, state.redFnParams)\n        state.combatLogMessages.unshift('You feed on the energy from the withering vines')\n    } else if (spell.description === SpellList.CommuneWithPlants && !state.room.statuses.includes('burnt')) {\n        state.combatLogMessages.unshift('Vines sway in sync and you hear a whisper \"Seek the golden slug\"')\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function caveRoomInteraction(state, spell) {\n    if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('Water freezes into a path to the far wall')\n    } else if (spell.description === SpellList.SpectralRope && state.room.statuses.includes('frozen')) {\n        state.combatLogMessages.unshift('You climb in to a narrow fissure, revealing a the Moon Door')\n        state.room.options.push(moonDoor);\n    } else if (spell.description === SpellList.CommuneWithPlants && !state.room.statuses.includes('burnt')) {\n        state.combatLogMessages.unshift('A phosphorescent mushroom breathes in and lets out a puff of spores in the shape of a bridge and rope')\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function desertRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball) {\n        state.combatLogMessages.unshift('Molten glass sinks in to the sand')\n    } else if (spell.description === SpellList.CommuneWithPlants ) {\n        state.combatLogMessages.unshift('Wails from the void echo in your head. You stumble and fall to your knees')\n        state.resources.hp -= 10;\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function treeTopsRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball) {\n        state.combatLogMessages.unshift('Leaves crackle and crumple but the trees stand strong')\n    } else if (spell.description === SpellList.CommuneWithPlants ) {\n        state.combatLogMessages.unshift('Trees lean slightly to the left')\n    } else if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('Branches shrink back, revealing the Rabbit Door')\n        state.room.options.push(rabbitDoor); \n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function rabbitRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball ) {\n        state.room.statuses.push('burnt');\n        state.combatLogMessages.unshift('Charred remains litter the floor. Rocks begin to fall from the ceiling')\n        state.resources.hp -= 10;\n        //Add hpFn params for faster reduction for the rest of the round\n    } else if (spell.description === SpellList.Heal ) {\n        state.combatLogMessages.unshift('The rabbit leaps around the room with great vigor. You feel energized just watching it.')\n        //TODO: More lore\n        //TODO: more, maybe better greenFnParams, \n    } else if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen') && !state.room.statuses.includes('burnt')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('You enrage the rabbit. It lunges at you, biting your index finger off, then bounces away')\n    } else if (spell.description === SpellList.SpectralRope) {\n        state.combatLogMessages.unshift('You lower a rope through a crack in the floor, giving you a better avenue to proceed')\n        state.room.options.push(ropeMonsterDoor)\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function monstersRoomInteraction(state, spell) {\n    \n}\n\nexport function boulderDodgeRoomInteraction(state, spell) {\n    state.combatLogMessages.unshift('No effect')\n}\n\n\nexport function desertDoorInteraction(state, spell) {\n    if (spell.type === 'Fireball') {\n        state.combatLogMessages.unshift('Flames dance across the sand haplessly');\n    } else {\n        state.combatLogMessages.unshift('No effect');\n    }\n}\nexport function monstersDoorInteraction(state: Draft<GameState>, spell) {\n    if (spell.description === SpellList.Fireball || spell.description === SpellList.FrostRay ) {\n        state.room.statuses.push('burnt');\n\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] / 2\n            }\n        })\n        state.combatLogMessages.unshift('You batter the monsters with your magic');\n\n    } else if ( spell.description === SpellList.FrostRay ) {\n        state.room.statuses.push('frozen');\n\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] / 2\n            }\n        })\n        state.combatLogMessages.unshift('You batter the monsters with your magic');\n\n    } else if (spell.description === 'Heal' ) {\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] * 2\n            }\n        })\n        state.combatLogMessages.unshift('Your magic empowers the monsters');\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function getRoomInteractions(room: RoomList) {\n    return match(room)\n    .with(RoomList.Jungle,() => jungleRoomInteraction)\n    .with(RoomList.Cave, () =>caveRoomInteraction)\n    .with(RoomList.Desert,() => desertRoomInteraction)\n    .with(RoomList.Boulder, () =>boulderDodgeRoomInteraction)\n    .with(RoomList.Monsters,() => monstersRoomInteraction)\n    .with(RoomList.TreeTops,() => treeTopsRoomInteraction)\n    .with(RoomList.Rabbit,() => rabbitRoomInteraction)\n    .with(RoomList.FungalColony,() => EmptyFn)\n    .with(RoomList.Treasure,() => EmptyFn)\n    .with(RoomList.Moon,() => EmptyFn)\n    .with(RoomList.Oasis,() => EmptyFn)\n    .with(RoomList.Volcano,() => EmptyFn)\n    .with(RoomList.Unknown,() => EmptyFn)\n    .with(RoomList.TempleRuins,() => EmptyFn)\n    .with(RoomList.TempleGuardian,() => EmptyFn)  \n    .with(RoomList.Sandstorm,() => EmptyFn)\n    .with(RoomList.LavaFlow ,() => EmptyFn)\n    .with(RoomList.CrumblingBridge,() => EmptyFn)\n    .with(RoomList.TrappedInsect,() => EmptyFn)\n    .with(RoomList.Wastes,() => EmptyFn)\n    .with(RoomList.Lost,() => EmptyFn)\n    .with(RoomList.IceChamber,() => EmptyFn)\n    .with(RoomList.MagmaWaterfall,() => EmptyFn)\n    .with(RoomList.StatueRoom,() => EmptyFn)\n    .with(RoomList.GraniteRaft,() => EmptyFn)\n    .with(RoomList.CageTrap,() => EmptyFn)\n    .with(RoomList.VolcanoBoss,() => EmptyFn)\n    .with(RoomList.Altar,() => EmptyFn)\n    .with(RoomList.ObsidianHallway,() => EmptyFn)\n    .exhaustive()\n}\n\nexport function getDoorInteractions(room: RoomList){\n    return match(room)\n    .with(RoomList.Jungle,() => EmptyFn)\n    .with(RoomList.Cave,() => EmptyFn)\n    .with(RoomList.Desert,() => EmptyFn)\n    .with(RoomList.Boulder,() => monstersDoorInteraction)\n    .with(RoomList.Monsters,() => EmptyFn)\n    .with(RoomList.TreeTops,() => EmptyFn)\n    .with(RoomList.Rabbit,() => EmptyFn)\n    .with(RoomList.FungalColony, () =>EmptyFn)\n    .with(RoomList.Treasure, () =>EmptyFn)\n    .with(RoomList.Moon,() => EmptyFn)\n    .with(RoomList.Oasis,() => EmptyFn)\n    .with(RoomList.Volcano,() => EmptyFn)\n    .with(RoomList.Unknown,() => EmptyFn)\n    .with(RoomList.TempleRuins,() => EmptyFn)\n    .with(RoomList.TempleGuardian,() => EmptyFn)\n    .with(RoomList.Sandstorm,() => EmptyFn)\n    .with(RoomList.LavaFlow ,() => EmptyFn)\n    .with(RoomList.CrumblingBridge,() => EmptyFn)\n    .with(RoomList.TrappedInsect,() => EmptyFn)\n    .with(RoomList.Wastes,() => EmptyFn)\n    .with(RoomList.Lost,() => EmptyFn)\n    .with(RoomList.IceChamber,() => EmptyFn)\n    .with(RoomList.MagmaWaterfall,() => EmptyFn)\n    .with(RoomList.StatueRoom,() => EmptyFn)\n    .with(RoomList.GraniteRaft,() => EmptyFn)\n    .with(RoomList.CageTrap,() => EmptyFn)\n    .with(RoomList.VolcanoBoss,() => EmptyFn)\n    .with(RoomList.Altar,() => EmptyFn)\n    .with(RoomList.ObsidianHallway,() => EmptyFn)\n    .exhaustive()\n}\n\nfunction EmptyFn(state, spell) {\n    \n}\n\nexport let FakeRoom: Room = {\n    name: RoomList.Cave,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let treasureRoom: Room = {\n    name: RoomList.Treasure,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let volcanoBossFightRoom: Room = {\n    name: RoomList.VolcanoBoss,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.VolcanoBoss, action: \"Challenge the Volcano Boss\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let cageTrapRoom: Room = {\n    name: RoomList.CageTrap,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.VolcanoBoss, action: \"Challenge the Volcano Boss\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: volcanoBossFightRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let graniteRaftRoom: Room = {\n    name: RoomList.GraniteRaft,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.CageTrap, action: \"Drift aimlessly\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: cageTrapRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let trappedInsectRoom: Room = {\n    name: RoomList.TrappedInsect,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.GraniteRaft, action: \"Ride the granite raft\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: graniteRaftRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let altarRoom: Room = {\n    name: RoomList.TrappedInsect,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TrappedInsect, action: \"Move ahead into the darkness\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: trappedInsectRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let obsidianHallway: Room = {\n    name: RoomList.ObsidianHallway,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Altar, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: altarRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let lavaFlowRoom: Room = {\n    name: RoomList.LavaFlow,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.ObsidianHallway, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: obsidianHallway, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Altar, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: altarRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let crumblingBridge: Room = {\n    name: RoomList.CrumblingBridge,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.LavaFlow, action: \"Leap from stone to stone\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lavaFlowRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let lost: Room = {\n    name: RoomList.CrumblingBridge,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Cave, action: \"Journey On\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let wastes: Room = {\n    name: RoomList.Wastes,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Lost, action: \"Navigate the wastes\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lost, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let templeGuardianRoom: Room = {\n    name: RoomList.TempleGuardian,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n        { title: RoomList.Cave, action: \"Challenge the Temple Guardian\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let oasisRoom: Room = {\n    name: RoomList.Oasis,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TempleGuardian, action: \"Challenge the Temple Guardian\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: templeGuardianRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let unknownRoom: Room = {\n    name: RoomList.Unknown,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n\n    ]\n}\n\nexport let volcanoRoom: Room = {\n    name: RoomList.Volcano,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.LavaFlow, action: \"Brave the fiery rocks\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lavaFlowRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Unknown, action: \"Plunge in to the unknown\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: unknownRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let boulderRoom: Room = {\n    name: RoomList.Boulder,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Oasis, action: \"Dive left into the web-covered pit\", cost: { green: 3200, red: 0, blue: 0, hp: 0 }, destination: oasisRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Volcano, action: \"Crawl over the wall\", cost: { green: 48000, red: 0, blue: 0, hp: 0 }, destination: volcanoRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let monstersRoom: Room = {\n    name: RoomList.Monsters,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Boulder, action: \"Tumble away from the ferocious monsters\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: boulderRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let rabbitRoom: Room = {\n    name: RoomList.Rabbit,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Monsters, action: \"Slide down tunnel\", cost: { green: 900, red: 1200, blue: 100, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nlet ropeMonsterDoor = { title: RoomList.Monsters, action: \"Rappel down behind the monster\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() }\n\nexport let treeTopsRoom: Room = {\n    name: RoomList.TreeTops,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Monsters, action: \"Leap into the musty cove\", cost: { green: 75330, red: 0, blue: 0, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\n\nexport let templeRuinsRoom: Room = {\n    name: RoomList.TempleRuins,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TempleGuardian, action: \"Face the Temple Guardian\", cost: { green: 37500, red: 1200, blue: 50, hp: 0 }, destination: templeGuardianRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let jungleRoom: Room = {\n    name: RoomList.Jungle,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TreeTops, action: \"Shimmy into the Tree Tops\", cost: { green: 2134, red: 0, blue: 0, hp: 0 }, destination: treeTopsRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.TempleRuins, action: \"Venture towards the Temple Ruins\", cost: { green: 4444, red: 0, blue: 0, hp: 0 }, destination: templeRuinsRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let sandstormRoom: Room = {\n    name: RoomList.Sandstorm,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let desertRoom: Room = {\n    name: RoomList.Desert,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Volcano, action: \"Ascend the cliff face\", cost: { green: 0, red: 10000, blue: 0, hp: 0 }, destination: volcanoRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Wastes, action: \"Shy away from the blazing mountain\", cost: { green: 0, red: 10000, blue: 0, hp: 0 }, destination: wastes, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let moonRoom: Room = {\n    name: RoomList.Moon,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let fungalColonyRoom: Room = {\n    name: RoomList.FungalColony,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Moon, action: \"Gaze deeply at the moon above\", cost: { green: 0, red: 0, blue: 100000, hp: 0 }, destination: moonRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nlet moonDoor = { title: RoomList.FungalColony, action: \"Venture behind the veil\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: fungalColonyRoom, statuses: new Array<StructureStatus>() }\nlet rabbitDoor = { title: RoomList.Rabbit, action: \"Hurdle over the frozen brambles\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: rabbitRoom, statuses: new Array<StructureStatus>() }\n\n\nexport let caveRoom: Room = {\n    name: RoomList.Cave,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Jungle, action: \"Swing from the vines\", cost: { green: 340, red: 0, blue: 0, hp: 0 }, destination: jungleRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Desert, action: \"Brave the wastes\", cost: { green: 970, red: 800, blue: 290, hp: 0 }, destination: desertRoom, statuses: new Array<StructureStatus>() }\n    ]\n}\n\n\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface ThermiteState {\n  grid: Array<Array<number>>;\n  status: 'idle' | 'starting' | 'started' | 'finished';\n  bossHP: number;\n  enabled: boolean;\n}\n\nconst initialState: ThermiteState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(),\n  status: 'idle',\n  bossHP: 100,\n  enabled: false\n};\n\nfunction initializeGrid(){\n  let n = 4\n  let randomGrid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => Math.round(Math.random())))\n  return randomGrid\n}\n\n\nexport const thermiteSlice = createSlice({\n  name: 'thermite',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n\n      //state.value += 1;\n    },\n    triggerThermite: (state, action) => {\n      let coords = action.payload;\n      //let coords = [0,2]\n      state.grid[coords[0]][coords[1]]  = state.grid[coords[0]][coords[1]] === 1 ? 2 : 3\n      //state.value += 1;\n    },\n    startGrid: (state) => {\n      state.status = 'starting'\n      state.grid = initializeGrid()\n    },\n    enableButtons: (state) => {\n      state.status = 'started'\n    },\n    winThermiteBossFight: (state) => {\n\n    },\n\n    calculateDamage: (state) => {\n      state.bossHP -=  ((state.grid.flatMap(i => i).filter(i => i === 2).length * 4) - (state.grid.flatMap(i => i).filter(i => i === 3).length * 2))\n\n      state.status = 'finished'\n    },\n\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      //state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment,incrementByAmount, startGrid, triggerThermite, enableButtons, calculateDamage, winThermiteBossFight } = thermiteSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectGrid = (state: RootState) => state.thermite.grid;\nexport const selectStatus = (state: RootState) => state.thermite.status;\nexport const selectBossHP = (state: RootState) => state.thermite.bossHP;\n\n\nexport default thermiteSlice.reducer;\n","import { types } from '@babel/core';\nimport { createAsyncThunk, createSlice, PayloadAction, current, Draft } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport {\n  Spell,\n  Cost,\n  GreenFnParams,\n  BlueFnParams,\n  RedFnParams,\n  redFn,\n  blueFn,\n  greenFn,\n  hpFn,\n  Room,\n  GSResourceName,\n  HPFnParams,\n  GameStatus,\n  combineRedParams,\n  combineBlueParams,\n  combineGreenParams,\n  addResources,\n  removeResources,\n  isCostSatisfiable,\n  spells1,\n  RoomList,\n  SpellList\n} from './Types'\nimport { initializeTier1, Item, } from './Items'\nimport { caveRoom, getRoomInteractions, getDoorInteractions } from './Quest'\nimport {\n  winThermiteBossFight,\n} from '../thermite_bossfight/thermiteSlice';\n\n\nlet GreenUpgrade: [Cost, boolean, boolean, GreenFnParams, Spell[]]\nlet BlueUpgrade: [Cost, boolean, number, BlueFnParams, Spell[]]\nlet RedUpgrade: [Cost, boolean, boolean, RedFnParams, Spell[]]\n\n\nexport type SlimeBossStatus = \"burnable\" | \"burnt\" | \"freezable\" | \"frozen\" | \"normal\" | \"attacking\" | \"inactive\";\nconst SlimeBossStatuses: Array<SlimeBossStatus> = [\"burnable\", \"freezable\", \"normal\", \"normal\", \"attacking\", \"inactive\", \"inactive\"]\nexport const SlimeBossStatusColors = {\n  \"burnable\": \"#ff0000\",\n  \"burnt\": \"#860f11\",\n  \"freezable\": \"#00e4ff\",\n  \"frozen\": \"#00a6b9\",\n  \"normal\": \"#d2d2d2\",\n  \"attacking\": \"#000000\",\n  \"inactive\": \"#f3b179\",\n}\n\n\nexport interface Achievement {\n  name: String;\n  requirement: number;\n  description?: String;\n}\n\nexport interface SlimeBoss {\n  bossHp: number;\n  status: SlimeBossStatus;\n}\n\n\n\nexport interface GameState {\n  resources: Record<GSResourceName, number>;\n  boss: SlimeBoss;\n\n  gameLoopInterval: number;\n  availableSpells: Array<Spell>;\n  room: Room;\n  items: Array<typeof Item>;\n  redFnParams: RedFnParams;\n  greenFnParams: GreenFnParams;\n  blueFnParams: BlueFnParams;\n  hpFnParams: HPFnParams;\n  status: GameStatus;\n  combatLogMessages: Array<String>;\n  greenUpgrades: Array<typeof GreenUpgrade>;\n  redUpgrades: Array<typeof RedUpgrade>;\n  blueUpgrades: Array<typeof BlueUpgrade>;\n  blueDist: Array<number>;\n  bluePast: Array<number>;\n  greenDist: Array<number>;\n  redDist: Array<number>;\n}\n\nconst initialState: GameState = {\n  resources: {\n    red: 1000000, // 0\n    green: 10000000, // 20\n    blue: 100000003, //3\n    hp: 100\n  },\n  boss: {\n    bossHp: 100,\n    status: 'normal'\n  },\n  room: caveRoom,\n  gameLoopInterval: 0,\n  availableSpells: [],//Object.values(spells1),\n  items: initializeTier1(),\n  redFnParams: { linearP1: 1 },\n  greenFnParams: { linearP1: 2, quadraticP1: 0, twoPowerP1: 0 },\n  blueFnParams: { normalP1: 0, normalP2: 0 },\n  hpFnParams: { linearP1: 0.1 },\n  blueDist: [0, 0, 0, 0],\n  bluePast: [...Array(40).keys()].map(i => 0),\n  greenDist: [...Array(40).keys()].map(i => 0),\n  redDist: [...Array(40).keys()].map(i => 0),\n  status: \"ready\",\n  combatLogMessages: [],\n  greenUpgrades: [\n    [{ green: 13, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 0, twoPowerP1: 0 }, []],\n    [{ green: 29, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 0, twoPowerP1: 0 }, [spells1.CommuneWithPlants]],\n    [{ green: 105, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 4, quadraticP1: 0, twoPowerP1: 0 }, []],\n    [{ green: 82, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 0 }, [spells1.SpectralRope]],\n    [{ green: 379, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0, quadraticP1: 3, twoPowerP1: 0 }, []],\n    [{ green: 1800, red: 0, blue: 7, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 10 }, []],\n    [{ green: 300000, red: 100, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 2 }, [spells1.Heal]],\n    [{ green: 1000000000, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 10 }, []],\n\n  ],\n  redUpgrades: [\n    [{ green: 13, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3 }, [spells1.Fireball]],\n    [{ green: 37, red: 0, blue: 1, hp: 0 }, false, false, { linearP1: 0.3 }, []],\n    [{ green: 105, red: 0, blue: 3, hp: 0 }, false, false, { linearP1: 4 }, []],\n    [{ green: 10, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3 }, []],\n    [{ green: 7000, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 8 }, []],\n    [{ green: 61589, red: 0, blue: 55, hp: 0 }, false, false, { linearP1: 22 }, []],\n\n  ],\n  blueUpgrades: [\n    [{ green: 9, red: 45, blue: 0, hp: 0 }, false, 0, { normalP1: 0.0002, normalP2: 0.0001 }, []],\n    [{ green: 499, red: 0, blue: 2, hp: 0 }, false, 0, { normalP1: 0, normalP2: 0.5 }, [spells1.FrostRay]],\n    [{ green: 0, red: 389, blue: 21, hp: 0 }, false, 0, { normalP1: 2, normalP2: 0 }, []],\n    [{ green: 0, red: 0, blue: 131, hp: 0 }, false, 0, { normalP1: 0, normalP2: 10 }, []],\n    [{ green: 0, red: 0, blue: 305, hp: 0 }, false, 0, { normalP1: 1, normalP2: 10 }, []],\n  ]\n\n\n};\n\n\nconst initialStateCopy = Object.assign({}, initialState)\n\nexport const gameStateSlice = createSlice({\n  name: 'gameState',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    startLoop: (state) => {\n      state.status = 'started';\n    },\n    resetState: (state) => {\n      clearInterval(state.gameLoopInterval);\n      Object.assign(state, initialStateCopy);\n    },\n    incrementRed: (state) => {\n      state.resources.red += redFn(state.redFnParams);\n      state.redDist.push(redFn(state.redFnParams));\n      state.redDist.shift();\n    },\n    castSpell: (state, payload) => {\n      if (payload) {\n        let spell = state.availableSpells.find(x => x.description === payload.payload.description)\n        if (spell) {\n          spell.available = false\n          handleSpell(state, spell)\n        }\n      }\n    },\n    resetSpell: (state, payload) => {\n      if (payload) {\n        let spell = state.availableSpells.find(x => x.description === payload.payload.description)\n        if (spell) {\n          spell.available = true\n        }\n      }\n    },\n    incrementBlue: (state) => {\n      state.resources.blue += blueFn(state.blueFnParams);\n      state.blueDist = [...Array(1000).keys()].map(i => Math.round(blueFn(state.blueFnParams)))\n      state.bluePast.push(state.resources.blue);\n      state.bluePast.shift();\n    },\n    incrementGreen: (state) => {\n      state.resources.green += greenFn(state.greenFnParams);\n      state.greenDist.push(state.resources.green);\n      state.greenDist.shift();\n    },\n    incrementHP: (state) => {\n      state.resources.hp -= hpFn(state.hpFnParams);\n      if (state.resources.hp <= 0) {\n        state.status = \"gameOver\"\n      }\n    },\n\n    attackBoss: (state, action) => {\n      if (action.payload.description === SpellList.Fireball && state.boss.status === 'burnable') {\n        state.boss.status = 'burnt'\n        state.boss.bossHp -= 30\n      } else if (action.payload.description === SpellList.Fireball && state.boss.status === 'normal') {\n        state.boss.bossHp -= 20\n      } else if (action.payload.description === SpellList.FrostRay && state.boss.status === 'freezable') {\n        state.boss.status = 'frozen'\n        state.boss.bossHp -= 30\n      } else if (action.payload.description === SpellList.FrostRay && state.boss.status === 'normal') {\n        state.boss.bossHp -= 20\n      } else if (action.payload.description === 'Gem Attack' && state.boss.status === 'normal') {\n        state.boss.status = 'inactive'\n        state.boss.bossHp -= 10\n      } else if (action.payload.description === 'Gem Attack' && state.availableSpells.find(x => x.description === SpellList.SpectralRope && !x.available) && state.boss.status === 'normal') {\n        state.boss.status = 'inactive'\n        state.boss.bossHp -= 15\n      }\n      if (state.boss.bossHp <= 0) {\n        state.status = 'victory'\n      }\n    },\n    startTempleGuardianBossFight: (state) => {\n      state.status = 'tgBossFight'\n      clearInterval(state.gameLoopInterval)\n      state.gameLoopInterval = NaN\n    },\n    startThermiteBossFight: (state) => {\n      state.status = 'thermiteBossFight'\n      clearInterval(state.gameLoopInterval)\n      state.gameLoopInterval = NaN\n    },\n    bossAttack: (state) => {\n      if (state.availableSpells.find(x => x.description === SpellList.SpectralRope && !x.available) || state.boss.status === 'frozen' || state.boss.status === 'burnt') {\n        state.resources.hp -= 3\n      } else {\n        state.resources.hp -= 5\n      }\n      state.boss.status = SlimeBossStatuses[Math.round(Math.random() * SlimeBossStatuses.length)]\n      if (state.resources.hp <= 0) {\n        state.status = 'gameOver'\n      }\n\n    },\n    incrementBossHP: (state) => {\n      state.boss.bossHp -= (4 * Math.random())\n      if (state.boss.bossHp <= 0) {\n        state.status = \"victory\"\n      }\n    },\n    boulderKill: (state) => {\n      if (state.room.name === RoomList.Boulder) {\n        state.status = \"gameOver\"\n      }\n    },\n\n    setGameLoopIntervals: (state, action) => {\n      state.gameLoopInterval = action.payload\n    },\n    clearGameLoopIntervals: (state) => {\n      clearInterval(state.gameLoopInterval);\n      state.gameLoopInterval = 0;\n    },\n    addCombatLogMessages: (state, action) => {\n      state.combatLogMessages.unshift(action.payload)\n    },\n    clearCombatLogMessages: (state) => {\n      state.combatLogMessages = []\n    },\n    buyItem: (state, action) => {\n      if (action.payload.item) {\n        let item = state.items[0]\n        let currentItem = current(item)\n        if (!item || !currentItem || action.payload.item !== currentItem) {\n          return\n        }\n        if (!isCostSatisfiable(currentItem[0], state.resources)) {\n          return\n        }\n        state.resources = removeResources(currentItem[0], state.resources)\n        state.resources = addResources(currentItem[1], state.resources)\n        state.items.shift()\n      }\n    },\n    stepQuest: (state, action) => {\n      let step = state.room.options\n      let currentStep = current(step)\n      if (!step || !currentStep) {\n        return\n      }\n\n      let currentChoice = currentStep.find(x => x === action.payload.choice)\n      if (!currentChoice) {\n        return\n      }\n      if (!isCostSatisfiable(currentChoice.cost, state.resources)) {\n        return\n      }\n      state.resources = removeResources(currentChoice.cost, state.resources)\n      if (currentChoice.destination.options.length == 0) {\n        state.status = 'victory'\n      }\n\n      state.room = currentChoice.destination\n\n\n    },\n    upgrade: (state, action) => {\n      if (action.payload.green) {\n        let upgrade = state.greenUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.green !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] = true\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.greenFnParams = combineGreenParams(state.greenFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n      if (action.payload.red) {\n        let upgrade = state.redUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.red !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] = true\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.redFnParams = combineRedParams(state.redFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n      if (action.payload.blue) {\n        let upgrade = state.blueUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.blue !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] += 1\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.blueFnParams = combineBlueParams(state.blueFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n    },\n\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(winThermiteBossFight, (state) => {\n        state.status = 'victory'\n      })\n    }\n  \n\n});\n\nfunction handleSpell(state: Draft<GameState>, spell: Spell) {\n  let interaction = getRoomInteractions(state.room.name)\n  let result = interaction(state, spell)\n\n  let doorResults = state.room.options.map(x => getDoorInteractions(x.destination.name)(state, spell))\n}\n\nexport const { incrementRed, incrementBossHP, resetState, startTempleGuardianBossFight, startThermiteBossFight, startLoop, boulderKill, attackBoss, bossAttack, addCombatLogMessages, clearCombatLogMessages, incrementGreen, incrementBlue, setGameLoopIntervals, clearGameLoopIntervals, incrementHP, castSpell, resetSpell, buyItem, stepQuest, upgrade } = gameStateSlice.actions;\n\n\nexport const selectRed = (state: RootState) => state.gameState.resources.red;\nexport const selectBlue = (state: RootState) => state.gameState.resources.blue;\nexport const selectGreen = (state: RootState) => state.gameState.resources.green;\nexport const selectHP = (state: RootState) => state.gameState.resources.hp;\nexport const selectBossHP = (state: RootState) => state.gameState.boss.bossHp;\nexport const selectBossStatus = (state: RootState) => state.gameState.boss.status;\nexport const selectCombatLogMessages = (state: RootState) => state.gameState.combatLogMessages;\nexport const selectGreenFnP1 = (state: RootState) => state.gameState.greenFnParams.linearP1;\nexport const selectRoomName = (state: RootState) => state.gameState.room.name;\n\nexport const selectNextDoors = (state: RootState) => state.gameState.room.options || [];\nexport const selectGameLoopInterval = (state: RootState) => state.gameState.gameLoopInterval;\n\nexport const selectSpells = (state: RootState) => state.gameState.availableSpells;\nexport const selectGameStatus = (state: RootState) => state.gameState.status;\nexport const selectBlueDist = (state: RootState) => state.gameState.blueDist;\nexport const selectBluePast = (state: RootState) => state.gameState.bluePast;\nexport const selectGreenDist = (state: RootState) => state.gameState.greenDist;\nexport const selectRedDist = (state: RootState) => state.gameState.redDist;\nexport const selectGreenUpgradeCost = (state: RootState) => state.gameState.greenUpgrades.find(x => !x[1]);\nexport const selectRedUpgradeCost = (state: RootState) => state.gameState.redUpgrades.find(x => !x[1]);\nexport const selectBlueUpgradeCost = (state: RootState) => state.gameState.blueUpgrades.find(x => !x[1]);\nexport const selectItemCost = (state: RootState) => state.gameState.items[0];\n\n\nexport default gameStateSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux'\n\nimport counterReducer from '../features/counter/counterSlice';\nimport gameStateReducer from '../features/gameState/gameStateSlice';\nimport thermiteReducer from '../features/thermite_bossfight/thermiteSlice';\nimport farmingReducer from '../features/farming_minigame/farmingSlice';\n\nconst currentVersion = '0.1.1'\n\nlet persistedState = localStorage.getItem('reduxState') \n                       ? JSON.parse(localStorage.getItem('reduxState') || '{}')\n                       : {}\nif(persistedState && persistedState.farming && persistedState.farming.version !== currentVersion){\n  persistedState = {}\n}\nif(persistedState && persistedState.gameState && persistedState.gameState.status && persistedState.gameState.status === 'started'){\n   persistedState.gameState.status = 'ready'\n}\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    gameState: gameStateReducer,\n    thermite: thermiteReducer,\n    farming: farmingReducer\n  },\n  preloadedState: persistedState\n},);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nconst backgroundAudio = new Audio(\"./MushroomBluegrass.mp3\")\n  backgroundAudio.addEventListener('ended', function () {\n    this.currentTime = 0;\n    this.play();\n    console.log('playing again')\n  }, false);\n  backgroundAudio.play()\n  backgroundAudio.volume = 0.3\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}