{"version":3,"sources":["features/thermite_bossfight/Thermite.module.css","features/gameState/Counter.module.css","features/gameState/Types.ts","app/hooks.ts","features/gameState/Items.ts","features/gameState/Quest.ts","features/thermite_bossfight/thermiteSlice.ts","features/gameState/gameStateSlice.ts","features/gameState/Utils.tsx","features/gameState/Draft.tsx","features/gameState/CYOA.tsx","features/gameState/TechTree.tsx","features/gameState/GameWrapper.tsx","features/thermite_bossfight/Thermite.tsx","features/gameState/BossFight.tsx","features/gameState/GameOver.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/farming_minigame/farmingSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","RoomList","SpellList","useAppDispatch","useDispatch","useAppSelector","useSelector","pd","require","spells1","Fireball","description","cooldown","available","CommuneWithPlants","Heal","FrostRay","SpectralRope","isCostSatisfiable","cost","resources","c","removeResources","combineRedParams","a","b","i","redFn","params","total","linearP1","blueFn","normalP1","normalP2","Math","max","rnorm","jungleRoomInteraction","state","spell","room","statuses","includes","combatLogMessages","unshift","push","redFnParams","caveRoomInteraction","options","moonDoor","desertRoomInteraction","hp","treeTopsRoomInteraction","rabbitDoor","rabbitRoomInteraction","ropeMonsterDoor","monstersRoomInteraction","boulderDodgeRoomInteraction","monstersDoorInteraction","map","o","EmptyFn","FakeRoom","name","Cave","Array","volcanoBossFightRoom","Treasure","VolcanoBoss","title","action","green","red","blue","destination","cageTrapRoom","CageTrap","graniteRaftRoom","GraniteRaft","trappedInsectRoom","TrappedInsect","altarRoom","obsidianHallway","ObsidianHallway","Altar","lavaFlowRoom","LavaFlow","lost","CrumblingBridge","wastes","Wastes","Lost","templeGuardianRoom","TempleGuardian","oasisRoom","Oasis","unknownRoom","Unknown","volcanoRoom","Volcano","boulderRoom","Boulder","monstersRoom","Monsters","rabbitRoom","Rabbit","treeTopsRoom","TreeTops","templeRuinsRoom","TempleRuins","jungleRoom","Jungle","desertRoom","Sandstorm","Desert","moonRoom","Moon","fungalColonyRoom","FungalColony","caveRoom","initialState","grid","initializeGrid","status","bossHP","enabled","keys","j","round","random","thermiteSlice","createSlice","reducers","increment","triggerThermite","coords","payload","startGrid","enableButtons","winThermiteBossFight","calculateDamage","flatMap","filter","length","incrementByAmount","actions","selectGrid","thermite","selectStatus","selectBossHP","SlimeBossStatuses","SlimeBossStatusColors","boss","bossHp","gameLoopInterval","availableSpells","items","itemsTier1","costsTier1","floor","shuffle","initializeTier1","greenFnParams","quadraticP1","twoPowerP1","blueFnParams","hpFnParams","blueDist","bluePast","greenDist","redDist","greenUpgrades","redUpgrades","blueUpgrades","initialStateCopy","Object","assign","gameStateSlice","startLoop","resetState","clearInterval","incrementRed","shift","castSpell","find","x","match","with","IceChamber","MagmaWaterfall","StatueRoom","exhaustive","getDoorInteractions","handleSpell","resetSpell","incrementBlue","incrementGreen","pow","greenFn","incrementHP","hpFn","attackBoss","startTempleGuardianBossFight","NaN","startThermiteBossFight","bossAttack","incrementBossHP","boulderKill","setGameLoopIntervals","clearGameLoopIntervals","addCombatLogMessages","clearCombatLogMessages","buyItem","item","currentItem","current","addResources","stepQuest","step","currentStep","currentChoice","choice","upgrade","currentUpgrade","concat","combineGreenParams","combineBlueParams","extraReducers","builder","addCase","selectRed","gameState","selectBlue","selectGreen","selectHP","selectBossStatus","selectCombatLogMessages","selectRoomName","selectNextDoors","selectGameLoopInterval","selectSpells","selectGameStatus","selectBlueDist","selectBluePast","selectGreenDist","selectRedDist","selectGreenUpgradeCost","selectRedUpgradeCost","selectBlueUpgradeCost","selectItemCost","getCostString","style","color","formatResourceValue","toFixed","CYOA","roomName","messages","spells","dispatch","src","alt","className","styles","hpheart","hpheartFaster","row","button","onClick","sblock","message","option","border","borderRadius","margin","destinationImage","id","backgroundImage","backgroundRepeat","timeoutBar","join","setTimeout","spellFn","spellName","spellstatus","otherwise","xA","yA","rbeta","Draft","gameStatus","audio","Audio","useState","plotlyLayout","width","height","plot_bgcolor","paper_bgcolor","l","r","t","pad","xaxis","yaxis","valueImage","value","data","type","y","marker","layout","config","orientation","showlegend","domain","zeroline","xaxis2","showticklabels","yaxis2","anchor","range","aria-label","intval","setInterval","volume","play","TechTree","greenUpgradeCost","redUpgradeCost","blueUpgradeCost","errorButton","GameWrapper","Thermite","getButtonStyle","cellValue","enabledButtons","buttonThermite","buttonThermiteCorrect","buttonThermiteWrong","runLoop","xmlns","stroke","fill","cell","disabled","getBoard","BossFight","spell1","spell2","spell3","bossStatus","BossIcon","props","fillColor","version","viewBox","d","animate__bounce","isNaN","initializeLoop","GameOver","endScreen","App","fullScreen","enable","zIndex","background","opacity","fpsLimit","interactivity","detectsOn","modes","bubble","distance","duration","size","particles","collisions","move","direction","outMode","speed","straight","number","density","value_area","shape","rotate","animation","opacityRate","sizeRate","detectRetina","backgroundColor","attributeName","attributeType","values","additive","repeatCount","dur","fetchCount","amount","Promise","resolve","incrementAsync","createAsyncThunk","response","counterSlice","decrement","pending","fulfilled","activeCellStatuses","threeByThreeGrid","gridLength","choiceCount","coordChoices","gridChoices","choose","allParams","3","4","5","score","maxScore","maxScoreCoords","achievementStats","perfectScores","streak","achievements","complete","freshAchievements","getRandomIntInclusive","min","ceil","gridParams","showGolden","n","lookup","1","2","arr","k","prefix","v","slice","calculateScore","baseScores","base","activateGridCoords","cellStatus","activateCellStatus","deactivateGridCellStatus","highlightCellStatus","farmingSlice","activateCell","coord","setGridSize","randomGrid","emptyGrid","JSON","parse","stringify","bruteForceSolution","gridCopy1","curr","choices","maxCoord","gridCopy","coords1","bruteForce","persistedState","localStorage","getItem","farming","store","configureStore","reducer","counter","counterReducer","gameStateReducer","thermiteReducer","farmingReducer","preloadedState","subscribe","setItem","getState","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7a75f906.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Thermite_row__2qCu2\",\"value\":\"Thermite_value__2MQZd\",\"button\":\"Thermite_button__1J216\",\"textbox\":\"Thermite_textbox__36YeP\",\"asyncButton\":\"Thermite_asyncButton__1Wp9n Thermite_button__1J216\",\"buttonThermite\":\"Thermite_buttonThermite__1uidb\",\"buttonThermiteCorrect\":\"Thermite_buttonThermiteCorrect__hzaYC\",\"buttonThermiteWrong\":\"Thermite_buttonThermiteWrong__7q4Es\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3dHJ0\",\"endScreen\":\"Counter_endScreen__2dI2v\",\"value\":\"Counter_value__9lNV0\",\"button\":\"Counter_button__QVSYQ\",\"textbox\":\"Counter_textbox__13BFQ\",\"asyncButton\":\"Counter_asyncButton__3yoXe Counter_button__QVSYQ\",\"modebar-container\":\"Counter_modebar-container__24Lzs\",\"spellstatus\":\"Counter_spellstatus__3jRo7\",\"valueImage\":\"Counter_valueImage__1q3Xf\",\"destinationImage\":\"Counter_destinationImage__27cXz\",\"hpheart\":\"Counter_hpheart__1azrc\",\"hpheartthrob\":\"Counter_hpheartthrob__3M1u4\",\"hpheartFaster\":\"Counter_hpheartFaster__3Nvrp\",\"hpheartthrobFaster\":\"Counter_hpheartthrobFaster__9Wpkq\",\"bossImage\":\"Counter_bossImage__mKaBE\",\"bossImagePulse\":\"Counter_bossImagePulse__3gRfD\",\"animate__bounce\":\"Counter_animate__bounce__1cAOg\",\"bounce\":\"Counter_bounce__3qL5D\",\"slimerun\":\"Counter_slimerun__2x4cS\",\"play\":\"Counter_play__1hRb-\",\"slimerunColor\":\"Counter_slimerunColor__357sy\",\"sblock\":\"Counter_sblock__3sLa2\",\"errorButton\":\"Counter_errorButton__3usNw\",\"errorButtonBorder\":\"Counter_errorButtonBorder__2la3D\",\"errorButtonBorder1\":\"Counter_errorButtonBorder1__1vyGd\",\"timeoutBar\":\"Counter_timeoutBar__2zf7-\",\"timeoutBarShrink\":\"Counter_timeoutBarShrink__3pZv0\"};","\nconst pd = require('probability-distributions');\n\nexport interface CYOAOption {\n    description?: string;\n    title?: string;\n    action?: string;\n    image?: String;\n    cost: Cost;\n    destination: Room;\n    statuses: Array<StructureStatus>;\n}\n\nexport interface QuestStep {\n    options: Array<CYOAOption>;\n    active: boolean;\n}\n\nexport interface GreenFnParams {\n    linearP1: number;\n    quadraticP1: number;\n    twoPowerP1: number;\n}\n\nexport interface BlueFnParams {\n    normalP1: number;\n    normalP2: number;\n}\n\nexport interface RedFnParams  {\n    linearP1: number;\n}\n\n\nexport interface HPFnParams  {\n    linearP1: number;\n}\n\n\nexport interface Spell {\n    description: SpellList;\n    cooldown?: number;\n    available: boolean;\n}\n\n\nexport type GSResourceName = \"red\" | \"blue\" | \"green\" | \"hp\";\nexport type GameStatus = \"ready\" | \"started\" | \"victory\" | \"tgBossFight\" | \"thermiteBossFight\" | \"gameOver\" ;\nexport type StructureStatus = \"burnt\" | \"frozen\" | \"flourishing\";\n\n\nexport enum RoomList {\n    Desert = \"Desert\",\n    Volcano = \"Volcano\",\n    TempleRuins = \"Temple Ruins\",\n    TempleGuardian = \"Temple Guardian\",\n    Unknown = \"Unknown\",\n    Jungle = \"Jungle\",\n    Cave = \"Cave\",\n    Moon = \"Moon\",\n    Sandstorm = \"Sandstorm\",\n    Rabbit = \"Rabbit\",\n    Oasis = \"Oasis\",\n    Treasure = \"Treasure\",\n    Boulder = \"Boulder\",\n    TreeTops = \"Tree Tops\",\n    Monsters = \"Monsters\",\n    FungalColony = \"Fungal Colony\",\n    LavaFlow = \"Lava Flow\",\n    CrumblingBridge=\"Crumbling Bridge\",\n    TrappedInsect=\"Trapped Insect\",\n    Wastes=\"Wastes\",\n    Lost=\"Lost\",\n    IceChamber=\"Ice Chamber\",\n    MagmaWaterfall=\"Magma Waterfall\",\n    StatueRoom=\"Statue Room\",\n    GraniteRaft=\"Granite Raft\",\n    CageTrap=\"Cage Trap\",\n    VolcanoBoss=\"Volcano Boss\",\n    Altar=\"Altar\",\n    ObsidianHallway=\"Obsidian Hallway\",\n}\n\n\nexport enum SpellList {\n    Fireball = \"Fireball\",\n    FrostRay = \"Frost Ray\",\n    Heal = \"Heal\",\n    CommuneWithPlants = \"Commune with Plants\",\n    SpectralRope = \"Spectral Rope\"\n}\n\nexport type Cost = Record<GSResourceName, number>\nexport type ResourceBonus = Record<GSResourceName, number>\n\nexport const spells1 = {\n  Fireball: { description: SpellList.Fireball, cooldown: 20000, available: true, },\n  CommuneWithPlants: { description: SpellList.CommuneWithPlants, cooldown: 3000, available: true },\n  Heal:   { description: SpellList.Heal, cooldown: 5000, available: true},\n  FrostRay:   { description: SpellList.FrostRay, cooldown: 5000,  available: true, },\n  SpectralRope:  { description: SpellList.SpectralRope, cooldown: 5000, available: true, }\n}\n\nexport interface Room {\n    statuses: Array<StructureStatus>;\n    options: Array<CYOAOption>;\n    name: RoomList;\n  }\n\nexport function isCostSatisfiable(cost: Cost, resources: Record<GSResourceName, number>): boolean {\n    for (let c in cost) {\n        if (cost[c as keyof typeof cost] > resources[c as keyof typeof resources]) return false\n    }\n    return true\n}\n\nexport function removeResources(cost: Cost, resources: Record<GSResourceName, number>) {\n    for (let c in cost) {\n        resources[c as keyof typeof resources] -= cost[c as keyof typeof cost]\n    }\n    return resources\n}\n\nexport function addResources(cost: Cost, resources: Record<GSResourceName, number>) {\n    for (let c in cost) {\n        resources[c as keyof typeof resources] += cost[c as keyof typeof cost]\n    }\n    return resources\n}\n\nexport function combineGreenParams(a: GreenFnParams, b: GreenFnParams): GreenFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\nexport function combineRedParams(a: RedFnParams, b: RedFnParams): RedFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\nexport function combineBlueParams(a: BlueFnParams, b: BlueFnParams): BlueFnParams {\n    for (let i in a) {\n        a[i as keyof typeof a] = a[i as keyof typeof a] + b[i as keyof typeof b]\n    }\n    return a\n}\n\n\n\nexport function greenFn(params: GreenFnParams) {\n    let total = 0.0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n    if (params.quadraticP1) {\n      total += (params.quadraticP1 * params.quadraticP1)\n    }\n    if (params.twoPowerP1) {\n      total += (Math.pow(2, params.twoPowerP1))\n    }\n    return total\n  }\n  \n  \n  export function redFn(params: RedFnParams) {\n    let total = 0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n  \n    return total\n  }\n  \n  \n  \n  \n  export function blueFn(params: BlueFnParams) {\n    let total = 0.0\n    if (params.normalP1 > 0 && params.normalP2 > 0) {\n      total += Math.max(0, pd.rnorm(1,params.normalP1, params.normalP2))\n    }\n  \n    return total\n  }\n  \n  \n  \n  export function hpFn(params: HPFnParams) {\n    let total = 0\n    if (params.linearP1) {\n      total += params.linearP1\n    }\n  \n    return total\n  }","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Cost, ResourceBonus } from './Types'\nfunction shuffle<T>(a: Array<T>): Array<T> {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nexport let Item: [Cost, ResourceBonus]\n\nexport function initializeTier1(): Array<typeof Item> {\n    let itemsTier1: Array<ResourceBonus> = [\n        { green: 0, red: 0, blue: 1, hp: 0 },\n        { green: 0, red: 19, blue: 0, hp: 0 },\n        { green: 42, red: 0, blue: 0, hp: 0 },\n        { green: 66, red: 0, blue: 0, hp: 0 },\n        { green: 20, red: 20, blue: 0, hp: 0 },\n        { green: 7, red: 2, blue: 0, hp: 10 },\n    ]\n\n    let costsTier1: Array<Cost> = [\n        { green: 65, red: 0, blue: 0, hp: 0 },\n        { green: 87, red: 0, blue: 0, hp: 0 },\n        { green: 123, red: 0, blue: 0, hp: 0 },\n        { green: 198, red: 0, blue: 0, hp: 0 },\n        { green: 270, red: 0, blue: 0, hp: 0 },\n        { green: 1033, red: 0, blue: 0, hp: 0 },\n    ]\n\n    itemsTier1 = shuffle(itemsTier1)\n    let items: Array<typeof Item> = []\n    for (let i in costsTier1) {\n        items.push([costsTier1[i], itemsTier1[i]]);\n    }\n    return items\n}\n\nlet itemsTier2: Array<ResourceBonus> = [\n    { green: 0, red: 0, blue: 104, hp: 0 },\n    { green: 0, red: 290, blue: 0, hp: 0 },\n    { green: 4255, red: 0, blue: 0, hp: 0 },\n    { green: 660, red: 0, blue: 0, hp: 24 },\n    { green: 808, red: 935, blue: 0, hp: 0 },\n    { green: 7, red: 2, blue: 0, hp: 0 },\n]\n\n","import { QuestStep, combineRedParams, StructureStatus, Room, RoomList, SpellList } from './Types'\nimport { match, __, not, select, when } from 'ts-pattern';\nimport { GameState } from './gameStateSlice';\nimport {Draft } from '@reduxjs/toolkit';\n\n\n\n\nexport function jungleRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball && !state.room.statuses.includes('burnt')) {\n        state.room.statuses.push('burnt');\n        state.redFnParams = combineRedParams({ linearP1: 3 }, state.redFnParams)\n        state.combatLogMessages.unshift('You feed on the energy from the withering vines')\n    } else if (spell.description === SpellList.CommuneWithPlants && !state.room.statuses.includes('burnt')) {\n        state.combatLogMessages.unshift('Vines sway in sync and you hear a whisper \"Seek the golden slug\"')\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function caveRoomInteraction(state, spell) {\n    if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('Water freezes into a path to the far wall')\n    } else if (spell.description === SpellList.SpectralRope && state.room.statuses.includes('frozen')) {\n        state.combatLogMessages.unshift('You climb in to a narrow fissure, revealing a the Moon Door')\n        state.room.options.push(moonDoor);\n    } else if (spell.description === SpellList.CommuneWithPlants && !state.room.statuses.includes('burnt')) {\n        state.combatLogMessages.unshift('A phosphorescent mushroom breathes in and lets out a puff of spores in the shape of a bridge and rope')\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function desertRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball) {\n        state.combatLogMessages.unshift('Molten glass sinks in to the sand')\n    } else if (spell.description === SpellList.CommuneWithPlants ) {\n        state.combatLogMessages.unshift('Wails from the void echo in your head. You stumble and fall to your knees')\n        state.resources.hp -= 10;\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function treeTopsRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball) {\n        state.combatLogMessages.unshift('Leaves crackle and crumple but the trees stand strong')\n    } else if (spell.description === SpellList.CommuneWithPlants ) {\n        state.combatLogMessages.unshift('Trees lean slightly to the left')\n    } else if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('Branches shrink back, revealing the Rabbit Door')\n        state.room.options.push(rabbitDoor); \n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function rabbitRoomInteraction(state, spell) {\n    if (spell.description === SpellList.Fireball ) {\n        state.room.statuses.push('burnt');\n        state.combatLogMessages.unshift('Charred remains litter the floor. Rocks begin to fall from the ceiling')\n        state.resources.hp -= 10;\n        //Add hpFn params for faster reduction for the rest of the round\n    } else if (spell.description === SpellList.Heal ) {\n        state.combatLogMessages.unshift('The rabbit leaps around the room with great vigor. You feel energized just watching it.')\n        //TODO: More lore\n        //TODO: more, maybe better greenFnParams, \n    } else if (spell.description === SpellList.FrostRay && !state.room.statuses.includes('frozen') && !state.room.statuses.includes('burnt')) {\n        state.room.statuses.push('frozen');\n        state.combatLogMessages.unshift('You enrage the rabbit. It lunges at you, biting your index finger off, then bounces away')\n    } else if (spell.description === SpellList.SpectralRope) {\n        state.combatLogMessages.unshift('You lower a rope through a crack in the floor, giving you a better avenue to proceed')\n        state.room.options.push(ropeMonsterDoor)\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function monstersRoomInteraction(state, spell) {\n    \n}\n\nexport function boulderDodgeRoomInteraction(state, spell) {\n    state.combatLogMessages.unshift('No effect')\n}\n\n\nexport function desertDoorInteraction(state, spell) {\n    if (spell.type === 'Fireball') {\n        state.combatLogMessages.unshift('Flames dance across the sand haplessly');\n    } else {\n        state.combatLogMessages.unshift('No effect');\n    }\n}\nexport function monstersDoorInteraction(state: Draft<GameState>, spell) {\n    if (spell.description === SpellList.Fireball || spell.description === SpellList.FrostRay ) {\n        state.room.statuses.push('burnt');\n\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] / 2\n            }\n        })\n        state.combatLogMessages.unshift('You batter the monsters with your magic');\n\n    } else if ( spell.description === SpellList.FrostRay ) {\n        state.room.statuses.push('frozen');\n\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] / 2\n            }\n        })\n        state.combatLogMessages.unshift('You batter the monsters with your magic');\n\n    } else if (spell.description === 'Heal' ) {\n        state.room.options.map(o => {\n            for (let c in o.cost) {\n                o.cost[c as keyof typeof o.cost] =  o.cost[c as keyof typeof o.cost] * 2\n            }\n        })\n        state.combatLogMessages.unshift('Your magic empowers the monsters');\n    } else {\n        state.combatLogMessages.unshift('No effect')\n    }\n}\n\nexport function getRoomInteractions(room: RoomList) {\n    return match(room)\n    .with(RoomList.Jungle,() => jungleRoomInteraction)\n    .with(RoomList.Cave, () =>caveRoomInteraction)\n    .with(RoomList.Desert,() => desertRoomInteraction)\n    .with(RoomList.Boulder, () =>boulderDodgeRoomInteraction)\n    .with(RoomList.Monsters,() => monstersRoomInteraction)\n    .with(RoomList.TreeTops,() => treeTopsRoomInteraction)\n    .with(RoomList.Rabbit,() => rabbitRoomInteraction)\n    .with(RoomList.FungalColony,() => EmptyFn)\n    .with(RoomList.Treasure,() => EmptyFn)\n    .with(RoomList.Moon,() => EmptyFn)\n    .with(RoomList.Oasis,() => EmptyFn)\n    .with(RoomList.Volcano,() => EmptyFn)\n    .with(RoomList.Unknown,() => EmptyFn)\n    .with(RoomList.TempleRuins,() => EmptyFn)\n    .with(RoomList.TempleGuardian,() => EmptyFn)  \n    .with(RoomList.Sandstorm,() => EmptyFn)\n    .with(RoomList.LavaFlow ,() => EmptyFn)\n    .with(RoomList.CrumblingBridge,() => EmptyFn)\n    .with(RoomList.TrappedInsect,() => EmptyFn)\n    .with(RoomList.Wastes,() => EmptyFn)\n    .with(RoomList.Lost,() => EmptyFn)\n    .with(RoomList.IceChamber,() => EmptyFn)\n    .with(RoomList.MagmaWaterfall,() => EmptyFn)\n    .with(RoomList.StatueRoom,() => EmptyFn)\n    .with(RoomList.GraniteRaft,() => EmptyFn)\n    .with(RoomList.CageTrap,() => EmptyFn)\n    .with(RoomList.VolcanoBoss,() => EmptyFn)\n    .with(RoomList.Altar,() => EmptyFn)\n    .with(RoomList.ObsidianHallway,() => EmptyFn)\n    .exhaustive()\n}\n\nexport function getDoorInteractions(room: RoomList){\n    return match(room)\n    .with(RoomList.Jungle,() => EmptyFn)\n    .with(RoomList.Cave,() => EmptyFn)\n    .with(RoomList.Desert,() => EmptyFn)\n    .with(RoomList.Boulder,() => monstersDoorInteraction)\n    .with(RoomList.Monsters,() => EmptyFn)\n    .with(RoomList.TreeTops,() => EmptyFn)\n    .with(RoomList.Rabbit,() => EmptyFn)\n    .with(RoomList.FungalColony, () =>EmptyFn)\n    .with(RoomList.Treasure, () =>EmptyFn)\n    .with(RoomList.Moon,() => EmptyFn)\n    .with(RoomList.Oasis,() => EmptyFn)\n    .with(RoomList.Volcano,() => EmptyFn)\n    .with(RoomList.Unknown,() => EmptyFn)\n    .with(RoomList.TempleRuins,() => EmptyFn)\n    .with(RoomList.TempleGuardian,() => EmptyFn)\n    .with(RoomList.Sandstorm,() => EmptyFn)\n    .with(RoomList.LavaFlow ,() => EmptyFn)\n    .with(RoomList.CrumblingBridge,() => EmptyFn)\n    .with(RoomList.TrappedInsect,() => EmptyFn)\n    .with(RoomList.Wastes,() => EmptyFn)\n    .with(RoomList.Lost,() => EmptyFn)\n    .with(RoomList.IceChamber,() => EmptyFn)\n    .with(RoomList.MagmaWaterfall,() => EmptyFn)\n    .with(RoomList.StatueRoom,() => EmptyFn)\n    .with(RoomList.GraniteRaft,() => EmptyFn)\n    .with(RoomList.CageTrap,() => EmptyFn)\n    .with(RoomList.VolcanoBoss,() => EmptyFn)\n    .with(RoomList.Altar,() => EmptyFn)\n    .with(RoomList.ObsidianHallway,() => EmptyFn)\n    .exhaustive()\n}\n\nfunction EmptyFn(state, spell) {\n    \n}\n\nexport let FakeRoom: Room = {\n    name: RoomList.Cave,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let treasureRoom: Room = {\n    name: RoomList.Treasure,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let volcanoBossFightRoom: Room = {\n    name: RoomList.VolcanoBoss,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.VolcanoBoss, action: \"Challenge the Volcano Boss\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let cageTrapRoom: Room = {\n    name: RoomList.CageTrap,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.VolcanoBoss, action: \"Challenge the Volcano Boss\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: volcanoBossFightRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let graniteRaftRoom: Room = {\n    name: RoomList.GraniteRaft,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.CageTrap, action: \"Drift aimlessly\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: cageTrapRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let trappedInsectRoom: Room = {\n    name: RoomList.TrappedInsect,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.GraniteRaft, action: \"Ride the granite raft\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: graniteRaftRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let altarRoom: Room = {\n    name: RoomList.TrappedInsect,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TrappedInsect, action: \"Move ahead into the darkness\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: trappedInsectRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let obsidianHallway: Room = {\n    name: RoomList.ObsidianHallway,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Altar, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: altarRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let lavaFlowRoom: Room = {\n    name: RoomList.LavaFlow,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.ObsidianHallway, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: obsidianHallway, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Altar, action: \"Kneel at the steps\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: altarRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let crumblingBridge: Room = {\n    name: RoomList.CrumblingBridge,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.LavaFlow, action: \"Leap from stone to stone\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lavaFlowRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let lost: Room = {\n    name: RoomList.CrumblingBridge,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Cave, action: \"Journey On\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let wastes: Room = {\n    name: RoomList.Wastes,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Lost, action: \"Navigate the wastes\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lost, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let templeGuardianRoom: Room = {\n    name: RoomList.TempleGuardian,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n        { title: RoomList.Cave, action: \"Challenge the Temple Guardian\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: FakeRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let oasisRoom: Room = {\n    name: RoomList.Oasis,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TempleGuardian, action: \"Challenge the Temple Guardian\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: templeGuardianRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let unknownRoom: Room = {\n    name: RoomList.Unknown,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n\n    ]\n}\n\nexport let volcanoRoom: Room = {\n    name: RoomList.Volcano,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.LavaFlow, action: \"Brave the fiery rocks\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: lavaFlowRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Unknown, action: \"Plunge in to the unknown\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: unknownRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let boulderRoom: Room = {\n    name: RoomList.Boulder,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Oasis, action: \"Dive left into the web-covered pit\", cost: { green: 3200, red: 0, blue: 0, hp: 0 }, destination: oasisRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Volcano, action: \"Crawl over the wall\", cost: { green: 48000, red: 0, blue: 0, hp: 0 }, destination: volcanoRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let monstersRoom: Room = {\n    name: RoomList.Monsters,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Boulder, action: \"Tumble away from the ferocious monsters\", cost: { green: 50120, red: 0, blue: 0, hp: 0 }, destination: boulderRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let rabbitRoom: Room = {\n    name: RoomList.Rabbit,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Monsters, action: \"Slide down tunnel\", cost: { green: 900, red: 1200, blue: 100, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nlet ropeMonsterDoor = { title: RoomList.Monsters, action: \"Rappel down behind the monster\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() }\n\nexport let treeTopsRoom: Room = {\n    name: RoomList.TreeTops,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Monsters, action: \"Leap into the musty cove\", cost: { green: 75330, red: 0, blue: 0, hp: 0 }, destination: monstersRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\n\nexport let templeRuinsRoom: Room = {\n    name: RoomList.TempleRuins,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TempleGuardian, action: \"Face the Temple Guardian\", cost: { green: 37500, red: 1200, blue: 50, hp: 0 }, destination: templeGuardianRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\nexport let jungleRoom: Room = {\n    name: RoomList.Jungle,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.TreeTops, action: \"Shimmy into the Tree Tops\", cost: { green: 2134, red: 0, blue: 0, hp: 0 }, destination: treeTopsRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.TempleRuins, action: \"Venture towards the Temple Ruins\", cost: { green: 4444, red: 0, blue: 0, hp: 0 }, destination: templeRuinsRoom, statuses: new Array<StructureStatus>() },\n    ]\n}\n\n\nexport let sandstormRoom: Room = {\n    name: RoomList.Sandstorm,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let desertRoom: Room = {\n    name: RoomList.Desert,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Volcano, action: \"Ascend the cliff face\", cost: { green: 0, red: 10000, blue: 0, hp: 0 }, destination: volcanoRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Wastes, action: \"Shy away from the blazing mountain\", cost: { green: 0, red: 10000, blue: 0, hp: 0 }, destination: wastes, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nexport let moonRoom: Room = {\n    name: RoomList.Moon,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        \n    ]\n}\n\nexport let fungalColonyRoom: Room = {\n    name: RoomList.FungalColony,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Moon, action: \"Gaze deeply at the moon above\", cost: { green: 0, red: 0, blue: 100000, hp: 0 }, destination: moonRoom, statuses: new Array<StructureStatus>() },\n\n    ]\n}\n\nlet moonDoor = { title: RoomList.FungalColony, action: \"Venture behind the veil\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: fungalColonyRoom, statuses: new Array<StructureStatus>() }\nlet rabbitDoor = { title: RoomList.Rabbit, action: \"Hurdle over the frozen brambles\", cost: { green: 100, red: 100, blue: 10, hp: 0 }, destination: rabbitRoom, statuses: new Array<StructureStatus>() }\n\n\nexport let caveRoom: Room = {\n    name: RoomList.Cave,\n    statuses: new Array<StructureStatus>(),\n    options: [\n        { title: RoomList.Jungle, action: \"Swing from the vines\", cost: { green: 340, red: 0, blue: 0, hp: 0 }, destination: jungleRoom, statuses: new Array<StructureStatus>() },\n        { title: RoomList.Desert, action: \"Brave the wastes\", cost: { green: 970, red: 800, blue: 290, hp: 0 }, destination: desertRoom, statuses: new Array<StructureStatus>() }\n    ]\n}\n\n\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface ThermiteState {\n  grid: Array<Array<number>>;\n  status: 'idle' | 'starting' | 'started' | 'finished';\n  bossHP: number;\n  enabled: boolean;\n}\n\nconst initialState: ThermiteState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(),\n  status: 'idle',\n  bossHP: 100,\n  enabled: false\n};\n\nfunction initializeGrid(){\n  let n = 4\n  let randomGrid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => Math.round(Math.random())))\n  return randomGrid\n}\n\n\nexport const thermiteSlice = createSlice({\n  name: 'thermite',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n\n      //state.value += 1;\n    },\n    triggerThermite: (state, action) => {\n      let coords = action.payload;\n      //let coords = [0,2]\n      state.grid[coords[0]][coords[1]]  = state.grid[coords[0]][coords[1]] === 1 ? 2 : 3\n      //state.value += 1;\n    },\n    startGrid: (state) => {\n      state.status = 'starting'\n      state.grid = initializeGrid()\n    },\n    enableButtons: (state) => {\n      state.status = 'started'\n    },\n    winThermiteBossFight: (state) => {\n\n    },\n\n    calculateDamage: (state) => {\n      state.bossHP -=  ((state.grid.flatMap(i => i).filter(i => i === 2).length * 4) - (state.grid.flatMap(i => i).filter(i => i === 3).length * 2))\n\n      state.status = 'finished'\n    },\n\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      //state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment,incrementByAmount, startGrid, triggerThermite, enableButtons, calculateDamage, winThermiteBossFight } = thermiteSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectGrid = (state: RootState) => state.thermite.grid;\nexport const selectStatus = (state: RootState) => state.thermite.status;\nexport const selectBossHP = (state: RootState) => state.thermite.bossHP;\n\n\nexport default thermiteSlice.reducer;\n","import { types } from '@babel/core';\nimport { createAsyncThunk, createSlice, PayloadAction, current, Draft } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport {\n  Spell,\n  Cost,\n  GreenFnParams,\n  BlueFnParams,\n  RedFnParams,\n  redFn,\n  blueFn,\n  greenFn,\n  hpFn,\n  Room,\n  GSResourceName,\n  HPFnParams,\n  GameStatus,\n  combineRedParams,\n  combineBlueParams,\n  combineGreenParams,\n  addResources,\n  removeResources,\n  isCostSatisfiable,\n  spells1,\n  RoomList,\n  SpellList\n} from './Types'\nimport { initializeTier1, Item, } from './Items'\nimport { caveRoom, getRoomInteractions, getDoorInteractions } from './Quest'\nimport {\n  winThermiteBossFight,\n} from '../thermite_bossfight/thermiteSlice';\n\n\nlet GreenUpgrade: [Cost, boolean, boolean, GreenFnParams, Spell[]]\nlet BlueUpgrade: [Cost, boolean, number, BlueFnParams, Spell[]]\nlet RedUpgrade: [Cost, boolean, boolean, RedFnParams, Spell[]]\n\n\nexport type SlimeBossStatus = \"burnable\" | \"burnt\" | \"freezable\" | \"frozen\" | \"normal\" | \"attacking\" | \"inactive\";\nconst SlimeBossStatuses: Array<SlimeBossStatus> = [\"burnable\", \"freezable\", \"normal\", \"normal\", \"attacking\", \"inactive\", \"inactive\"]\nexport const SlimeBossStatusColors = {\n  \"burnable\": \"#ff0000\",\n  \"burnt\": \"#860f11\",\n  \"freezable\": \"#00e4ff\",\n  \"frozen\": \"#00a6b9\",\n  \"normal\": \"#d2d2d2\",\n  \"attacking\": \"#000000\",\n  \"inactive\": \"#f3b179\",\n}\n\n\nexport interface Achievement {\n  name: String;\n  requirement: number;\n  description?: String;\n}\n\nexport interface SlimeBoss {\n  bossHp: number;\n  status: SlimeBossStatus;\n}\n\n\n\nexport interface GameState {\n  resources: Record<GSResourceName, number>;\n  boss: SlimeBoss;\n\n  gameLoopInterval: number;\n  availableSpells: Array<Spell>;\n  room: Room;\n  items: Array<typeof Item>;\n  redFnParams: RedFnParams;\n  greenFnParams: GreenFnParams;\n  blueFnParams: BlueFnParams;\n  hpFnParams: HPFnParams;\n  status: GameStatus;\n  combatLogMessages: Array<String>;\n  greenUpgrades: Array<typeof GreenUpgrade>;\n  redUpgrades: Array<typeof RedUpgrade>;\n  blueUpgrades: Array<typeof BlueUpgrade>;\n  blueDist: Array<number>;\n  bluePast: Array<number>;\n  greenDist: Array<number>;\n  redDist: Array<number>;\n}\n\nconst initialState: GameState = {\n  resources: {\n    red: 1000000, // 0\n    green: 10000000, // 20\n    blue: 100000003, //3\n    hp: 100\n  },\n  boss: {\n    bossHp: 100,\n    status: 'normal'\n  },\n  room: caveRoom,\n  gameLoopInterval: 0,\n  availableSpells: [],//Object.values(spells1),\n  items: initializeTier1(),\n  redFnParams: { linearP1: 1 },\n  greenFnParams: { linearP1: 2, quadraticP1: 0, twoPowerP1: 0 },\n  blueFnParams: { normalP1: 0, normalP2: 0 },\n  hpFnParams: { linearP1: 0.1 },\n  blueDist: [0, 0, 0, 0],\n  bluePast: [...Array(40).keys()].map(i => 0),\n  greenDist: [...Array(40).keys()].map(i => 0),\n  redDist: [...Array(40).keys()].map(i => 0),\n  status: \"ready\",\n  combatLogMessages: [],\n  greenUpgrades: [\n    [{ green: 13, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 0, twoPowerP1: 0 }, []],\n    [{ green: 29, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 0, twoPowerP1: 0 }, [spells1.CommuneWithPlants]],\n    [{ green: 105, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 4, quadraticP1: 0, twoPowerP1: 0 }, []],\n    [{ green: 82, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 0 }, [spells1.SpectralRope]],\n    [{ green: 379, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0, quadraticP1: 3, twoPowerP1: 0 }, []],\n    [{ green: 1800, red: 0, blue: 7, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 10 }, []],\n    [{ green: 300000, red: 100, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 2 }, [spells1.Heal]],\n    [{ green: 1000000000, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3, quadraticP1: 1, twoPowerP1: 10 }, []],\n\n  ],\n  redUpgrades: [\n    [{ green: 13, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3 }, [spells1.Fireball]],\n    [{ green: 37, red: 0, blue: 1, hp: 0 }, false, false, { linearP1: 0.3 }, []],\n    [{ green: 105, red: 0, blue: 3, hp: 0 }, false, false, { linearP1: 4 }, []],\n    [{ green: 10, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 0.3 }, []],\n    [{ green: 7000, red: 0, blue: 0, hp: 0 }, false, false, { linearP1: 8 }, []],\n    [{ green: 61589, red: 0, blue: 55, hp: 0 }, false, false, { linearP1: 22 }, []],\n\n  ],\n  blueUpgrades: [\n    [{ green: 9, red: 45, blue: 0, hp: 0 }, false, 0, { normalP1: 0.0002, normalP2: 0.0001 }, []],\n    [{ green: 499, red: 0, blue: 2, hp: 0 }, false, 0, { normalP1: 0, normalP2: 0.5 }, [spells1.FrostRay]],\n    [{ green: 0, red: 389, blue: 21, hp: 0 }, false, 0, { normalP1: 2, normalP2: 0 }, []],\n    [{ green: 0, red: 0, blue: 131, hp: 0 }, false, 0, { normalP1: 0, normalP2: 10 }, []],\n    [{ green: 0, red: 0, blue: 305, hp: 0 }, false, 0, { normalP1: 1, normalP2: 10 }, []],\n  ]\n\n\n};\n\n\nconst initialStateCopy = Object.assign({}, initialState)\n\nexport const gameStateSlice = createSlice({\n  name: 'gameState',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    startLoop: (state) => {\n      state.status = 'started';\n    },\n    resetState: (state) => {\n      clearInterval(state.gameLoopInterval);\n      Object.assign(state, initialStateCopy);\n    },\n    incrementRed: (state) => {\n      state.resources.red += redFn(state.redFnParams);\n      state.redDist.push(redFn(state.redFnParams));\n      state.redDist.shift();\n    },\n    castSpell: (state, payload) => {\n      if (payload) {\n        let spell = state.availableSpells.find(x => x.description === payload.payload.description)\n        if (spell) {\n          spell.available = false\n          handleSpell(state, spell)\n        }\n      }\n    },\n    resetSpell: (state, payload) => {\n      if (payload) {\n        let spell = state.availableSpells.find(x => x.description === payload.payload.description)\n        if (spell) {\n          spell.available = true\n        }\n      }\n    },\n    incrementBlue: (state) => {\n      state.resources.blue += blueFn(state.blueFnParams);\n      state.blueDist = [...Array(1000).keys()].map(i => Math.round(blueFn(state.blueFnParams)))\n      state.bluePast.push(state.resources.blue);\n      state.bluePast.shift();\n    },\n    incrementGreen: (state) => {\n      state.resources.green += greenFn(state.greenFnParams);\n      state.greenDist.push(state.resources.green);\n      state.greenDist.shift();\n    },\n    incrementHP: (state) => {\n      state.resources.hp -= hpFn(state.hpFnParams);\n      if (state.resources.hp <= 0) {\n        state.status = \"gameOver\"\n      }\n    },\n\n    attackBoss: (state, action) => {\n      if (action.payload.description === SpellList.Fireball && state.boss.status === 'burnable') {\n        state.boss.status = 'burnt'\n        state.boss.bossHp -= 30\n      } else if (action.payload.description === SpellList.Fireball && state.boss.status === 'normal') {\n        state.boss.bossHp -= 20\n      } else if (action.payload.description === SpellList.FrostRay && state.boss.status === 'freezable') {\n        state.boss.status = 'frozen'\n        state.boss.bossHp -= 30\n      } else if (action.payload.description === SpellList.FrostRay && state.boss.status === 'normal') {\n        state.boss.bossHp -= 20\n      } else if (action.payload.description === 'Gem Attack' && state.boss.status === 'normal') {\n        state.boss.status = 'inactive'\n        state.boss.bossHp -= 10\n      } else if (action.payload.description === 'Gem Attack' && state.availableSpells.find(x => x.description === SpellList.SpectralRope && !x.available) && state.boss.status === 'normal') {\n        state.boss.status = 'inactive'\n        state.boss.bossHp -= 15\n      }\n      if (state.boss.bossHp <= 0) {\n        state.status = 'victory'\n      }\n    },\n    startTempleGuardianBossFight: (state) => {\n      state.status = 'tgBossFight'\n      clearInterval(state.gameLoopInterval)\n      state.gameLoopInterval = NaN\n    },\n    startThermiteBossFight: (state) => {\n      state.status = 'thermiteBossFight'\n      clearInterval(state.gameLoopInterval)\n      state.gameLoopInterval = NaN\n    },\n    bossAttack: (state) => {\n      if (state.availableSpells.find(x => x.description === SpellList.SpectralRope && !x.available) || state.boss.status === 'frozen' || state.boss.status === 'burnt') {\n        state.resources.hp -= 3\n      } else {\n        state.resources.hp -= 5\n      }\n      state.boss.status = SlimeBossStatuses[Math.round(Math.random() * SlimeBossStatuses.length)]\n      if (state.resources.hp <= 0) {\n        state.status = 'gameOver'\n      }\n\n    },\n    incrementBossHP: (state) => {\n      state.boss.bossHp -= (4 * Math.random())\n      if (state.boss.bossHp <= 0) {\n        state.status = \"victory\"\n      }\n    },\n    boulderKill: (state) => {\n      if (state.room.name === RoomList.Boulder) {\n        state.status = \"gameOver\"\n      }\n    },\n\n    setGameLoopIntervals: (state, action) => {\n      state.gameLoopInterval = action.payload\n    },\n    clearGameLoopIntervals: (state) => {\n      clearInterval(state.gameLoopInterval);\n      state.gameLoopInterval = 0;\n    },\n    addCombatLogMessages: (state, action) => {\n      state.combatLogMessages.unshift(action.payload)\n    },\n    clearCombatLogMessages: (state) => {\n      state.combatLogMessages = []\n    },\n    buyItem: (state, action) => {\n      if (action.payload.item) {\n        let item = state.items[0]\n        let currentItem = current(item)\n        if (!item || !currentItem || action.payload.item !== currentItem) {\n          return\n        }\n        if (!isCostSatisfiable(currentItem[0], state.resources)) {\n          return\n        }\n        state.resources = removeResources(currentItem[0], state.resources)\n        state.resources = addResources(currentItem[1], state.resources)\n        state.items.shift()\n      }\n    },\n    stepQuest: (state, action) => {\n      let step = state.room.options\n      let currentStep = current(step)\n      if (!step || !currentStep) {\n        return\n      }\n\n      let currentChoice = currentStep.find(x => x === action.payload.choice)\n      if (!currentChoice) {\n        return\n      }\n      if (!isCostSatisfiable(currentChoice.cost, state.resources)) {\n        return\n      }\n      state.resources = removeResources(currentChoice.cost, state.resources)\n      if (currentChoice.destination.options.length == 0) {\n        state.status = 'victory'\n      }\n\n      state.room = currentChoice.destination\n\n\n    },\n    upgrade: (state, action) => {\n      if (action.payload.green) {\n        let upgrade = state.greenUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.green !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] = true\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.greenFnParams = combineGreenParams(state.greenFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n      if (action.payload.red) {\n        let upgrade = state.redUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.red !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] = true\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.redFnParams = combineRedParams(state.redFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n      if (action.payload.blue) {\n        let upgrade = state.blueUpgrades.find(x => !x[1])\n        let currentUpgrade = current(upgrade)\n        if (!upgrade || !currentUpgrade || action.payload.blue !== currentUpgrade) {\n          return\n        }\n        if (!isCostSatisfiable(currentUpgrade[0], state.resources)) {\n          upgrade[2] += 1\n          return\n        }\n        state.availableSpells = state.availableSpells.concat(currentUpgrade[4])\n        state.resources = removeResources(currentUpgrade[0], state.resources)\n        state.blueFnParams = combineBlueParams(state.blueFnParams, currentUpgrade[3])\n        upgrade[1] = true;\n      }\n    },\n\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(winThermiteBossFight, (state) => {\n        state.status = 'victory'\n      })\n    }\n  \n\n});\n\nfunction handleSpell(state: Draft<GameState>, spell: Spell) {\n  let interaction = getRoomInteractions(state.room.name)\n  let result = interaction(state, spell)\n\n  let doorResults = state.room.options.map(x => getDoorInteractions(x.destination.name)(state, spell))\n}\n\nexport const { incrementRed, incrementBossHP, resetState, startTempleGuardianBossFight, startThermiteBossFight, startLoop, boulderKill, attackBoss, bossAttack, addCombatLogMessages, clearCombatLogMessages, incrementGreen, incrementBlue, setGameLoopIntervals, clearGameLoopIntervals, incrementHP, castSpell, resetSpell, buyItem, stepQuest, upgrade } = gameStateSlice.actions;\n\n\nexport const selectRed = (state: RootState) => state.gameState.resources.red;\nexport const selectBlue = (state: RootState) => state.gameState.resources.blue;\nexport const selectGreen = (state: RootState) => state.gameState.resources.green;\nexport const selectHP = (state: RootState) => state.gameState.resources.hp;\nexport const selectBossHP = (state: RootState) => state.gameState.boss.bossHp;\nexport const selectBossStatus = (state: RootState) => state.gameState.boss.status;\nexport const selectCombatLogMessages = (state: RootState) => state.gameState.combatLogMessages;\nexport const selectGreenFnP1 = (state: RootState) => state.gameState.greenFnParams.linearP1;\nexport const selectRoomName = (state: RootState) => state.gameState.room.name;\n\nexport const selectNextDoors = (state: RootState) => state.gameState.room.options || [];\nexport const selectGameLoopInterval = (state: RootState) => state.gameState.gameLoopInterval;\n\nexport const selectSpells = (state: RootState) => state.gameState.availableSpells;\nexport const selectGameStatus = (state: RootState) => state.gameState.status;\nexport const selectBlueDist = (state: RootState) => state.gameState.blueDist;\nexport const selectBluePast = (state: RootState) => state.gameState.bluePast;\nexport const selectGreenDist = (state: RootState) => state.gameState.greenDist;\nexport const selectRedDist = (state: RootState) => state.gameState.redDist;\nexport const selectGreenUpgradeCost = (state: RootState) => state.gameState.greenUpgrades.find(x => !x[1]);\nexport const selectRedUpgradeCost = (state: RootState) => state.gameState.redUpgrades.find(x => !x[1]);\nexport const selectBlueUpgradeCost = (state: RootState) => state.gameState.blueUpgrades.find(x => !x[1]);\nexport const selectItemCost = (state: RootState) => state.gameState.items[0];\n\n\nexport default gameStateSlice.reducer;\n","import React, { useState, FunctionComponent } from 'react';\n\nimport {\n    Cost\n} from './Types';\n\n//export function getCostString(cost: Cost) {\nexport const getCostString: FunctionComponent<Cost> = (cost: Cost) => {\n  \n    return (<span>\n        {cost.green > 0 && <span>{cost.green}<span style={{ color: 'limegreen' }}>G  </span></span>}\n        {cost.blue > 0 && <span>{cost.blue}<span style={{ color: 'blue' }}>B  </span></span>}\n        {cost.red > 0 && <span>{cost.red}<span style={{ color: 'red' }}>R  </span></span>}\n    </span>)\n\n}\n\nexport function formatResourceValue(x: number): String {\n    if(x <= 10000){\n      return x.toFixed(1)\n    } else if(x > 10000 && x <= 1000000){\n      return (x / 1000).toFixed(0) + 'K'\n    } else if(x > 1000000 && x <= 1000000000){\n      return (x / (1000 * 1000)).toFixed(0) + 'M'\n    } else if(x > 1000000000 && x <= 1000000000000){\n      return (x / (1000 * 1000 * 1000)).toFixed(0) + 'B'\n    } else {\n      return x + ''\n    }\n  }","import React, { useState, FunctionComponent } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  incrementRed,\n  incrementGreen,\n  incrementBlue,\n  incrementHP,\n  setGameLoopIntervals,\n  clearGameLoopIntervals,\n  startLoop,\n  selectRed,\n  selectGreen,\n  selectBlue,\n  selectGreenFnP1,\n  selectBlueDist,\n  selectBluePast,\n  selectGreenDist,\n  selectRedDist,\n  selectGameStatus\n} from './gameStateSlice';\nimport { formatResourceValue } from './Utils';\nimport styles from './Counter.module.css';\n\nimport Plot from 'react-plotly.js';\nconst pd = require('probability-distributions');\n\nlet xA: Array<number> = [];\nlet yA: Array<number> = [];\nfor (var i = 0; i < 20000; i++) {\n  xA[i] = pd.rbeta(1, 0.5, 0.5)[0];\n  yA[i] = pd.rbeta(1, 0.5, 0.5)[0];\n}\n/**\n <div className={styles.row}>\n      <Plot\n          data={[\n\n            {\n              type: 'histogram2dcontour', x:xA, y: yA\n            },\n          ]}\n          layout={{\n            width: 160, height: 120,\n\n            margin: {\n              l: 30,\n              r: 20,\n              b: 20,\n              t: 20,\n              pad: 4,\n\n            },\n          }}\n          config={{\n            'displayModeBar': false\n          }}\n        />\n      </div>\n */\n\n\n/*cards.map((card) => return (\n      <div>card</div>\n  ))*/\nexport const Draft: FunctionComponent = () => {\n  const red = useAppSelector(selectRed);\n  const redDist = useAppSelector(selectRedDist);\n  const green = useAppSelector(selectGreen);\n  const greenDist = useAppSelector(selectGreenDist);\n  const blue = useAppSelector(selectBlue);\n  const blueDist = useAppSelector(selectBlueDist);\n  const bluePast = useAppSelector(selectBluePast);\n  const gameStatus = useAppSelector(selectGameStatus);\n  const audio = new Audio(\"./impromptu_lower_bitrate.mp3\")\n\n\n  const dispatch = useAppDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n  const plotlyLayout = {\n    width: 160, height: 120,\n    plot_bgcolor: 'rgba(255,255,255,0.0)',\n    paper_bgcolor: 'rgba(255,255,255,0.3)',\n    margin: {\n      l: 30,\n      r: 20,\n      b: 20,\n      t: 20,\n      pad: 4,\n\n    },\n    xaxis: {\n      color: 'white'\n    },\n    yaxis: {\n      color: 'white'\n    }\n\n  }\n\n  //  onClick={() => dispatch(incrementAsync(incrementred))}\n\n  function initializeLoop() {\n    // start timer after button is clicked\n    if (gameStatus == 'ready') {\n      dispatch(startLoop());\n      dispatch(clearGameLoopIntervals());\n      let intval = setInterval(() => {\n          dispatch(incrementRed());\n          dispatch(incrementGreen());\n          dispatch(incrementBlue());\n          dispatch(incrementHP());\n        },\n        80);\n      dispatch(setGameLoopIntervals(intval))\n      audio.volume = 0.2;\n      audio.play();\n    }\n  }\n\n\n  return (\n    <div>\n      <div className={styles.row}>\n      <img src=\"./red_rupee_6color.png\" alt=\"active\" className={styles.valueImage} />\n        <span className={styles.value} style={{ 'color': 'red' }}>{formatResourceValue(red)}</span>\n\n        <img src=\"./green_rupee_pxl.png\" alt=\"active\" className={styles.valueImage} /> <span className={styles.value} style={{ 'color': 'limegreen' }}>{formatResourceValue(green)}</span>\n        \n        <img src=\"./blue_rupee_6color.png\" alt=\"active\" className={styles.valueImage} />\n        <span className={styles.value} style={{ 'color': 'steelblue' }}>{formatResourceValue(blue)}</span>\n\n\n\n      </div>\n\n      <div className={styles.row}>\n        <Plot\n          data={[\n\n            {\n              type: 'scatter', y: redDist, marker: {\n                color: 'red',\n              }\n            },\n          ]}\n\n          layout={plotlyLayout}\n          config={{\n            'displayModeBar': false\n          }}\n        />\n\n        <Plot\n          data={[\n\n            {\n              type: 'scatter', y: greenDist, marker: {\n                color: 'limegreen',\n              }\n            },\n          ]}\n          layout={plotlyLayout}\n          config={{\n            'displayModeBar': false\n          }}\n        />\n\n        <Plot\n          data={[\n\n            {\n              type: 'histogram', orientation: 'h', y: blueDist,\n              xaxis: 'x2',\n              yaxis: 'y2'\n            },\n            { type: 'scatter', y: bluePast, marker: { color: 'steelblue' } },\n          ]}\n          layout={{\n            plot_bgcolor: 'rgba(255,255,255,0.0)',\n            paper_bgcolor: 'rgba(255,255,255,0.3)',\n            width: 160, height: 120, margin: {\n              l: 40,\n              r: 20,\n              b: 20,\n              t: 20,\n              pad: 4\n            },\n            showlegend: false,\n            xaxis: {\n              domain: [0, 0.7],\n              color: 'white',\n              zeroline: false\n            },\n            yaxis: {\n              color: 'white',\n              zeroline: false\n            },\n            xaxis2: {\n              color: 'white',\n              domain: [0.8, 1],\n              showticklabels: false\n            },\n            yaxis2: {\n              color: 'white',\n              anchor: 'x2',\n              range: [0, 10],\n              showticklabels: false\n            }\n          }}\n          config={{\n            'displayModeBar': false\n          }}\n        />\n      </div>\n      {gameStatus == 'ready' &&\n        <div>\n\n          <button\n            className={styles.button}\n            aria-label=\"start\"\n            onClick={initializeLoop}\n          >\n            Start\n        </button>\n        </div>\n      }\n\n\n\n    </div>\n\n  );\n}\n","import React, { useState, FunctionComponent } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n    selectHP,\n    selectNextDoors,\n    stepQuest,\n    selectSpells,\n    castSpell,\n    resetSpell,\n    clearCombatLogMessages,\n    selectCombatLogMessages,\n    selectRoomName,\n    resetState,\n    boulderKill,\n    addCombatLogMessages,\n    startTempleGuardianBossFight,\n    startThermiteBossFight\n} from './gameStateSlice';\nimport { Spell, RoomList, SpellList } from './Types'\nimport { getCostString } from './Utils'\nimport { match, __, not, select, when } from 'ts-pattern';\n\n\nimport styles from './Counter.module.css';\n\n\n\nexport const CYOA: FunctionComponent = () => {\n    let options = useAppSelector(selectNextDoors)\n    let roomName = useAppSelector(selectRoomName)\n    let messages = useAppSelector(selectCombatLogMessages)\n    let spells = useAppSelector(selectSpells)\n    const dispatch = useAppDispatch();\n    const hp = useAppSelector(selectHP);\n\n    function spellFn(spell: Spell) {\n        if (spell.available) {\n            dispatch(castSpell(spell))\n            setTimeout(() => dispatch(resetSpell(spell)), spell.cooldown || 1000)\n            //setTimeout(() => dispatch(clearCombatLogMessages()), 7000)\n\n        }\n\n    }\n\n    function goStepQuest(choice) {\n        dispatch(stepQuest(choice))\n        if (choice.choice.title === RoomList.Boulder) {\n            dispatch(addCombatLogMessages('An enormous boulder cascades toward you.'))\n\n            setTimeout(() => dispatch(boulderKill()), 10000)\n        } else if (choice.choice.title === RoomList.VolcanoBoss) {\n            dispatch(startThermiteBossFight());\n        } else if (choice.choice.title === RoomList.TempleGuardian) {\n            dispatch(startTempleGuardianBossFight());\n        }\n    }\n\n    function spellIcon(spellName: SpellList) {\n        return match(spellName)\n            .with(SpellList.CommuneWithPlants, () => <img src=\"./Element_F_Nature2.png\" alt={spellName} title={spellName} className={styles.spellstatus} />)\n            .with(SpellList.Fireball, () => <img src=\"./Element_A_Fire2.png\" alt={spellName} title={spellName} className={styles.spellstatus} />)\n            .with(SpellList.FrostRay, () => <img src=\"./Element_B_Lightning2.png\" alt={spellName} title={spellName} className={styles.spellstatus} />)\n            .otherwise(() => <img src=\"./fireball.svg\" alt={spellName} title={spellName} className={styles.spellstatus} />)\n    }\n\n    function getProgressBar() {\n        return (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"350\" height=\"50\">\n\n            <g>\n            \n            <rect id=\"svg_2\" height=\"50\" width=\"0\" y=\"0\" x=\"0\" stroke=\"#00000000\" fill=\"#47923aa3\">\n                <animate attributeName=\"width\" values=\"100;0\" begin=\"0s\" dur=\"15s\" repeatCount=\"1\"/>\n\n            </rect>\n            </g>\n            </svg>\n        )\n    }\n\n\n    return (\n        <div>\n\n            <h2 style={{ 'color': 'rgb(255, 255, 255)' }}>Quest - <span style={{ 'color': 'red' }}>{Math.round(hp * 10) / 10}\n                <img src=\"./hp-heart.svg\" alt=\"heart\" className={hp > 30 ? styles.hpheart : styles.hpheartFaster} />\n            </span> </h2>\n            <div className={styles.row}>\n                <span style={{ 'color': 'lightgrey', 'fontSize': '12px' }}>Current Room: {roomName}</span>\n                <button\n                    className={styles.button}\n                    onClick={() => dispatch(resetState())}\n\n                >Reset</button>\n            </div>\n           \n            <div className={styles.row} >\n            {roomName === RoomList.Boulder && \n            \n            <img src='./timeout_circle.svg'/>\n            }\n            <div className={styles.sblock} style={{ 'color': 'lightgrey', 'fontFamily': 'monospace', 'textAlign': 'left', 'overflow': 'auto', 'height':'70px', 'width':'40em', 'fontSize': '14px' }}>\n            {messages && messages.map(message => (\n                <span>{message}</span>\n            )\n            )}\n                </div>\n            </div>\n            <div className={styles.row}>\n\n                {options && options.map(option =>\n                (\n                    <div style={{ 'backgroundColor': 'rgba(255,255,255,0.1)', border: '0.3rem groove rgba(200,200,200 ,0.2)', borderRadius: '0.5rem', margin: '0.3rem' }}>\n                        <img src=\"./dessert.svg\" alt=\"heart\" className={styles.destinationImage} />\n                        <br />\n                        <span>{option.title}</span>\n                        <button\n                         id={option.title} \n                         key={option.title} \n                            style={{backgroundImage: 'url(./timeout_bar.svg)',  backgroundRepeat: 'no-repeat'}}\n\n                            className={[styles.button, styles.timeoutBar].join(' ')}\n                            onClick={() => goStepQuest({ \"choice\": option })}\n\n                        >\n                            {option.action} - {getCostString(option.cost)}\n                        </button>\n                    </div>\n                )\n\n                )\n                }\n\n            </div>\n            <div className={styles.row}>\n                {spells &&\n\n                    spells.map(spell => (\n\n                        <button\n                            className={styles.button}\n                            onClick={() => spellFn(spell)}\n\n                        >\n                            {spell.available ? spellIcon(spell.description) : <img src=\"./inactive_spell.svg\" alt=\"inactive\" className={styles.spellstatus} />} \n                        </button>\n\n                    )\n                    )\n                }\n            </div>\n        </div>\n    )\n}\n","import React, { useState, FunctionComponent } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n    selectGreenUpgradeCost,\n    selectRedUpgradeCost,\n    selectBlueUpgradeCost,\n    selectItemCost,\n    upgrade,\n    buyItem,\n} from './gameStateSlice';\nimport {GSResourceName} from './Types'\nimport {getCostString} from './Utils'\nimport styles from './Counter.module.css';\n\n\n\nexport const TechTree: FunctionComponent = () => {\n    const greenUpgradeCost = useAppSelector(selectGreenUpgradeCost);\n    const redUpgradeCost = useAppSelector(selectRedUpgradeCost);\n    const blueUpgradeCost = useAppSelector(selectBlueUpgradeCost);\n    const itemCost = useAppSelector(selectItemCost);\n    const dispatch = useAppDispatch();\n\n    return (\n        <div>\n            <div className={styles.row}>\n                {redUpgradeCost &&\n                    <button\n                        className={styles.button}\n                        onClick={() => dispatch(upgrade({ 'red': redUpgradeCost }))}\n                    >\n                        Red Upgrade - {getCostString(redUpgradeCost?.[0])}\n                    </button>\n                }\n                {greenUpgradeCost &&\n                    <button\n                        className={styles.button}\n                        onClick={() => dispatch(upgrade({ 'green': greenUpgradeCost }))}\n                    >\n                        Green Upgrade - {getCostString(greenUpgradeCost?.[0])}\n\n\n                    </button>\n                }\n                {blueUpgradeCost &&\n                    <button\n                        className={ blueUpgradeCost?.[2] > 0 ? styles.errorButton : styles.button }\n                        onClick={() => dispatch(upgrade({ 'blue': blueUpgradeCost }))}\n                    > \n                        Blue Upgrade - {getCostString(blueUpgradeCost?.[0])}\n                    </button>\n                }\n            </div>\n        </div>\n\n    );\n}\n\n/*\n <div className={styles.row}>\n                {itemCost &&\n                    <button\n                        className={styles.button}\n                        onClick={() => dispatch(buyItem({ 'item': itemCost }))}\n                    >\n                        Item - {getCostString(itemCost[0])}\n                    </button>\n                }\n            </div>\n */\n","import React, { useState, FunctionComponent } from 'react';\nimport { CYOA } from './CYOA';\nimport { Draft } from './Draft';\nimport { TechTree } from './TechTree';\n\n\nexport const GameWrapper: FunctionComponent = () => {\n\n\n\n    return (\n        <div>\n        <CYOA />\n        <Draft />\n        <TechTree />\n        </div>\n    )\n}\n\n","import React, { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  selectGrid,\n  triggerThermite,\n  enableButtons,\n  selectStatus,\n  calculateDamage,\n  startGrid,\n  selectBossHP, \n  winThermiteBossFight\n} from './thermiteSlice';\nimport styles from './Thermite.module.css';\n\nexport function Thermite() {\n  const grid = useAppSelector(selectGrid);\n  const bossHP = useAppSelector(selectBossHP);\n  const status = useAppSelector(selectStatus);\n  const dispatch = useAppDispatch();\n \n\n\n  function getButtonStyle(cellValue, enabledButtons) {\n    if (status === 'idle') {\n      return styles.button;\n    }\n    switch (cellValue) {\n      case 0: return styles.button;\n      case 1: return styles.buttonThermite;\n      case 2: return styles.buttonThermiteCorrect;\n      case 3: return styles.buttonThermiteWrong;\n    }\n  }\n\n  function runLoop() {\n    if(bossHP <= 0){ \n      dispatch(winThermiteBossFight())\n      return\n    }\n    setTimeout(() => dispatch(startGrid()), 500);\n    setTimeout(() => dispatch(enableButtons()), 6500);\n    setTimeout(() => dispatch(calculateDamage()), 13000);\n    setTimeout(() => runLoop(), 17000);\n  }\n\n  function getBoard() {\n    switch (status) {\n      case 'idle': return (<div>\n        <div className={styles.row}>\n        <button className={styles.button}\n        style={{'backgroundColor': 'goldenrod', color:'white'}}\n          onClick={runLoop\n          }\n\n        >Start</button>\n        </div>\n        {grid && grid.map((row, i) => {\n          return (<div className={styles.row}>\n            {row.map((cell, j) =>\n            (<button disabled={true} className={getButtonStyle(cell, status)}\n\n\n            >O</button>)\n            )\n            }\n\n          </div>\n          )\n        })}\n\n\n\n      </div>);\n      case 'starting':\n      case 'started': \n      case 'finished': return (\n        <div>\n\n          {grid && grid.map((row, i) => {\n            return (<div className={styles.row}>\n              {row.map((cell, j) =>\n              (<button disabled={status !== 'started'} className={getButtonStyle(cell, status)}\n                onClick={() => dispatch(triggerThermite([i, j]))}\n\n              >O</button>)\n              )\n              }\n\n            </div>\n            )\n          })}\n\n\n\n        </div>\n      )\n\n    }\n  }\n\n\n  return (\n    <div>\n      <h2 style={{ 'color': 'rgb(255, 255, 255)' }}>Volcano Boss</h2>\n      <img src='./flying_dragon.gif' className=\"App-logo\" style={{height:'192px', width:'192rpx'}}alt=\"logo\" />\n      <br></br>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"350\" height=\"50\">\n        <g>\n          <rect id=\"svg_1\" height=\"50\" width={350 * (bossHP / 100)} y=\"0\" x=\"0\" stroke=\"#000\" fill=\"#00b977\" />\n          <rect id=\"svg_2\" height=\"50\" width={350 - (350 * (bossHP / 100))} y=\"0\" x={350 * (bossHP / 100)} stroke=\"#000\" fill=\"#af1c1f\" />\n        </g>\n      </svg>\n      <br />\n      {getBoard()}\n    </div>\n  );\n}\n\n//{status === 'started' && <img src='./timeout_bar.svg' className=\"App-logo\" alt=\"logo\" />}","import React, { useState, FunctionComponent } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n    selectRed,\n    selectGreen,\n    selectBlue,\n    selectHP,\n    selectBossHP,\n    selectNextDoors,\n    stepQuest,\n    selectSpells,\n    castSpell,\n    resetSpell,\n    clearCombatLogMessages,\n    selectCombatLogMessages,\n    selectRoomName,\n    resetState,\n    boulderKill,\n    addCombatLogMessages,\n    clearGameLoopIntervals,\n    incrementBossHP,\n    setGameLoopIntervals,\n    attackBoss,\n    bossAttack,\n    selectBossStatus,\n    SlimeBossStatusColors,\n    selectGameLoopInterval\n} from './gameStateSlice';\n\n\n\nimport { Spell, RoomList, SpellList } from './Types'\nimport { formatResourceValue } from './Utils'\n\nimport styles from './Counter.module.css';\n\n\n\nexport const BossFight: FunctionComponent = () => {\n    let options = useAppSelector(selectNextDoors)\n    let roomName = useAppSelector(selectRoomName)\n    let messages = useAppSelector(selectCombatLogMessages)\n    let spells = useAppSelector(selectSpells)\n    let bossFightStarted = false;\n    const red = useAppSelector(selectRed);\n    const green = useAppSelector(selectGreen);\n    const blue = useAppSelector(selectBlue);\n    const gameLoopInterval = useAppSelector(selectGameLoopInterval)\n\n    let spell1 = useAppSelector(selectSpells).find(x => x.description === SpellList.Fireball)\n    let spell2 = useAppSelector(selectSpells).find(x => x.description === SpellList.FrostRay)\n    let spell3 = useAppSelector(selectSpells).find(x => x.description === SpellList.SpectralRope)\n    const dispatch = useAppDispatch();\n    const hp = useAppSelector(selectHP);\n    const bossHp = useAppSelector(selectBossHP);\n    const bossStatus = useAppSelector(selectBossStatus);\n\n\n    function spellFn(spell?: Spell) {\n        if (spell && spell.available) {\n            dispatch(castSpell(spell))\n            dispatch(attackBoss(spell))\n            setTimeout(() => dispatch(resetSpell(spell)), spell.cooldown || 1000)\n            setTimeout(() => dispatch(clearCombatLogMessages()), 7000)\n\n        }\n\n    }\n\n    function gemAttack() {\n        dispatch(castSpell({ 'description': 'Gem Attack' }))\n        dispatch(attackBoss({ 'description': 'Gem Attack' }))\n\n    }\n\n    function initializeLoop() {\n        // start timer after button is clicked\n        bossFightStarted = true;\n        dispatch(clearGameLoopIntervals());\n        let intval = setInterval(() => {\n            dispatch(bossAttack());\n        },\n            5000);\n\n\n        dispatch(setGameLoopIntervals(intval))\n    }\n\n    const BossIcon = (props) => (\n        <svg height=\"300px\" width=\"300px\" fill={props.fillColor} version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\"><g xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"#ffe900\" d=\"M9.6,50.3c0,0-1.9-0.9-2.8-1.5s-2.4-1.3-2.4-1.3s-1.9,1.3-2.3,2.9c-0.4,1.6,1.2,4.2,1.2,4.2s0,0,0.3-1.3   c0.3-1.3,0.9-1.7,3.2-2C9.1,50.9,9.6,50.3,9.6,50.3z\" /><path d=\"M61.5,43.9c-1.1,0.6-2.3,1.7,1.3,2.1c0.6,0.1,1.2-0.2,1.4-0.8c0.2-0.5,0-0.9-0.4-1.2C63.2,43.5,62.3,43.5,61.5,43.9z\" /><path d=\"M54.2,50.1c-0.7,0.4-1.4,1,0.8,1.3c0.4,0,0.8-0.1,0.9-0.5c0.1-0.3,0-0.6-0.2-0.7C55.2,49.9,54.6,49.9,54.2,50.1z\" /><path d=\"M66.6,58.2c-0.7,0.4-1.4,1,0.8,1.3c0.4,0,0.8-0.1,0.9-0.5c0.1-0.3,0-0.6-0.2-0.7C67.7,57.9,67.1,57.9,66.6,58.2z\" /><path d=\"M10.2,42.1c1.8-0.1,3.1-1.2,5.7-1.6l2.3-0.2l-0.4,0.4c0,0,3.8-0.3,5.9-0.3l1.6,0.2l-0.6,0.8c0,0,3.4-1.7,5.4-3.4   c2-1.6,2-2.1,0.1-1.7c-1.9,0.4,2.3-1.7,3.2-2.9c0.8-1.1-2.8,0.3-5.2,0.7c-2.4,0.4,6.8-4.7,6.8-5.8c0-1.1-6.9,2.3-8.3,2.3   c-1.3,0,5.9-3.3,6.8-5s-4.8,2.8-7.5,2.7c-2.8-0.1,8-6.4,11.1-7.3c3.2-0.9,4.7-2.4,4.7-2.4s-4,1.7-5.4,1.7c-1.4,0-9.6,4.1-11.7,6   c0,0,4.4-4.2,6.1-5c1.7-0.8,6.1-5,6.1-5s-4,2.2-4.7,2.2c-0.7,0-8.3,4.9-8.9,5.7c-0.6,0.8,1.1-5.2,3.1-6.9c1.9-1.7,3.2-4.6,3.2-4.6   s-7.1,7-8.3,8.8c0,0,1.2-4.2,2.5-5.6c1.3-1.4,2-3.9,2-3.9s-4.3,3.4-5.2,4.6c-0.9,1.2-7.2,1.3-8.1,1.9c-0.8,0.6-2.9,1.2-2,4.6   c0.8,3.4,3.9,5.4,1.9,10.2L10.2,42.1z\" /><path d=\"M42.3,83.9c0,0,0.4-0.4,0-1.7c-0.1-0.4-0.3-0.7-0.6-1c-1.4-1.8-1.9-2.8-1.9-2.8H37c0,0,0.1,1.6-0.1,2.4   c-0.3,0.8-2.4,1.8-2.2,3.4c0.3,1.6,1.1,2.3,2,2.3c1,0,1-0.7,1-0.7s-1.4-0.3-1.4-1.1c0,0,1.4-1.4,1.4-2c0,0,0.1,3.8,1,4.5   c0.8,0.7,1.8,0.7,1.8,0.7l0-0.1c-0.3-0.7-1-1.4-0.8-2.2c0.1-0.5,0.8-1.4,0.7-2.6c0,0,1,2.9,2,2.4c1.1-0.4,1.9-1,1.9-1.9   C44.2,83.6,43,84.7,42.3,83.9z\" /><path d=\"M29.6,83.6c0,0,0.3-0.3,0-1.4c-0.1-0.3-0.3-0.6-0.5-0.9c-1.2-1.5-1.6-2.4-1.6-2.4H25c0,0,0.1,1.4-0.1,2.1   c-0.2,0.7-2.1,1.5-1.9,2.9c0.2,1.4,0.9,2,1.7,2s0.8-0.6,0.8-0.6s-1.2-0.2-1.2-0.9c0,0,1.2-1.2,1.2-1.7c0,0,0.1,3.3,0.8,3.8   c0.7,0.6,1.5,0.6,1.5,0.6l0-0.1c-0.3-0.6-0.8-1.2-0.7-1.9c0.1-0.4,0.7-1.2,0.6-2.2c0,0,0.8,2.4,1.7,2.1c0.9-0.3,1.6-0.8,1.6-1.6   C31.2,83.4,30.1,84.3,29.6,83.6z\" /><path d=\"M85,83.2c-6.5,0.5-14.3-3.5-14.3-3.5s11,2.2,16.8-0.5c5.7-2.7,10.6-6.5,10.6-6.5l-8.4,1.6c0,0,6.4-6,7.6-6.8   c1.8-1.2-6,1.4-6,1.4c0.8-1.9,6.3-6.3,6.3-6.3s-4.9,0.8-8.7,4.9c-3.8,4.1-4.1,4.6-10.3,5.7c-6.3,1.1-9.4-2.4-9.4-2.4s2.2,0.9,7-0.9   c11.5-4.4,9.8-7,9.8-7c-6.6,5-10.7,2-13.7,1.7c-2.9-0.3-8.2,0.8-8.2,0.8c-4.7,0.9-10.9,0.2-13.8-0.3c3.5,0.3,9.3-0.6,12.7-2   c3.8-1.6,10.1-1.2,10.1-1.2s-3.9-1.6-10.1-0.3c-6.1,1.4-8.7,1.4-13.2,1.1c-0.6,0-1.3-0.1-2-0.3c2.3-0.7,4.7-1.7,5.4-2   c1.2-0.7,5.4-0.6,5.4-0.6s-5.9-1.4-8-0.4c-1.9,0.9-6.3,1.3-7.2,1.4c-0.3-0.1-0.6-0.3-0.9-0.4c1.6-0.4,3.3-1.2,3.9-1.6   c0.9-0.5,4.9-1.8,4.9-1.8s-4.7,0.3-7.5,1.3c-1.5,0.6-3.1,0.5-4.3,0.4c-0.2-0.1-0.4-0.2-0.6-0.4c0.3,0,0.7,0,1.1,0.1   c1.9,0.2,6.1-2.4,6.1-2.4c-2.6,0.9-5.7,1.1-6.7,0.5c-0.8-0.5-3.4-1.1-4.7-1.4c0.4,0,0.8-0.2,1.3-0.5l-0.2,0.2c0,0,10-1.8,11.8-3.5   c1.2-1.1-1.7-0.9-3.9-0.7c1.3-0.4,3.5-1.1,7.2-2.6c8.4-3.5-7.1,0.8-7.1,0.8s6.5-2.2,12.4-5.7c4.3-2.5-4.9,0.7-10.4,2.7   c0.1-0.1,0.2-0.2,0.3-0.3c4.6-1.9,11.7-5,13.6-6.5c2-1.6-4-0.3-7.7,0.6c0.1-0.1,0.3-0.3,0.4-0.4c3.4-1.2,8.7-3.3,10-4.6   c1.6-1.6-3.8-0.2-6.1,0.5c1.7-1.8,3.4-3.3,4.5-3.8c2.7-1.2,10.8-7.5,10.4-8.4c-0.3-0.6-2.6,0.8-3.8,1.6c2.3-1.9,4.7-7.1,3-5   c-1.8,2.2-6.3,3.3-6.3,3.3c3.5-2.2,5.7-10.4,4.1-8c-0.3,0.4-0.6,0.8-0.9,1.2c-2.1,2.5-4.8,4.3-7.9,5.3c-9.5,3.1-11.7,5.4-11.7,5.4   c1.6-3.7,9.6-6.1,9.6-6.1c-1,0-10.8,2.2-13,5.7c-2.2,3.5-13,12.6-14.7,13.9c-0.3,0.2-0.6,0.4-0.9,0.7c-1.4,1-3.1,1.5-4.8,1.6   c-3.3,0.2-6.3,1.5-6.3,1.5c2-2.1,5.5-2.4,5.5-2.4s-1.1-0.4-3.4,0c-2.2,0.4-5.8,1.5-5.8,1.5l2.1-1.5c-1.2,0-4.3,1.4-4.3,1.4   c-1.5,0.3-2.7,0.8-3.3,1.1c-1.7,1-3.1,2.8-3.1,2.8c2.4,1.3,6,3.1,6.2,3.8c0.3,0.7-5.4,1.7-5.4,1.7c1.6,0.4,4.3,1.2,6.2,1.8   c1.5,0.5,2.7,1.6,3.3,3c0.8,2,1.5,4.6,1.3,5.7c-0.2,1.6,2.3,9.3,3.4,11.4c1,1.9,2.4,3.2,3.7,3.5c0.4,0.2,1,0.4,2.2,0.3   c2-0.2,6.2,0.3,5.5-0.4c-0.6-0.6-3-0.3-4.6-1.3c0-0.1,0.1-0.1,0.1-0.2c0.6,0.2,1.5,0.3,2.4,0.1c1.5-0.4-0.4-0.2-2.2-1.1   c0-0.1,0-0.2,0-0.3c0.5-0.1,1.2-0.2,1.6-0.6c0.4-0.4-0.6-0.6-1.7-1c0-0.3-0.1-0.5-0.1-0.8c0.5,0.1,0.9,0.1,1.1-0.1   c0.3-0.3-0.7-1.2-1.7-2.1c-0.4-1.2-0.7-2.1-0.7-2.1l3.5-0.6c3.9,2.4,3.8,10.3,7.6,9.9c0.8,0.1,2,0.2,3.1,0.1c2-0.2,6.2,0.3,5.5-0.4   c-0.7-0.7-3.7-0.2-5.2-1.7c0,0,1.4,0.7,3.1,0.3c1.6-0.4-0.8-0.1-2.7-1.4c0,0,1.5,0,2.1-0.6c0.5-0.5-1.6-0.7-2.8-1.7   c0-0.1,0-0.3,0-0.4c0.7,0.2,1.7,0.4,2.1,0.1c0.3-0.3-0.9-1.4-2-2.4c0-0.4,0-0.7,0-1.1c3.9,4.6,8.7,7.9,10.8,9.3   c0.8,0.5,1.6,1.1,2.3,1.6c8.2,6.2,14.6,6,14.6,6c-3.5-0.8-6.5-5.7-6.5-5.7c6.5,5.7,16.8,6.8,20.3,6.8c2.8,0,10.9-3.5,10.9-3.5   S91.5,82.7,85,83.2z M10.8,47.8c-0.5,0-0.9-0.4-0.9-0.9c0,0,0,0,0,0c-0.9,0.1-1.8,0.3-1.8,0.3c1.4-1.1,2.6-1.1,2.6-1.1   c0.5,0,0.9,0.4,0.9,0.9C11.6,47.5,11.3,47.8,10.8,47.8z\" /></g></svg>\n    )\n    //<img src=\"./boss_hydra.svg\" alt=\"heart\" className={styles.animate__bounce} />\n\n    return (\n        <div>\n\n            <h2 style={{ 'color': 'rgb(255, 255, 255)' }}>Temple Guardian </h2>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"350\" height=\"50\">\n                <g>\n                    <rect id=\"svg_1\" height=\"50\" width={350 * (bossHp / 100)} y=\"0\" x=\"0\" stroke=\"#000\" fill=\"#00b977\" />\n                    <rect id=\"svg_2\" height=\"50\" width={350 - (350 * (bossHp / 100))} y=\"0\" x={350 * (bossHp / 100)} stroke=\"#000\" fill=\"#af1c1f\" />\n                </g>\n            </svg>\n            <br />\n            <div className={styles.row}>\n                {spell1 &&\n                    <button\n                        className={styles.button}\n                        onClick={() => spellFn(spell1)}\n\n                    >\n                        {spell1.available ? <img src=\"./active_spell.svg\" alt=\"active\" className={styles.spellstatus} /> : <img src=\"./inactive_spell.svg\" alt=\"inactive\" className={styles.spellstatus} />} {spell1.description}\n                    </button>\n                }\n                <div className={styles.animate__bounce}>{bossStatus === 'attacking' && <div></div>} <BossIcon fillColor={SlimeBossStatusColors[bossStatus]} /> </div>\n                {spell2 &&\n                    <button\n                        className={styles.button}\n                        onClick={() => spellFn(spell2)}\n\n                    >\n                        {spell2.available ? <img src=\"./active_spell.svg\" alt=\"active\" className={styles.spellstatus} /> : <img src=\"./inactive_spell.svg\" alt=\"inactive\" className={styles.spellstatus} />} {spell2.description}\n                    </button>\n                }\n            </div>\n            <br />\n            {spell3 &&\n                <button\n                    className={styles.button}\n                    onClick={() => spellFn(spell3)}\n\n                >\n                    {spell3.available ? <img src=\"./active_spell.svg\" alt=\"active\" className={styles.spellstatus} /> : <img src=\"./inactive_spell.svg\" alt=\"inactive\" className={styles.spellstatus} />} {spell3.description}\n                </button>\n            }\n            <br />\n            <button\n                className={styles.button}\n                onClick={() => gemAttack()}\n\n            >\n                <img src=\"./active_spell.svg\" alt=\"active\" className={styles.spellstatus} />  Gem Attack\n                        </button>\n            <br />\n            <span style={{ 'color': 'red' }}>{Math.round(hp * 10) / 10}\n                <img src=\"./hp-heart.svg\" alt=\"heart\" className={hp > 30 ? styles.hpheart : styles.hpheartFaster} />\n            </span>\n            {isNaN(gameLoopInterval) && \n            <button\n                className={styles.button}\n                onClick={() => initializeLoop()}\n                style={{'backgroundColor': 'goldenrod'}}\n\n            >\n                Start Fight\n                        </button>\n            }\n            <div className={styles.row}>\n\n                <span className={styles.value} style={{ 'color': 'red' }}>{formatResourceValue(red)}</span>\n\n                <span className={styles.value} style={{ 'color': 'limegreen' }}>{formatResourceValue(green)}</span>\n                <span className={styles.value} style={{ 'color': 'steelblue' }}>{formatResourceValue(blue)}</span>\n            </div>\n        </div>\n    )\n}\n\n\n/*\n<div className={styles.slimerun}>\n                <div className={styles.slimerunColor} />\n            </div>\n            */","import React, { useState, FunctionComponent } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\n\nimport { GameWrapper } from './GameWrapper'\nimport { Thermite } from '../thermite_bossfight/Thermite'\nimport { BossFight } from './BossFight'\nimport {\n    clearGameLoopIntervals,\n    setGameLoopIntervals,\n    incrementRed,\n    incrementGreen,\n    incrementBlue,\n    incrementHP,\n    resetState,\n    startLoop,\n    selectRed,\n    selectGreen,\n    selectBlue,\n    selectGreenFnP1,\n    selectBlueDist,\n    selectBluePast,\n    selectGreenDist,\n    selectRedDist,\n    selectGameStatus\n} from './gameStateSlice';\n\nimport styles from './Counter.module.css';\n\nexport const GameOver: FunctionComponent = () => {\n    let status = useAppSelector(selectGameStatus)\n    const red = useAppSelector(selectRed);\n    const redDist = useAppSelector(selectRedDist);\n    const green = useAppSelector(selectGreen);\n    const greenDist = useAppSelector(selectGreenDist);\n    const blue = useAppSelector(selectBlue);\n    const blueDist = useAppSelector(selectBlueDist);\n    const bluePast = useAppSelector(selectBluePast);\n    const gameStatus = useAppSelector(selectGameStatus);\n    const dispatch = useAppDispatch();\n\n    function initializeLoop() {\n        // start timer after button is clicked\n        if (gameStatus == 'ready' || gameStatus == 'victory' || gameStatus == 'gameOver') {\n            dispatch(resetState())\n\n            dispatch(startLoop());\n            dispatch(clearGameLoopIntervals());\n            let intval = setInterval(() => {\n                dispatch(incrementRed());\n                dispatch(incrementGreen());\n                dispatch(incrementBlue());\n                dispatch(incrementHP());\n            },\n                1000);\n            dispatch(setGameLoopIntervals(intval))\n        }\n    }\n\n    return (\n\n        <div>\n            {(() => {\n                switch (status) {\n                    case 'victory': return <div><div className={styles.endScreen} style={{ 'color': 'gold' }} > <span>You Win!</span> </div>  <button\n                        className={styles.button}\n                        aria-label=\"start\"\n                        onClick={initializeLoop}\n                    >\n                        Start\n                    </button></div>;\n                    case 'gameOver': return <div><div className={styles.endScreen} style={{ 'color': 'red' }} > <span>GAME OVER</span> </div>\n                        <button\n                            className={styles.button}\n                            aria-label=\"start\"\n                            onClick={initializeLoop}\n                        >\n                            Start\n                        </button></div>\n                    case 'tgBossFight': return <BossFight />\n                    case 'thermiteBossFight': return <Thermite />\n                    default: return <GameWrapper></GameWrapper>\n                }\n            })()\n            }\n        </div>\n    )\n}\n","import React from 'react';\nimport logo from './Beetle.png';\nimport { CYOA } from './features/gameState/CYOA';\nimport { Draft } from './features/gameState/Draft';\nimport { GameOver } from './features/gameState/GameOver';\nimport { TechTree } from './features/gameState/TechTree';\nimport { Maze } from './features/maze/Maze';\nimport { Thermite } from './features/thermite_bossfight/Thermite'\nimport { Farming } from './features/farming_minigame/Farming'\nimport './App.css';\nimport Particles from \"react-tsparticles\";\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      \n      <Particles\n      id=\"tsparticles\"\n      options={{\n        fullScreen: {\n          enable: true,\n          zIndex: 0\n        },\n        background: {\n          color: {\n            value: \"rgb(147,70,17)\",\n          },\n          \n          opacity: 0.01\n        },\n        fpsLimit: 60,\n        interactivity: {\n          detectsOn: \"canvas\",\n          modes: {\n            bubble: {\n              distance: 400,\n              duration: 2,\n              opacity: 0.2,\n              size: 10,\n            }, \n          },\n        },\n        particles: {\n          color: {\n            value: [\n              \"#921212\",\n              \"#9e1b3e\",\n              \"#c3711a\",\n              \"#ff6b00\"\n            ]\n\n          },\n        \n          collisions: {\n            enable: false,\n          },\n          move: {\n            direction: \"none\",\n            enable: true,\n            outMode: \"out\",\n            random: true,\n            speed: 4,\n            straight: false,\n          },\n          number: {\n            density: {\n              enable: true,\n              value_area: 800,\n            },\n            value: 8,\n          },\n          opacity: {\n            value: 0.5,\n          },\n          shape: {\n            type: [\"polygon\", \"circle\"],\n          },\n          size: {\n            random: true,\n            value: 5,\n          },\n          rotate: {\n            direction: \"clockwise\",\n            animation: {\n              enable: true,\n              speed: 8\n            }\n          },\n          zIndex: {\n            opacityRate: 0.2,\n            sizeRate: 0.5\n          }\n        },\n        detectRetina: true,\n      }}\n      \n      >\n        </Particles>\n      <header className=\"App-header\" >\n      \n        \n        <div style={{zIndex: 1, backgroundColor: 'rgba(85, 85, 85, 0.3)'}}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"150px\" width=\"150px\" fill=\"#b2b2b2\" viewBox=\"0 0 64 64\" x=\"0px\" y=\"0px\">\n          <path d=\"M19.631,36.864A1,1,0,0,0,20.369,35c-.06-.023-.117-.05-.177-.074L21.9,24.688c.363.027.721.053,1.088.083-.13,10.067-2.308,23.656-3.627,31A7,7,0,0,0,26.252,64H39.238a6.994,6.994,0,0,0,6.935-7.953c-.378-2.729-1.417-9.59-3.2-17.076,4.679-.153,17.295-1.063,20.864-6.416a1,1,0,0,0,.155-.714C63.936,31.522,58.521,0,30,0,1.376,0,.012,22.725,0,22.955a1,1,0,0,0,.26.718A57.524,57.524,0,0,0,19.631,36.864ZM16.6,24.341l-2.129,7.808c-1.055-.6-2.058-1.215-3.006-1.837L14.5,24.236C15.181,24.267,15.881,24.3,16.6,24.341Zm-6.8,4.836q-1.236-.874-2.3-1.713l2.043-3.406c.876.023,1.8.051,2.779.087ZM5.914,26.2c-1.009-.843-1.851-1.6-2.511-2.222,1,0,2.288,0,3.826.031ZM18.3,34.115c-.692-.316-1.365-.647-2.025-.987l2.363-8.668c.412.025.838.056,1.258.084ZM34.878,24.046c-3.389-.462-6.71-.824-9.872-1.1a5,5,0,1,1,9.872,1.1Zm8.135,36.237A5,5,0,0,1,39.238,62H26.252a4.994,4.994,0,0,1-4.923-5.873c1.323-7.372,3.5-20.987,3.656-31.185,3.855.343,7.945.809,12.1,1.433,4.258,10.944,6.515,25.644,7.111,29.946A4.983,4.983,0,0,1,43.013,60.283Zm-3.657-33.55c.648.107,1.3.216,1.944.331l3.278,9.83c-.737.043-1.439.072-2.1.088A102.933,102.933,0,0,0,39.356,26.733ZM56,30.545v4.529c-.644.2-1.313.373-2,.534V29.95Q55.008,30.24,56,30.545Zm-4,5.479c-.378.07-.755.135-1.136.2l-1.5-7.488q1.328.318,2.634.665ZM47.228,28.24,48.881,36.5c-.759.094-1.51.174-2.246.239l-3.089-9.266Q45.4,27.832,47.228,28.24ZM58,34.368V31.191c1.133.383,2.235.794,3.319,1.219A11.188,11.188,0,0,1,58,34.368ZM54.939,15.051a42.8,42.8,0,0,1,4.619,8.694,4.994,4.994,0,0,1-4.619-8.694ZM39.586,3.422A27.9,27.9,0,0,1,49.964,9.363,6,6,0,0,1,39.586,3.422Zm-1.945-.537A7.993,7.993,0,0,0,51.417,10.77a33.082,33.082,0,0,1,2.332,2.673,6.99,6.99,0,0,0,6.509,12.174,46.755,46.755,0,0,1,1.393,4.774,118.874,118.874,0,0,0-24.78-6.062,7,7,0,1,0-13.86-1.556c-9.971-.8-18.032-.815-20.9-.788A22.525,22.525,0,0,1,3.723,16.3,7.994,7.994,0,0,0,15,9a7.872,7.872,0,0,0-.906-3.682C18,3.331,23.163,2,30,2A32.564,32.564,0,0,1,37.641,2.885ZM12.348,6.3A5.993,5.993,0,0,1,4.6,14.5,21.6,21.6,0,0,1,12.348,6.3Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M26.918,48.034a1.006,1.006,0,0,0-1.225.707,12.368,12.368,0,0,1-.588,1.812,1,1,0,0,0,1.79.894,12.993,12.993,0,0,0,.73-2.188A1,1,0,0,0,26.918,48.034Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M27.758,30.03a1,1,0,0,0-.728,1.213c.009.038.942,3.887-.02,10.616q-.153,1.065-.3,1.978a1,1,0,0,0,.823,1.15,1.034,1.034,0,0,0,.164.013,1,1,0,0,0,.986-.837c.1-.623.207-1.3.31-2.021,1.016-7.113.023-11.213-.02-11.385A1,1,0,0,0,27.758,30.03Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M33.341,46.92a1,1,0,0,0-1.28.6,11.342,11.342,0,0,1-.918,1.964,1,1,0,1,0,1.714,1.03A13.1,13.1,0,0,0,33.941,48.2,1,1,0,0,0,33.341,46.92Z\" >\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M33.876,36.008a1,1,0,0,0-.868,1.116,29.669,29.669,0,0,1,0,6.032,1,1,0,0,0,.889,1.1.955.955,0,0,0,.106.006,1,1,0,0,0,.993-.9,31.242,31.242,0,0,0,0-6.491A1,1,0,0,0,33.876,36.008Z\">\n          <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M37.01,44.142l1,7a1,1,0,1,0,1.98-.284l-1-7a1,1,0,0,0-1.98.284Z\">\n            <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"skewY\" values=\"1;-1;1;-1;1;\" additive=\"sum\" repeatCount=\"indefinite\" dur=\"6s\" fill=\"freeze\"/>\n      \n          </path>\n          <path d=\"M61,53c0-.964-.123-9.459-4.4-10.978-2.728-.969-6.12,1.109-10.375,6.348a1,1,0,0,0-.119,1.077c.14.278,1.055,1.838,4.146,3.056a33.757,33.757,0,0,1-.8,8.963,1.963,1.963,0,0,0,.327,1.734,2,2,0,0,0,1.605.8h4.6a1.978,1.978,0,0,0,1.434-.609,2.033,2.033,0,0,0,.565-1.478,51.524,51.524,0,0,0-1.064-8.036C57.867,53.95,58.878,54,60,54A1,1,0,0,0,61,53Zm-5.02,9-4.608.015a35.888,35.888,0,0,0,.9-8.865,23.808,23.808,0,0,0,2.557.506A50.855,50.855,0,0,1,55.98,62ZM48.289,49.01c4.389-5.216,6.662-5.449,7.64-5.1,2.171.77,2.885,5.49,3.038,8.081C51.986,51.815,49.219,49.917,48.289,49.01Z\">\n          \n          <animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" values=\"-3, 60, 80;3, 60,80;-3,60,80\" dur=\"3s\" additive=\"sum\" repeatCount=\"indefinite\" />\n          </path>\n        \n        <animate attributeName=\"fill\" values=\"b2b2b2;704cb6;b2b2b2;\" dur=\"8s\" repeatCount=\"indefinite\"/>\n        \n      \n      \n\n        </svg>\n        <GameOver/>\n        </div>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createAsyncThunk, createSlice, PayloadAction, current } from '@reduxjs/toolkit';\nimport { stat } from 'fs';\nimport { RootState, AppThunk } from '../../app/store';\n\nconst currentVersion = '0.2'\n\ninterface GridParams {\n  gridLength: number;\n  coordChoices: Array<Array<number>>;\n  choiceCount: number;\n  grid: Array<Array<CellStatus>>;\n  gridChoices: Array<Array<number>>;\n}\n\ninterface AchievementStats {\n  perfectScores: number;\n  streak: number;\n}\n\ninterface Achievement {\n  perfectScores?: number;\n  streak?: number;\n  title: string;\n  description: string;\n  complete: boolean;\n}\nexport type CellStatus = 'GreenActive' | 'BlueActive' | 'RedActive' | 'OrangeActive' | 'GreenInactive' | 'BlueInactive' | 'RedInactive' | 'OrangeInactive' |\n  'GreenActiveHighlighted' | 'BlueActiveHighlighted' | 'RedActiveHighlighted' | 'OrangeActiveHighlighted' | 'GreenInactiveHighlighted' | 'BlueInactiveHighlighted' | 'RedInactiveHighlighted' | 'OrangeInactiveHighlighted' |\n  'Neutral' | 'GoldInactive' | 'GoldActive'\nexport const activeCellStatuses: Array<CellStatus> = ['GreenActive', 'BlueActive', 'RedActive', 'OrangeActive', 'GoldActive']\n\nlet fiveStreak: Achievement = { streak: 5, title: \"Five Win Streak\", description: \"Unprecedented success!\", complete: false}\nlet tenStreak: Achievement = { streak: 10, title: \"Ten Win Streak\", description: \"Unprecedented success!\", complete: false }\nlet tenTotal: Achievement = { perfectScores: 10, title: \"Ten Wins!\", description: \"Unprecedented success!\", complete: false }\nlet hundredTotal: Achievement = { perfectScores: 100, title: \"One Hundred Wins\", description: \"Unprecedented success!\", complete: false }\n\nexport interface FarmingState {\n  grid: GridParams;\n  status: 'idle' | 'starting' | 'started' | 'finished';\n  score: number;\n  maxScore: number;\n  maxScoreCoords: Array<Array<number>>;\n  enabled: boolean;\n  achievementStats: AchievementStats;\n  achievements: Array<Achievement>;\n  freshAchievements: Array<Achievement>;\n  version: string;\n}\n\n\n\nlet threeByThreeGrid: GridParams = {\n  gridLength: 3,\n  choiceCount: 3,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2]],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2]].length).keys()], 3)\n}\nlet fourByFourGrid: GridParams = {\n  gridLength: 4,\n  choiceCount: 4,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3],],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3],].length).keys()], 4)\n}\nlet fiveByFiveGrid: GridParams = {\n  gridLength: 5,\n  choiceCount: 5,\n  coordChoices: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [3, 4], [4, 3], [4, 4],],\n  grid: [['Neutral']],\n  gridChoices: choose([...Array([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [3, 4], [4, 3], [4, 4],].length).keys()], 5)\n}\n\nlet allParams = {\n  3: threeByThreeGrid,\n  4: fourByFourGrid,\n  5: fiveByFiveGrid\n}\n\nconst initialState: FarmingState = {\n  //grid: [[0, 0], [1, 0]],\n  grid: initializeGrid(threeByThreeGrid, false),\n  status: 'idle',\n  score: 0,\n  maxScore: 20,\n  maxScoreCoords: [[0]],\n  enabled: false,\n  achievementStats: { perfectScores: 0, streak: 0 },\n  achievements: [fiveStreak, tenStreak, tenTotal, hundredTotal],\n  freshAchievements: new Array<Achievement>(),\n  version: '0.1'\n};\n\nfunction getRandomIntInclusive(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nfunction emptyGrid(gridParams: GridParams): GridParams {\n  let n = gridParams.gridLength\n  let randomGrid: Array<Array<CellStatus>> = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => 'Neutral'))\n  gridParams.grid = randomGrid\n  return gridParams\n}\n\nfunction initializeGrid(gridParams: GridParams, showGolden: boolean): GridParams {\n  let n = gridParams.gridLength\n  let lookup = {1: 'GreenInactive', 2: 'BlueInactive', 3:'RedInactive'}\n  gridParams.grid = [...Array(n).keys()].map(i => [...Array(n).keys()].map(j => lookup[getRandomIntInclusive(1, 3)]))\n  if(showGolden && Math.random() >0.99) {\n    gridParams.grid[getRandomIntInclusive(0, gridParams.gridLength - 1)][getRandomIntInclusive(0, gridParams.gridLength - 1)] = 'GoldInactive'\n  }\n  return gridParams\n}\nexport interface BruteforceSolution {\n  coords: Array<Array<number>>;\n  maxScore: number;\n}\n\n\nfunction choose(arr, k, prefix: Array<number> = []) {\n  if (k == 0) return [prefix];\n  return arr.flatMap((v, i) =>\n    choose(arr.slice(i + 1), k - 1, [...prefix, v])\n  );\n}\n\n\n\nfunction bruteForce(grid: GridParams): BruteforceSolution {\n  //let coordChoices = {1: [0,0], 2: [0,1], 3: [0,2], 4: [1,0], 5:[2,0], 6:[1,1], 7:[2,1],8:[1,2], 9:[2,2]}\n  let coordChoices = grid.coordChoices\n  let gridCopy1 = deactivateGridCellStatus(JSON.parse(JSON.stringify(grid.grid)))\n  let curr: Array<BruteforceSolution> = []\n  let choices = grid.gridChoices\n  let maxCoord = [[0]]\n  let maxScore = 0\n  for (const choice of choices) {\n    let gridCopy = deactivateGridCellStatus(gridCopy1)\n    choice.flatMap(x => activateGridCoords(gridCopy, coordChoices[x]))\n    let score = calculateScore(gridCopy)\n    let coords1 = choice.map(x => coordChoices[x])\n    curr.push({ coords: coords1, maxScore: score })\n    if (score > maxScore) {\n      maxCoord = coords1\n      maxScore = score\n    }\n  }\n\n  return { coords: maxCoord, maxScore: maxScore }\n}\n\nfunction calculateScore(grid: Array<Array<CellStatus>>) {\n  let score = 0;\n  let baseScores = { 'GreenActive': 4, 'BlueActive': 0, 'RedActive': 1, 'GoldActive': 10, 'OrangeActive': 2 }\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      let base = baseScores[grid[i][j]] ?? -1\n      if (base === -1) {\n        continue;\n      }\n      if ((i - 1 >= 0 && grid[i - 1][j] === 'BlueActive') || (i + 1 < grid.length && grid[i + 1][j] === 'BlueActive')) {\n        base = base + 3\n      }\n      if ((i - 1 >= 0 && j - 1 >= 0 && grid[i - 1][j - 1] === 'RedActive')\n        || (i - 1 >= 0 && j + 1 <= grid[0].length && grid[i - 1][j + 1] === 'RedActive')\n        || (i + 1 < grid.length && j - 1 >= 0 && grid[i + 1][j - 1] === 'RedActive')\n        || (i + 1 < grid.length && j + 1 < grid[0].length && grid[i + 1][j + 1] === 'RedActive')) {\n        base = base + 2\n      }\n      \n      if ((j - 1 >= 0 && grid[i][j - 1] === 'GreenActive') || (j + 1 < grid[0].length && grid[i][j + 1] === 'GreenActive')) {\n        base = 0\n      }\n      score = score + base\n    }\n  }\n\n  return score;\n}\n\nfunction activateGridCoords(grid, coords) {\n  grid[coords[0]][coords[1]] = activateCellStatus(grid[coords[0]][coords[1]])\n  return grid\n}\n\nfunction activateCellStatus(cellStatus: CellStatus) {\n  switch (cellStatus) {\n    case 'GreenActive': return 'GreenInactive'\n    case 'GreenInactive': return 'GreenActive'\n    case 'RedActive': return 'RedInactive'\n    case 'RedInactive': return 'RedActive'\n    case 'BlueActive': return 'BlueInactive'\n    case 'BlueInactive': return 'BlueActive'\n  }\n\n}\n\nfunction deactivateGrid(grid) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      switch (grid[i][j]) {\n        case '4': grid[i][j] = 1; break;\n        case 5: grid[i][j] = 2; break;\n        case 6: grid[i][j] = 3; break;\n        default: break;\n      }\n    }\n  }\n\n  return grid\n}\n\nfunction deactivateGridCellStatus(grid) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      switch (grid[i][j]) {\n        case 'GreenActive': grid[i][j] = 'GreenInactive'; break;\n        case 'RedActive': grid[i][j] = 'RedInactive'; break;\n        case 'BlueActive': grid[i][j] = 'BlueInactive'; break;\n        default: break;\n      }\n    }\n  }\n\n  return grid\n}\n\nfunction highlightCellStatus(cell: CellStatus): CellStatus {\n  switch (cell) {\n    case 'GreenActive': return 'GreenActiveHighlighted';\n    case 'RedActive': return 'RedActiveHighlighted'; \n    case 'BlueActive': return 'BlueActiveHighlighted'; \n    case 'GreenInactive': return 'GreenInactiveHighlighted'; \n    case 'RedInactive': return 'RedInactiveHighlighted'; \n    case 'BlueInactive': return 'BlueInactiveHighlighted'; \n    default: return 'Neutral'\n  }\n\n}\n\nexport const farmingSlice = createSlice({\n  name: 'farming',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n    activateCell: (state, action) => {\n      state.freshAchievements = []\n      let coords = action.payload;\n      //let coords = [0,2]\n      state.grid.grid = activateGridCoords(state.grid.grid, coords)\n      if (state.grid.grid.flatMap(x => x).filter(x => activeCellStatuses.includes(x)).length === state.grid.choiceCount) {\n        state.status = 'finished'\n        state.score = calculateScore(state.grid.grid)\n        if (state.score === state.maxScore) {\n          state.grid.grid = state.grid.grid.map(x => x.map(y => activeCellStatuses.includes(y) ? highlightCellStatus(y) : y))\n          state.achievementStats.perfectScores += 1\n          state.achievementStats.streak += 1\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores))\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores))\n          state.freshAchievements = state.freshAchievements.concat(state.achievements.filter(x => !x.complete && x.streak === state.achievementStats.streak))\n          state.achievements.filter(x => !x.complete && x.streak === state.achievementStats.streak).flatMap(x => x.complete = true)\n          state.achievements.filter(x => !x.complete && x.perfectScores === state.achievementStats.perfectScores).flatMap(x => x.complete = true)\n\n        } else {\n          for (const coord of current(state.maxScoreCoords)) {\n            state.grid.grid[coord[0]][coord[1]] = highlightCellStatus(state.grid.grid[coord[0]][coord[1]])\n          }\n          state.achievementStats.streak = 0\n        }\n\n\n      }\n      //state.value += 1;\n    },\n    setGridSize: (state, action) => {\n      state.grid = emptyGrid(JSON.parse(JSON.stringify(allParams[action.payload])))\n    },\n    startGrid: (state) => {\n      state.status = 'starting'\n      state.grid = initializeGrid(state.grid,state.achievementStats.perfectScores > 0)\n      let bruteForceSolution = bruteForce(state.grid)\n      state.maxScore = bruteForceSolution.maxScore\n      state.maxScoreCoords = bruteForceSolution.coords\n    },\n    enableButtons: (state) => {\n      state.status = 'started'\n    },\n\n  },\n});\n\nexport const { startGrid, activateCell, enableButtons, setGridSize } = farmingSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectGrid = (state: RootState) => state.farming.grid.grid;\nexport const selectGridSize = (state: RootState) => state.farming.grid.gridLength;\nexport const selectStatus = (state: RootState) => state.farming.status;\nexport const selectScore = (state: RootState) => state.farming.score;\nexport const selectMaxScore = (state: RootState) => state.farming.maxScore;\nexport const selectFreshAchievements = (state: RootState) => state.farming.freshAchievements;\n\n\nexport default farmingSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux'\n\nimport counterReducer from '../features/counter/counterSlice';\nimport gameStateReducer from '../features/gameState/gameStateSlice';\nimport thermiteReducer from '../features/thermite_bossfight/thermiteSlice';\nimport farmingReducer from '../features/farming_minigame/farmingSlice';\n\nconst currentVersion = '0.1.1'\n\nlet persistedState = localStorage.getItem('reduxState') \n                       ? JSON.parse(localStorage.getItem('reduxState') || '{}')\n                       : {}\nif(persistedState && persistedState.farming && persistedState.farming.version !== currentVersion){\n  persistedState = {}\n}\nif(persistedState && persistedState.gameState && persistedState.gameState.status && persistedState.gameState.status === 'started'){\n   persistedState.gameState.status = 'ready'\n}\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    gameState: gameStateReducer,\n    thermite: thermiteReducer,\n    farming: farmingReducer\n  },\n  preloadedState: persistedState\n},);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n/*\nconst backgroundAudio = new Audio(\"./MushroomBluegrass.mp3\")\n  backgroundAudio.addEventListener('ended', function () {\n    this.currentTime = 0;\n    this.play();\n    console.log('playing again')\n  }, false);\n  backgroundAudio.play()\n  backgroundAudio.volume = 0.3\n\n  const backgroundAudio2 = new Audio(\"./MushroomBluegrass.mp3\")\n  backgroundAudio2.addEventListener('ended', function () {\n    this.currentTime = 0;\n    this.play();\n    console.log('playing again')\n  }, false);\n  backgroundAudio2.play()\n  backgroundAudio2.volume = 0.3\n*/\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}